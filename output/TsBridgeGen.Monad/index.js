// Generated by purs version 0.15.4
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Control_Monad_Except_Trans from "../Control.Monad.Except.Trans/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Control_Monad_Reader_Trans from "../Control.Monad.Reader.Trans/index.js";
import * as Control_Monad_Trans_Class from "../Control.Monad.Trans.Class/index.js";
import * as Control_Monad_Writer_Class from "../Control.Monad.Writer.Class/index.js";
import * as Control_Monad_Writer_Trans from "../Control.Monad.Writer.Trans/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
var monoidRecord = /* #__PURE__ */ Data_Monoid.monoidRecord()(/* #__PURE__ */ Data_Monoid.monoidRecordCons({
    reflectSymbol: function () {
        return "errors";
    }
})(Data_Monoid.monoidArray)()(/* #__PURE__ */ Data_Monoid.monoidRecordCons({
    reflectSymbol: function () {
        return "logs";
    }
})(Data_Monoid.monoidArray)()(Data_Monoid.monoidRecordNil)));
var monadWriterExceptT = /* #__PURE__ */ Control_Monad_Except_Trans.monadWriterExceptT(/* #__PURE__ */ Control_Monad_Reader_Trans.monadWriterReaderT(/* #__PURE__ */ Control_Monad_Writer_Trans.monadWriterWriterT(monoidRecord)(Effect_Aff.monadAff)));
var monadWriterT = /* #__PURE__ */ Control_Monad_Writer_Trans.monadWriterT(monoidRecord)(Effect_Aff.monadAff);
var monadReaderT = /* #__PURE__ */ Control_Monad_Reader_Trans.monadReaderT(monadWriterT);
var functorExceptT = /* #__PURE__ */ Control_Monad_Except_Trans.functorExceptT(/* #__PURE__ */ Control_Monad_Reader_Trans.functorReaderT(/* #__PURE__ */ Control_Monad_Writer_Trans.functorWriterT(Effect_Aff.functorAff)));
var $$try = /* #__PURE__ */ Control_Monad_Error_Class["try"](/* #__PURE__ */ Control_Monad_Reader_Trans.monadErrorReaderT(/* #__PURE__ */ Control_Monad_Writer_Trans.monadErrorWriterT(monoidRecord)(Effect_Aff.monadErrorAff)));
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var tell = /* #__PURE__ */ Control_Monad_Writer_Class.tell(/* #__PURE__ */ Control_Monad_Except_Trans.monadTellExceptT(/* #__PURE__ */ Control_Monad_Reader_Trans.monadTellReaderT(/* #__PURE__ */ Control_Monad_Writer_Trans.monadTellWriterT(monoidRecord)(Effect_Aff.monadAff))));
var pure = /* #__PURE__ */ Control_Applicative.pure(Control_Applicative.applicativeArray);
var mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(functorExceptT);
var listens = /* #__PURE__ */ Control_Monad_Writer_Class.listens(monadWriterExceptT);
var AppEffects = function (x) {
    return x;
};
var AppEnv = function (x) {
    return x;
};
var AppM = function (x) {
    return x;
};
var monadThrowAppErrorAppM = /* #__PURE__ */ Control_Monad_Except_Trans.monadThrowExceptT(monadReaderT);
var monadRecAppM = /* #__PURE__ */ Control_Monad_Except_Trans.monadRecExceptT(/* #__PURE__ */ Control_Monad_Reader_Trans.monadRecReaderT(/* #__PURE__ */ Control_Monad_Writer_Trans.monadRecWriterT(monoidRecord)(Effect_Aff.monadRecAff)));
var monadErrorAppErrorAppM = /* #__PURE__ */ Control_Monad_Except_Trans.monadErrorExceptT(monadReaderT);
var monadEffectAppM = /* #__PURE__ */ Control_Monad_Except_Trans.monadEffectExceptT(/* #__PURE__ */ Control_Monad_Reader_Trans.monadEffectReader(/* #__PURE__ */ Control_Monad_Writer_Trans.monadEffectWriter(monoidRecord)(Effect_Aff.monadEffectAff)));
var monadAskAppEnvAppMAppM = /* #__PURE__ */ Control_Monad_Except_Trans.monadAskExceptT(/* #__PURE__ */ Control_Monad_Reader_Trans.monadAskReaderT(monadWriterT));
var ask = /* #__PURE__ */ Control_Monad_Reader_Class.ask(monadAskAppEnvAppMAppM);
var monadAppM = /* #__PURE__ */ Control_Monad_Except_Trans.monadExceptT(monadReaderT);
var monadAffAppM = /* #__PURE__ */ Effect_Aff_Class.monadAffExceptT(/* #__PURE__ */ Effect_Aff_Class.monadAffReader(/* #__PURE__ */ Effect_Aff_Class.monadAffWriter(Effect_Aff_Class.monadAffAff)(monoidRecord)));
var functorAppM = functorExceptT;
var bindAppM = /* #__PURE__ */ Control_Monad_Except_Trans.bindExceptT(monadReaderT);
var bind = /* #__PURE__ */ Control_Bind.bind(bindAppM);
var applyAppM = /* #__PURE__ */ Control_Monad_Except_Trans.applyExceptT(monadReaderT);
var applicativeAppM = /* #__PURE__ */ Control_Monad_Except_Trans.applicativeExceptT(monadReaderT);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(applicativeAppM);
var monadAppConfigAppM = {
    askAppConfig: /* #__PURE__ */ bind(ask)(function (v) {
        return pure1(v.config);
    })
};
var monadAppEffectsAppM = {
    askAppEffects: /* #__PURE__ */ bind(ask)(function (v) {
        return pure1(v.capabilities);
    })
};
var runAppM = function (env) {
    return function (v) {
        return Control_Monad_Writer_Trans.runWriterT(Data_Function.flip(Control_Monad_Reader_Trans.runReaderT)(env)($$try(Control_Monad_Except_Trans.runExceptT(v))));
    };
};
var pushError = function (dict) {
    return dict.pushError;
};
var monadMultipleErrorsWriter = function (dictMonoid) {
    var lift = Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid));
    var monadWriterT1 = Control_Monad_Writer_Trans.monadWriterT(dictMonoid);
    return function (dictMonadMultipleErrors) {
        var Monad0 = dictMonadMultipleErrors.Monad0();
        var monadWriterT2 = monadWriterT1(Monad0);
        return {
            pushError: (function () {
                var $186 = lift(Monad0);
                var $187 = pushError(dictMonadMultipleErrors);
                return function ($188) {
                    return $186($187($188));
                };
            })(),
            Monad0: function () {
                return monadWriterT2;
            }
        };
    };
};
var printPos = function (fp) {
    return function (v) {
        return fp + (":" + (show(v.line + 1 | 0) + (":" + show(v.column + 1 | 0))));
    };
};
var log = function (dict) {
    return dict.log;
};
var liftAppEffects = function (dictMonad) {
    return function (dictMonadTrans) {
        var lift = Control_Monad_Trans_Class.lift(dictMonadTrans)(dictMonad);
        return function (v) {
            return {
                mkdirRec: function (x1) {
                    return lift(v.mkdirRec(x1));
                },
                readTextFile: function (x1) {
                    return lift(v.readTextFile(x1));
                },
                writeTextFile: function (x1) {
                    return function (x2) {
                        return lift(v.writeTextFile(x1)(x2));
                    };
                },
                expandGlobsCwd: function (x1) {
                    return lift(v.expandGlobsCwd(x1));
                },
                runPrettier: function (x1) {
                    return lift(v.runPrettier(x1));
                },
                spagoLsDepsTransitive: lift(v.spagoLsDepsTransitive),
                spagoSources: lift(v.spagoSources)
            };
        };
    };
};
var getLogs = function (dict) {
    return dict.getLogs;
};
var monadLogWriterT = function (dictMonoid) {
    var lift = Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid));
    var monadWriterT1 = Control_Monad_Writer_Trans.monadWriterT(dictMonoid);
    return function (dictMonadLog) {
        var Monad0 = dictMonadLog.Monad0();
        var bind1 = Control_Bind.bind(Monad0.Bind1());
        var getLogs1 = getLogs(dictMonadLog);
        var pure2 = Control_Applicative.pure(Monad0.Applicative0());
        var monadWriterT2 = monadWriterT1(Monad0);
        return {
            log: (function () {
                var $189 = lift(Monad0);
                var $190 = log(dictMonadLog);
                return function ($191) {
                    return $189($190($191));
                };
            })(),
            getLogs: function (v) {
                return bind1(getLogs1(v))(function (logs) {
                    return bind1(v)(function (v1) {
                        return pure2(new Data_Tuple.Tuple(logs, v1.value1));
                    });
                });
            },
            Monad0: function () {
                return monadWriterT2;
            }
        };
    };
};
var emptyAppMAccum = /* #__PURE__ */ Data_Monoid.mempty(monoidRecord);
var monadLogAppLogAppM = {
    log: function (l) {
        return tell({
            logs: pure(l),
            errors: emptyAppMAccum.errors
        });
    },
    getLogs: function (v) {
        return mapFlipped(listens(function (v1) {
            return v1.logs;
        })(v))(Data_Tuple.snd);
    },
    Monad0: function () {
        return monadAppM;
    }
};
var monadMultipleErrorsAppErr = {
    pushError: function (error) {
        return tell({
            errors: pure(error),
            logs: emptyAppMAccum.logs
        });
    },
    Monad0: function () {
        return monadAppM;
    }
};
var monadAppAppM = {
    MonadError0: function () {
        return monadErrorAppErrorAppM;
    },
    MonadLog1: function () {
        return monadLogAppLogAppM;
    },
    MonadMultipleErrors2: function () {
        return monadMultipleErrorsAppErr;
    },
    MonadRec3: function () {
        return monadRecAppM;
    },
    MonadAppEffects4: function () {
        return monadAppEffectsAppM;
    },
    MonadAppConfig5: function () {
        return monadAppConfigAppM;
    }
};
var askAppEffects = function (dict) {
    return dict.askAppEffects;
};
var monadAppEffectsWriterT = function (dictMonoid) {
    var monadTransWriterT = Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid);
    var lift = Control_Monad_Trans_Class.lift(monadTransWriterT);
    return function (dictMonad) {
        var lift1 = lift(dictMonad);
        var map = Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0());
        var liftAppEffects1 = liftAppEffects(dictMonad)(monadTransWriterT);
        return function (dictMonadAppEffects) {
            return {
                askAppEffects: lift1(map(liftAppEffects1)(askAppEffects(dictMonadAppEffects)))
            };
        };
    };
};
var askAppConfig = function (dict) {
    return dict.askAppConfig;
};
var monadAppConfigWriterT = function (dictMonoid) {
    var lift = Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid));
    return function (dictMonad) {
        var lift1 = lift(dictMonad);
        return function (dictMonadAppConfig) {
            return {
                askAppConfig: lift1(askAppConfig(dictMonadAppConfig))
            };
        };
    };
};
var monadAppWriterT = function (dictMonoid) {
    var monadErrorWriterT = Control_Monad_Writer_Trans.monadErrorWriterT(dictMonoid);
    var monadLogWriterT1 = monadLogWriterT(dictMonoid);
    var monadMultipleErrorsWriter1 = monadMultipleErrorsWriter(dictMonoid);
    var monadRecWriterT = Control_Monad_Writer_Trans.monadRecWriterT(dictMonoid);
    var monadAppEffectsWriterT1 = monadAppEffectsWriterT(dictMonoid);
    var monadAppConfigWriterT1 = monadAppConfigWriterT(dictMonoid);
    return function (dictMonadApp) {
        var monadErrorWriterT1 = monadErrorWriterT(dictMonadApp.MonadError0());
        var monadLogWriterT2 = monadLogWriterT1(dictMonadApp.MonadLog1());
        var monadMultipleErrorsWriter2 = monadMultipleErrorsWriter1(dictMonadApp.MonadMultipleErrors2());
        var MonadRec3 = dictMonadApp.MonadRec3();
        var monadRecWriterT1 = monadRecWriterT(MonadRec3);
        var Monad0 = MonadRec3.Monad0();
        var monadAppEffectsWriterT2 = monadAppEffectsWriterT1(Monad0)(dictMonadApp.MonadAppEffects4());
        var monadAppConfigWriterT2 = monadAppConfigWriterT1(Monad0)(dictMonadApp.MonadAppConfig5());
        return {
            MonadError0: function () {
                return monadErrorWriterT1;
            },
            MonadLog1: function () {
                return monadLogWriterT2;
            },
            MonadMultipleErrors2: function () {
                return monadMultipleErrorsWriter2;
            },
            MonadRec3: function () {
                return monadRecWriterT1;
            },
            MonadAppEffects4: function () {
                return monadAppEffectsWriterT2;
            },
            MonadAppConfig5: function () {
                return monadAppConfigWriterT2;
            }
        };
    };
};
export {
    AppEffects,
    AppEnv,
    askAppConfig,
    askAppEffects,
    getLogs,
    log,
    pushError,
    runAppM,
    monadAppEffectsAppM,
    monadAppConfigAppM,
    monadAppEffectsWriterT,
    monadAppConfigWriterT,
    monadAppWriterT,
    monadLogWriterT,
    monadMultipleErrorsWriter,
    monadAppAppM,
    monadAffAppM,
    monadEffectAppM,
    bindAppM,
    monadAppM,
    applyAppM,
    applicativeAppM,
    monadErrorAppErrorAppM,
    monadThrowAppErrorAppM,
    functorAppM,
    monadAskAppEnvAppMAppM,
    monadRecAppM,
    monadLogAppLogAppM,
    monadMultipleErrorsAppErr
};
