// Generated by purs version 0.15.4
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Control_Monad_Except_Trans from "../Control.Monad.Except.Trans/index.js";
import * as Control_Monad_Reader_Class from "../Control.Monad.Reader.Class/index.js";
import * as Control_Monad_Reader_Trans from "../Control.Monad.Reader.Trans/index.js";
import * as Control_Monad_Trans_Class from "../Control.Monad.Trans.Class/index.js";
import * as Control_Monad_Writer_Trans from "../Control.Monad.Writer.Trans/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Dodo from "../Dodo/index.js";
import * as Effect from "../Effect/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Aff_Class from "../Effect.Aff.Class/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Class_Console from "../Effect.Class.Console/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Node_Process from "../Node.Process/index.js";
import * as PureScript_CST from "../PureScript.CST/index.js";
import * as Tidy from "../Tidy/index.js";
import * as TsBridgeGen_Types from "../TsBridgeGen.Types/index.js";
var monadExceptT = /* #__PURE__ */ Control_Monad_Except_Trans.monadExceptT(Effect_Aff.monadAff);
var functorReaderT = /* #__PURE__ */ Control_Monad_Reader_Trans.functorReaderT(/* #__PURE__ */ Control_Monad_Except_Trans.functorExceptT(Effect_Aff.functorAff));
var defaultFormatOptions = /* #__PURE__ */ Tidy.defaultFormatOptions(Tidy.formatErrorVoid);
var error = /* #__PURE__ */ Effect_Class_Console.error(Effect_Class.monadEffectEffect);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var lines = /* #__PURE__ */ Dodo.lines(Data_Foldable.foldableArray);
var mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(Data_Functor.functorArray);
var show1 = /* #__PURE__ */ Data_Show.show(Effect_Exception.showError);
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect.applicativeEffect);
var bind = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var $$try = /* #__PURE__ */ Control_Monad_Error_Class["try"](Effect_Aff.monadErrorAff);
var mapFlipped1 = /* #__PURE__ */ Data_Functor.mapFlipped(functorReaderT);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
var AppCapabalities = function (x) {
    return x;
};
var AppEnv = function (x) {
    return x;
};
var AppM = function (x) {
    return x;
};
var monadThrowAppErrorAppM = /* #__PURE__ */ Control_Monad_Reader_Trans.monadThrowReaderT(/* #__PURE__ */ Control_Monad_Except_Trans.monadThrowExceptT(Effect_Aff.monadAff));
var monadRecAppM = /* #__PURE__ */ Control_Monad_Reader_Trans.monadRecReaderT(/* #__PURE__ */ Control_Monad_Except_Trans.monadRecExceptT(Effect_Aff.monadRecAff));
var monadErrorAppErrorAppM = /* #__PURE__ */ Control_Monad_Reader_Trans.monadErrorReaderT(/* #__PURE__ */ Control_Monad_Except_Trans.monadErrorExceptT(Effect_Aff.monadAff));
var monadEffectAppM = /* #__PURE__ */ Control_Monad_Reader_Trans.monadEffectReader(/* #__PURE__ */ Control_Monad_Except_Trans.monadEffectExceptT(Effect_Aff.monadEffectAff));
var log1 = /* #__PURE__ */ Effect_Class_Console.log(monadEffectAppM);
var monadAskAppEnvAppMAppM = /* #__PURE__ */ Control_Monad_Reader_Trans.monadAskReaderT(monadExceptT);
var monadAppM = /* #__PURE__ */ Control_Monad_Reader_Trans.monadReaderT(monadExceptT);
var monadAffAppM = /* #__PURE__ */ Effect_Aff_Class.monadAffReader(/* #__PURE__ */ Effect_Aff_Class.monadAffExceptT(Effect_Aff_Class.monadAffAff));
var functorAppM = functorReaderT;
var mapFlipped2 = /* #__PURE__ */ Data_Functor.mapFlipped(functorAppM);
var bindAppM = /* #__PURE__ */ Control_Monad_Reader_Trans.bindReaderT(/* #__PURE__ */ Control_Monad_Except_Trans.bindExceptT(Effect_Aff.monadAff));
var bind1 = /* #__PURE__ */ Control_Bind.bind(bindAppM);
var applyAppM = /* #__PURE__ */ Control_Monad_Reader_Trans.applyReaderT(/* #__PURE__ */ Control_Monad_Except_Trans.applyExceptT(Effect_Aff.monadAff));
var applicativeAppM = /* #__PURE__ */ Control_Monad_Reader_Trans.applicativeReaderT(/* #__PURE__ */ Control_Monad_Except_Trans.applicativeExceptT(Effect_Aff.monadAff));
var showDoc = function (dictShow) {
    var $140 = Data_Show.show(dictShow);
    return function ($141) {
        return (function (v) {
            if (v instanceof PureScript_CST.ParseSucceeded) {
                return (function (v1) {
                    return v1.doc;
                })(Tidy.formatExpr(defaultFormatOptions)(v.value0));
            };
            return Dodo.text("<invalid>");
        })(PureScript_CST.parseExpr($140($141)));
    };
};
var showDoc1 = /* #__PURE__ */ showDoc(TsBridgeGen_Types.showAppError);
var showDoc2 = /* #__PURE__ */ showDoc(TsBridgeGen_Types.showAppLog);
var quitWithError = function (msg) {
    return function __do() {
        error(msg)();
        return Node_Process.exit(1)();
    };
};
var printPos = function (fp) {
    return function (v) {
        return fp + (":" + (show(v.line) + (":" + show(v.column))));
    };
};
var printError = function (v) {
    return function (x) {
        if (v.debug) {
            return showDoc1(x);
        };
        if (x instanceof TsBridgeGen_Types.ErrSpawn) {
            return Dodo.text("Failed to spawn Command " + x.value0);
        };
        if (x instanceof TsBridgeGen_Types.ErrParseModule) {
            return Dodo.text("Failed to parse PureScript module");
        };
        if (x instanceof TsBridgeGen_Types.ErrReadFile) {
            return Dodo.text("Failed to read from file " + x.value0);
        };
        if (x instanceof TsBridgeGen_Types.ErrWriteFile) {
            return Dodo.text("Failed to write to file " + x.value0);
        };
        if (x instanceof TsBridgeGen_Types.ErrExpandGlobs) {
            return Dodo.text("Failed to expand globs");
        };
        if (x instanceof TsBridgeGen_Types.ErrParseEnvVars) {
            return Dodo.text("Failed to parse environment variables");
        };
        if (x instanceof TsBridgeGen_Types.ErrLiteral) {
            return lines(mapFlipped(Data_String_Common.split("\x0a")(x.value0))(Dodo.text));
        };
        if (x instanceof TsBridgeGen_Types.ErrParseToJson) {
            return Dodo.text("Found invalid JSON");
        };
        if (x instanceof TsBridgeGen_Types.ErrParseToData) {
            return Dodo.text("JSON config does not have the right shape");
        };
        if (x instanceof TsBridgeGen_Types.ErrUnknown) {
            return Dodo.text("An unknown error occured. Try DEBUG=true");
        };
        if (x instanceof TsBridgeGen_Types.AtFilePosition) {
            return lines([ printError(v)(x.value2), Dodo.text("at " + printPos(x.value0)(x.value1)) ]);
        };
        throw new Error("Failed pattern match at TsBridgeGen.Monad (line 114, column 8 - line 140, column 8): " + [ x.constructor.name ]);
    };
};
var printAppLog = function (dictMonadApp) {
    var Monad0 = (dictMonadApp.MonadRec3()).Monad0();
    var bind2 = Control_Bind.bind(Monad0.Bind1());
    var ask = Control_Monad_Reader_Class.ask(dictMonadApp.MonadAsk0());
    var pure1 = Control_Applicative.pure(Monad0.Applicative0());
    return function (x) {
        return bind2(ask)(function (v) {
            return bind2(pure1(0))(function (c) {
                return pure1((function () {
                    if (v.config.debug) {
                        return showDoc2(x);
                    };
                    if (x instanceof TsBridgeGen_Types.LogLiteral) {
                        return lines(mapFlipped(Data_String_Common.split("\x0a")(x.value0))(Dodo.text));
                    };
                    if (x instanceof TsBridgeGen_Types.LogError) {
                        return lines([ Dodo.text("Error " + (show(c + 1 | 0) + ":")), Dodo.indent(printError(v.config)(x.value0)) ]);
                    };
                    throw new Error("Failed pattern match at TsBridgeGen.Monad (line 104, column 10 - line 109, column 10): " + [ x.constructor.name ]);
                })());
            });
        });
    };
};
var monadLogAppLogAppM = {
    log: function (x) {
        return bind1(mapFlipped2(printAppLog(monadAppAppM)(x))(Dodo.print(Dodo.plainText)(Dodo.twoSpaces)))(log1);
    },
    Monad0: function () {
        return monadAppM;
    }
};
var monadAppAppM = {
    MonadAsk0: function () {
        return monadAskAppEnvAppMAppM;
    },
    MonadError1: function () {
        return monadErrorAppErrorAppM;
    },
    MonadLog2: function () {
        return monadLogAppLogAppM;
    },
    MonadRec3: function () {
        return monadRecAppM;
    }
};
var log = function (dict) {
    return dict.log;
};
var monadLogWriterT = function (dictMonoid) {
    var lift = Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid));
    var monadWriterT = Control_Monad_Writer_Trans.monadWriterT(dictMonoid);
    return function (dictMonadLog) {
        var Monad0 = dictMonadLog.Monad0();
        var monadWriterT1 = monadWriterT(Monad0);
        return {
            log: (function () {
                var $142 = lift(Monad0);
                var $143 = log(dictMonadLog);
                return function ($144) {
                    return $142($143($144));
                };
            })(),
            Monad0: function () {
                return monadWriterT1;
            }
        };
    };
};
var handleErrors = function (v) {
    return function (v1) {
        if (v1 instanceof Data_Either.Left) {
            if (v.debug) {
                return quitWithError("Unexpected Error.\x0a" + show1(v1.value0));
            };
            return quitWithError("Unexpected Error. Try to set DEBUG=true");
        };
        if (v1 instanceof Data_Either.Right && v1.value0 instanceof Data_Either.Left) {
            return quitWithError(Dodo.print(Dodo.plainText)(Dodo.twoSpaces)(printError(v)(v1.value0.value0)));
        };
        if (v1 instanceof Data_Either.Right && v1.value0 instanceof Data_Either.Right) {
            return pure(v1.value0.value0);
        };
        throw new Error("Failed pattern match at TsBridgeGen.Monad (line 162, column 45 - line 169, column 28): " + [ v1.constructor.name ]);
    };
};
var runAppM = function (v) {
    return function (v1) {
        return Effect_Aff.launchAff_(bind($$try(Control_Monad_Except_Trans.runExceptT(Data_Function.flip(Control_Monad_Reader_Trans.runReaderT)(v)(mapFlipped1(v1)(Data_Function["const"](Data_Unit.unit))))))((function () {
            var $145 = handleErrors(v.config);
            return function ($146) {
                return liftEffect($145($146));
            };
        })()));
    };
};
var errorCount = function (dict) {
    return dict.errorCount;
};
var monadErrorCountWriterT = function (dictMonoid) {
    var lift = Control_Monad_Trans_Class.lift(Control_Monad_Writer_Trans.monadTransWriterT(dictMonoid));
    var monadWriterT = Control_Monad_Writer_Trans.monadWriterT(dictMonoid);
    return function (dictMonadErrorCount) {
        var Monad0 = dictMonadErrorCount.Monad0();
        var monadWriterT1 = monadWriterT(Monad0);
        return {
            errorCount: lift(Monad0)(errorCount(dictMonadErrorCount)),
            Monad0: function () {
                return monadWriterT1;
            }
        };
    };
};
export {
    AppCapabalities,
    AppEnv,
    log,
    runAppM,
    monadAppAppM,
    monadAffAppM,
    monadEffectAppM,
    bindAppM,
    monadAppM,
    applyAppM,
    applicativeAppM,
    monadErrorAppErrorAppM,
    monadThrowAppErrorAppM,
    functorAppM,
    monadAskAppEnvAppMAppM,
    monadRecAppM,
    monadLogAppLogAppM,
    monadLogWriterT
};
