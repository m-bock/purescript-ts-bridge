// Generated by purs version 0.15.4
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Semigroupoid from "../Control.Semigroupoid/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Test_QuickCheck from "../Test.QuickCheck/index.js";
import * as Test_QuickCheck_Arbitrary from "../Test.QuickCheck.Arbitrary/index.js";
import * as Test_QuickCheck_Gen from "../Test.QuickCheck.Gen/index.js";
import * as Test_QuickCheck_Laws from "../Test.QuickCheck.Laws/index.js";
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var compose = /* #__PURE__ */ Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn);
var quickCheck$prime = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableGen(Test_QuickCheck.testableBoolean));
var map = /* #__PURE__ */ Data_Functor.map(Test_QuickCheck_Gen.functorGen);
var lift3 = /* #__PURE__ */ Control_Apply.lift3(Test_QuickCheck_Gen.applyGen);
var testableFunction = /* #__PURE__ */ Test_QuickCheck.testableFunction(Test_QuickCheck_Laws.arbitraryA)(Test_QuickCheck.testableBoolean);
var quickCheck$prime1 = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableFunction(/* #__PURE__ */ Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryA)(Test_QuickCheck_Laws.arbitraryB))(testableFunction));
var quickCheck$prime2 = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableGen(testableFunction));
var checkApplicativeGen = function (dictApplicative) {
    var apply = Control_Apply.apply(dictApplicative.Apply0());
    var pure = Control_Applicative.pure(dictApplicative);
    return function (dictEq) {
        var eq = Data_Eq.eq(dictEq);
        return function (dictEq1) {
            var eq1 = Data_Eq.eq(dictEq1);
            return function (dictEq2) {
                var eq2 = Data_Eq.eq(dictEq2);
                return function (gen) {
                    return function (genab) {
                        return function (genbc) {
                            var interchange = function (y) {
                                return function (u) {
                                    return eq1(apply(u)(pure(y)))(apply(pure(function (v) {
                                        return v(y);
                                    }))(u));
                                };
                            };
                            var identity1 = function (v) {
                                return eq(apply(pure(identity))(v))(v);
                            };
                            var homomorphism = function (f) {
                                return function (x) {
                                    return eq1(apply(pure(f))(pure(x)))(pure(f(x)));
                                };
                            };
                            var composition = function (f) {
                                return function (g) {
                                    return function (x) {
                                        return eq2(apply(apply(apply(pure(compose))(f))(g))(x))(apply(f)(apply(g)(x)));
                                    };
                                };
                            };
                            return function __do() {
                                Effect_Console.log("Checking 'Identity' law for Applicative")();
                                quickCheck$prime(1000)(map(identity1)(gen))();
                                Effect_Console.log("Checking 'Composition' law for Applicative")();
                                quickCheck$prime(1000)(lift3(composition)(genbc)(genab)(gen))();
                                Effect_Console.log("Checking 'Homomorphism' law for Applicative")();
                                quickCheck$prime1(1000)(homomorphism)();
                                Effect_Console.log("Checking 'Interchange' law for Applicative")();
                                return quickCheck$prime2(1000)(map(Data_Function.flip(interchange))(genab))();
                            };
                        };
                    };
                };
            };
        };
    };
};
var checkApplicative = function (dictApplicative) {
    var checkApplicativeGen1 = checkApplicativeGen(dictApplicative);
    return function (dictArbitrary) {
        var arbitrary = Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary);
        return function (dictArbitrary1) {
            var arbitrary1 = Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary1);
            return function (dictArbitrary2) {
                var arbitrary2 = Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary2);
                return function (dictEq) {
                    var checkApplicativeGen2 = checkApplicativeGen1(dictEq);
                    return function (dictEq1) {
                        var checkApplicativeGen3 = checkApplicativeGen2(dictEq1);
                        return function (dictEq2) {
                            var checkApplicativeGen4 = checkApplicativeGen3(dictEq2);
                            return function (v) {
                                return checkApplicativeGen4(arbitrary)(arbitrary1)(arbitrary2);
                            };
                        };
                    };
                };
            };
        };
    };
};
export {
    checkApplicative,
    checkApplicativeGen
};
