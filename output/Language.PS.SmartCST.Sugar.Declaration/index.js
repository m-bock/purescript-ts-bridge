// Generated by purs version 0.15.4
import * as Data_Array_NonEmpty from "../Data.Array.NonEmpty/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Language_PS_CST_Sugar_Leafs from "../Language.PS.CST.Sugar.Leafs/index.js";
import * as Language_PS_SmartCST_Types_Declaration from "../Language.PS.SmartCST.Types.Declaration/index.js";
import * as Language_PS_SmartCST_Types_SmartQualifiedName from "../Language.PS.SmartCST.Types.SmartQualifiedName/index.js";
var typeRow = function (labels) {
    return new Language_PS_SmartCST_Types_Declaration.TypeRow({
        rowLabels: Language_PS_CST_Sugar_Leafs.mkRowLabels(labels),
        rowTail: Data_Maybe.Nothing.value
    });
};
var typeRecord = function (labels) {
    return new Language_PS_SmartCST_Types_Declaration.TypeRecord({
        rowLabels: Language_PS_CST_Sugar_Leafs.mkRowLabels(labels),
        rowTail: Data_Maybe.Nothing.value
    });
};
var stringType = /* #__PURE__ */ (function () {
    return new Language_PS_SmartCST_Types_Declaration.TypeConstructor(new Language_PS_SmartCST_Types_SmartQualifiedName.SmartQualifiedName__Ignore("String"));
})();
var numberType = /* #__PURE__ */ (function () {
    return new Language_PS_SmartCST_Types_Declaration.TypeConstructor(new Language_PS_SmartCST_Types_SmartQualifiedName.SmartQualifiedName__Ignore("Number"));
})();
var maybeType = /* #__PURE__ */ (function () {
    return Language_PS_SmartCST_Types_Declaration.TypeApp.create(new Language_PS_SmartCST_Types_Declaration.TypeConstructor(new Language_PS_SmartCST_Types_SmartQualifiedName.SmartQualifiedName__Simple(Language_PS_CST_Sugar_Leafs.mkModuleName(Data_Array_NonEmpty["cons$prime"]("Data")([ "Maybe" ])), "Maybe")));
})();
var booleanType = /* #__PURE__ */ (function () {
    return new Language_PS_SmartCST_Types_Declaration.TypeConstructor(new Language_PS_SmartCST_Types_SmartQualifiedName.SmartQualifiedName__Ignore("Boolean"));
})();
var arrayType = /* #__PURE__ */ (function () {
    return Language_PS_SmartCST_Types_Declaration.TypeApp.create(new Language_PS_SmartCST_Types_Declaration.TypeConstructor(new Language_PS_SmartCST_Types_SmartQualifiedName.SmartQualifiedName__Ignore("Array")));
})();
export {
    typeRecord,
    typeRow,
    booleanType,
    numberType,
    stringType,
    arrayType,
    maybeType
};
