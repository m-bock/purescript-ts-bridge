// Generated by purs version 0.15.4
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Writer from "../Control.Monad.Writer/index.js";
import * as Control_Monad_Writer_Class from "../Control.Monad.Writer.Class/index.js";
import * as Control_Monad_Writer_Trans from "../Control.Monad.Writer.Trans/index.js";
import * as Data_Array_NonEmpty_Internal from "../Data.Array.NonEmpty.Internal/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Dodo from "../Dodo/index.js";
import * as Language_PS_CST_Printers from "../Language.PS.CST.Printers/index.js";
import * as Language_PS_CST_Sugar_Leafs from "../Language.PS.CST.Sugar.Leafs/index.js";
import * as Language_PS_CST_Sugar_QualifiedName from "../Language.PS.CST.Sugar.QualifiedName/index.js";
import * as Language_PS_CST_Types_Declaration from "../Language.PS.CST.Types.Declaration/index.js";
import * as TsBridgeGen_Types from "../TsBridgeGen.Types/index.js";
var mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(Data_Functor.functorArray);
var toUnfoldable = /* #__PURE__ */ Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray);
var pure = /* #__PURE__ */ Control_Applicative.pure(Data_Array_NonEmpty_Internal.applicativeNonEmptyArray);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(Control_Applicative.applicativeArray);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit);
var importsIsSymbol = {
    reflectSymbol: function () {
        return "imports";
    }
};
var bindWriterT = /* #__PURE__ */ Control_Monad_Writer_Trans.bindWriterT(/* #__PURE__ */ Data_Semigroup.semigroupRecord()(/* #__PURE__ */ Data_Semigroup.semigroupRecordCons(importsIsSymbol)()(Data_Semigroup.semigroupRecordNil)(/* #__PURE__ */ Data_Set.semigroupSet(TsBridgeGen_Types.ordImport))));
var monoidRecord = /* #__PURE__ */ Data_Monoid.monoidRecord()(/* #__PURE__ */ Data_Monoid.monoidRecordCons(importsIsSymbol)(/* #__PURE__ */ Data_Set.monoidSet(TsBridgeGen_Types.ordImport))()(Data_Monoid.monoidRecordNil));
var monadTellWriterT = /* #__PURE__ */ Control_Monad_Writer_Trans.monadTellWriterT(monoidRecord);
var applicativeWriterT = /* #__PURE__ */ Control_Monad_Writer_Trans.applicativeWriterT(monoidRecord);
var traverse = /* #__PURE__ */ Data_Traversable.traverse(Data_Traversable.traversableArray);
var sequence = /* #__PURE__ */ Data_Traversable.sequence(Data_Traversable.traversableArray);
var bind = /* #__PURE__ */ Control_Bind.bind(Control_Bind.bindArray);
var CodeSnipDecl = /* #__PURE__ */ (function () {
    function CodeSnipDecl(value0) {
        this.value0 = value0;
    };
    CodeSnipDecl.create = function (value0) {
        return new CodeSnipDecl(value0);
    };
    return CodeSnipDecl;
})();
var CodeSnipComments = /* #__PURE__ */ (function () {
    function CodeSnipComments(value0) {
        this.value0 = value0;
    };
    CodeSnipComments.create = function (value0) {
        return new CodeSnipComments(value0);
    };
    return CodeSnipComments;
})();
var unsupported = function (v) {
    return function (reason) {
        return new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprIdent(Language_PS_CST_Sugar_QualifiedName.nonQualifiedName("tsUnsupported")), new Language_PS_CST_Types_Declaration.ExprString(v)), new Language_PS_CST_Types_Declaration.ExprString(reason));
    };
};
var runImportWriterT = function (ma) {
    return Control_Monad_Writer_Trans.runWriterT(ma);
};
var runImportWriterM = function (ma) {
    return Control_Monad_Writer.runWriter(ma);
};
var printImport = function (v) {
    if (v instanceof TsBridgeGen_Types.ImportAuto) {
        return "import " + (v.value0.from + (" as " + v.value0.as));
    };
    if (v instanceof TsBridgeGen_Types.ImportUser) {
        return v.value0;
    };
    throw new Error("Failed pattern match at TsBridgeGen.Print (line 192, column 15 - line 195, column 20): " + [ v.constructor.name ]);
};
var printImports = function (x) {
    return Data_String_Common.joinWith("\x0a")(mapFlipped(toUnfoldable(x))(printImport));
};
var instName = /* #__PURE__ */ (function () {
    var replace = (function () {
        var $118 = Data_String_Common.replaceAll(" " + ("instName" + "\x0a  ::"))("");
        var $119 = Data_String_Common.replaceAll(" " + ("instName" + " ::"))("");
        return function ($120) {
            return $118($119($120));
        };
    })();
    return {
        name: "instName",
        replace: replace
    };
})();
var printPursSnippets = /* #__PURE__ */ (function () {
    var $121 = Data_String_Common.joinWith("\x0a\x0a");
    var $122 = Data_Functor.map(Data_Functor.functorArray)(function (v) {
        if (v instanceof CodeSnipDecl) {
            return instName.replace(Dodo.print(Dodo.plainText)(Dodo.twoSpaces)(Language_PS_CST_Printers.printDeclaration(v.value0)));
        };
        if (v instanceof CodeSnipComments) {
            return Data_String_Common.joinWith("\x0a")(mapFlipped(v.value0)(function (v1) {
                return "-- " + v1;
            }));
        };
        throw new Error("Failed pattern match at TsBridgeGen.Print (line 179, column 49 - line 183, column 65): " + [ v.constructor.name ]);
    });
    return function ($123) {
        return $121($122($123));
    };
})();
var genTsBridgeInstance = function (v) {
    return function (v1) {
        return function (expr) {
            var head = {
                instName: instName.name,
                instConstraints: [  ],
                instClass: Language_PS_CST_Sugar_QualifiedName.nonQualifiedName("ToTsBridge"),
                instTypes: pure(new Language_PS_CST_Types_Declaration.TypeConstructor(Language_PS_CST_Sugar_QualifiedName.qualifiedName(Language_PS_CST_Sugar_Leafs.mkModuleName(pure("Auto." + v)))(v1)))
            };
            var body = pure1(new Language_PS_CST_Types_Declaration.InstanceBindingName({
                binders: [  ],
                name: "toTsBridge",
                guarded: new Language_PS_CST_Types_Declaration.Unconditional({
                    expr: expr,
                    whereBindings: [  ]
                })
            }));
            return new Language_PS_CST_Types_Declaration.DeclInstanceChain({
                comments: Data_Maybe.Nothing.value,
                instances: pure({
                    head: head,
                    body: body
                })
            });
        };
    };
};
var genProxy = function (qn) {
    return new Language_PS_CST_Types_Declaration.ExprTyped(new Language_PS_CST_Types_Declaration.ExprConstructor(Language_PS_CST_Sugar_QualifiedName.nonQualifiedName("Proxy")), new Language_PS_CST_Types_Declaration.TypeApp(Language_PS_CST_Types_Declaration.TypeWildcard.value, new Language_PS_CST_Types_Declaration.TypeConstructor(qn)));
};
var genTsDef = function (v) {
    return function (v1) {
        if (v1 instanceof TsBridgeGen_Types.DefType) {
            return new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprIdent(Language_PS_CST_Sugar_QualifiedName.nonQualifiedName("tsTypeAlias")), new Language_PS_CST_Types_Declaration.ExprString(v1.value0)), new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprIdent(Language_PS_CST_Sugar_QualifiedName.nonQualifiedName("toTsBridge")), genProxy(Language_PS_CST_Sugar_QualifiedName.qualifiedName(Language_PS_CST_Sugar_Leafs.mkModuleName(pure(v)))(v1.value0))));
        };
        if (v1 instanceof TsBridgeGen_Types.DefValue) {
            return new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprIdent(Language_PS_CST_Sugar_QualifiedName.nonQualifiedName("tsValue")), new Language_PS_CST_Types_Declaration.ExprString(v1.value0)), new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprIdent(Language_PS_CST_Sugar_QualifiedName.nonQualifiedName("toTsBridge")), new Language_PS_CST_Types_Declaration.ExprIdent(Language_PS_CST_Sugar_QualifiedName.qualifiedName(Language_PS_CST_Sugar_Leafs.mkModuleName(pure(v)))(v1.value0))));
        };
        if (v1 instanceof TsBridgeGen_Types.DefData) {
            return new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprIdent(Language_PS_CST_Sugar_QualifiedName.nonQualifiedName("tsOpaqueType")), new Language_PS_CST_Types_Declaration.ExprString(v1.value0)), new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprIdent(Language_PS_CST_Sugar_QualifiedName.nonQualifiedName("toTsBridge")), genProxy(Language_PS_CST_Sugar_QualifiedName.qualifiedName(Language_PS_CST_Sugar_Leafs.mkModuleName(pure(v)))(v1.value0))));
        };
        if (v1 instanceof TsBridgeGen_Types.DefNewtype) {
            return new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprIdent(Language_PS_CST_Sugar_QualifiedName.nonQualifiedName("tsNewtype")), new Language_PS_CST_Types_Declaration.ExprString(v1.value0)), new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprIdent(Language_PS_CST_Sugar_QualifiedName.nonQualifiedName("toTsBridge")), genProxy(Language_PS_CST_Sugar_QualifiedName.qualifiedName(Language_PS_CST_Sugar_Leafs.mkModuleName(pure(v)))(v1.value0))));
        };
        if (v1 instanceof TsBridgeGen_Types.DefUnsupportedInstAndExport) {
            return unsupported(v1.value0)(v1.value1);
        };
        if (v1 instanceof TsBridgeGen_Types.DefUnsupportedExport) {
            return unsupported(v1.value0)(v1.value1);
        };
        throw new Error("Failed pattern match at TsBridgeGen.Print (line 128, column 28 - line 166, column 62): " + [ v1.constructor.name ]);
    };
};
var genTsModuleFile = function (dictMonad) {
    var discard1 = discard(bindWriterT(dictMonad.Bind1()));
    var tell = Control_Monad_Writer_Class.tell(monadTellWriterT(dictMonad));
    var pure2 = Control_Applicative.pure(applicativeWriterT(dictMonad.Applicative0()));
    return function (v) {
        var xs = mapFlipped(v.value1)(genTsDef(v.value0));
        return discard1(tell({
            imports: Data_Set.singleton(new TsBridgeGen_Types.ImportAuto({
                from: v.value0,
                as: "Auto." + v.value0
            }))
        }))(function () {
            return pure2(new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprIdent(Language_PS_CST_Sugar_QualifiedName.nonQualifiedName("tsModuleFile")), new Language_PS_CST_Types_Declaration.ExprString(v.value0 + "/index")), new Language_PS_CST_Types_Declaration.ExprArray(xs)));
        });
    };
};
var genTsProgram$prime = function (dictMonad) {
    var Bind1 = dictMonad.Bind1();
    var bind1 = Control_Bind.bind(bindWriterT(Bind1));
    var mapFlipped1 = Data_Functor.mapFlipped(Control_Monad_Writer_Trans.functorWriterT((Bind1.Apply0()).Functor0()));
    var applicativeWriterT1 = applicativeWriterT(dictMonad.Applicative0());
    var traverse1 = traverse(applicativeWriterT1);
    var genTsModuleFile1 = genTsModuleFile(dictMonad);
    var pure2 = Control_Applicative.pure(applicativeWriterT1);
    return function (modules) {
        return bind1(mapFlipped1(traverse1(genTsModuleFile1)(modules))(Language_PS_CST_Types_Declaration.ExprArray.create))(function (ms) {
            var type_ = new Language_PS_CST_Types_Declaration.TypeConstructor(Language_PS_CST_Sugar_QualifiedName.nonQualifiedName("TsProgram"));
            var signature = new CodeSnipDecl(new Language_PS_CST_Types_Declaration.DeclSignature({
                comments: Data_Maybe.Nothing.value,
                ident: "generatedTsProgram",
                type_: type_
            }));
            var body = new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprIdent(Language_PS_CST_Sugar_QualifiedName.nonQualifiedName("tsProgram")), ms);
            var valueDef = new CodeSnipDecl(new Language_PS_CST_Types_Declaration.DeclValue({
                comments: Data_Maybe.Nothing.value,
                valueBindingFields: {
                    name: "generatedTsProgram",
                    binders: [  ],
                    guarded: new Language_PS_CST_Types_Declaration.Unconditional({
                        expr: body,
                        whereBindings: [  ]
                    })
                }
            }));
            return pure2([ signature, valueDef ]);
        });
    };
};
var genTsProgram = function (dictMonad) {
    var $124 = Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(((dictMonad.Bind1()).Apply0()).Functor0()))(printPursSnippets);
    var $125 = genTsProgram$prime(dictMonad);
    return function ($126) {
        return $124($125($126));
    };
};
var genInstances = function (dictMonad) {
    var applicativeWriterT1 = applicativeWriterT(dictMonad.Applicative0());
    var sequence1 = sequence(applicativeWriterT1);
    var discard1 = discard(bindWriterT(dictMonad.Bind1()));
    var tell = Control_Monad_Writer_Class.tell(monadTellWriterT(dictMonad));
    var pure2 = Control_Applicative.pure(applicativeWriterT1);
    return function (modules) {
        return sequence1(bind(modules)(function (v) {
            return bind(v.value1)(function (pursDef) {
                if (pursDef instanceof TsBridgeGen_Types.DefData) {
                    return pure1(discard1(tell({
                        imports: Data_Set.singleton(new TsBridgeGen_Types.ImportAuto({
                            from: v.value0,
                            as: "Auto." + v.value0
                        }))
                    }))(function () {
                        return pure2(new CodeSnipDecl(genTsBridgeInstance(v.value0)(pursDef.value0)(new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprApp(new Language_PS_CST_Types_Declaration.ExprIdent(Language_PS_CST_Sugar_QualifiedName.nonQualifiedName("tsOpaqueType")), new Language_PS_CST_Types_Declaration.ExprString(v.value0)), new Language_PS_CST_Types_Declaration.ExprString(pursDef.value0)))));
                    }));
                };
                if (pursDef instanceof TsBridgeGen_Types.DefType) {
                    return [  ];
                };
                if (pursDef instanceof TsBridgeGen_Types.DefValue) {
                    return [  ];
                };
                if (pursDef instanceof TsBridgeGen_Types.DefUnsupportedInstAndExport) {
                    return [ pure2(new CodeSnipComments([ "`" + (pursDef.value0 + ("` is unsupported: " + pursDef.value1)) ])) ];
                };
                if (pursDef instanceof TsBridgeGen_Types.DefUnsupportedExport) {
                    return [  ];
                };
                if (pursDef instanceof TsBridgeGen_Types.DefNewtype) {
                    return [  ];
                };
                throw new Error("Failed pattern match at TsBridgeGen.Print (line 37, column 3 - line 62, column 9): " + [ pursDef.constructor.name ]);
            });
        }));
    };
};
export {
    CodeSnipDecl,
    CodeSnipComments,
    runImportWriterM,
    runImportWriterT,
    genInstances,
    genTsProgram,
    genTsProgram$prime,
    genTsModuleFile,
    genTsDef,
    unsupported,
    genProxy,
    printPursSnippets,
    printImports,
    printImport,
    instName,
    genTsBridgeInstance
};
