{"comments":null,"declarations":[{"children":[],"comments":"Attempt to get the value for a given key on an `Object Json`.\n\nUse this accessor if the key and value *must* be present in your object.\nIf the key and value are optional, use `getFieldOptional'` (`.:?`) instead.\n","info":{"declType":"value","type":{"annotation":[],"contents":["a",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Argonaut","Decode","Class"],"DecodeJson"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Foreign","Object"],"Object"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Decode","Error"],"JsonDecodeError"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[26,91],"name":".spago/argonaut-codecs/v9.1.0/src/Data/Argonaut/Decode/Combinators.purs","start":[26,1]},"title":"getField"},{"children":[],"comments":"Attempt to get the value for a given key on an `Object Json`.\n\nThe result will be `Right Nothing` if the key and value are not present,\nbut will fail if the key is present but the value cannot be converted to the right type.\n\nThis function will treat `null` as a value and attempt to decode it into your desired type.\nIf you would like to treat `null` values the same as absent values, use\n`getFieldOptional'` (`.:?`) instead.\n","info":{"declType":"value","type":{"annotation":[],"contents":["a",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Argonaut","Decode","Class"],"DecodeJson"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Foreign","Object"],"Object"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Decode","Error"],"JsonDecodeError"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[51,107],"name":".spago/argonaut-codecs/v9.1.0/src/Data/Argonaut/Decode/Combinators.purs","start":[51,1]},"title":"getFieldOptional"},{"children":[],"comments":"Attempt to get the value for a given key on an `Object Json`.\n\nThe result will be `Right Nothing` if the key and value are not present,\nor if the key is present and the value is `null`.\n\nUse this accessor if the key and value are optional in your object.\nIf the key and value are mandatory, use `getField` (`.:`) instead.\n","info":{"declType":"value","type":{"annotation":[],"contents":["a",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"a","tag":"TypeVar"}],"constraintClass":[["Data","Argonaut","Decode","Class"],"DecodeJson"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[["Foreign","Object"],"Object"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Core"],"Json"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Decode","Error"],"JsonDecodeError"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[38,108],"name":".spago/argonaut-codecs/v9.1.0/src/Data/Argonaut/Decode/Combinators.purs","start":[38,1]},"title":"getFieldOptional'"},{"children":[],"comments":"Helper for use in combination with `.:?` to provide default values for optional\n`Object Json` fields.\n\nExample usage:\n```purs\nnewtype MyType = MyType\n  { foo :: String\n  , bar :: Maybe Int\n  , baz :: Boolean\n  }\n\ninstance decodeJsonMyType :: DecodeJson MyType where\n  decodeJson json = do\n    x <- decodeJson json\n    foo <- x .: \"foo\" -- mandatory field\n    bar <- x .:? \"bar\" -- optional field\n    baz <- x .:? \"baz\" .!= false -- optional field with default value of `false`\n    pure $ MyType { foo, bar, baz }\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":["a",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Decode","Error"],"JsonDecodeError"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Maybe"],"Maybe"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Data","Either"],"Either"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Argonaut","Decode","Error"],"JsonDecodeError"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[75,92],"name":".spago/argonaut-codecs/v9.1.0/src/Data/Argonaut/Decode/Combinators.purs","start":[75,1]},"title":"defaultField"},{"children":[],"comments":null,"info":{"alias":[["Data","Argonaut","Decode","Combinators"],{"Right":{"Left":{"Ident":"getField"}}}],"declType":"alias","fixity":{"associativity":"infix","precedence":7}},"kind":null,"sourceSpan":{"end":[29,23],"name":".spago/argonaut-codecs/v9.1.0/src/Data/Argonaut/Decode/Combinators.purs","start":[29,1]},"title":"(.:)"},{"children":[],"comments":null,"info":{"alias":[["Data","Argonaut","Decode","Combinators"],{"Right":{"Left":{"Ident":"getFieldOptional"}}}],"declType":"alias","fixity":{"associativity":"infix","precedence":7}},"kind":null,"sourceSpan":{"end":[54,32],"name":".spago/argonaut-codecs/v9.1.0/src/Data/Argonaut/Decode/Combinators.purs","start":[54,1]},"title":"(.:!)"},{"children":[],"comments":null,"info":{"alias":[["Data","Argonaut","Decode","Combinators"],{"Right":{"Left":{"Ident":"getFieldOptional'"}}}],"declType":"alias","fixity":{"associativity":"infix","precedence":7}},"kind":null,"sourceSpan":{"end":[41,33],"name":".spago/argonaut-codecs/v9.1.0/src/Data/Argonaut/Decode/Combinators.purs","start":[41,1]},"title":"(.:?)"},{"children":[],"comments":null,"info":{"alias":[["Data","Argonaut","Decode","Combinators"],{"Right":{"Left":{"Ident":"defaultField"}}}],"declType":"alias","fixity":{"associativity":"infix","precedence":6}},"kind":null,"sourceSpan":{"end":[78,28],"name":".spago/argonaut-codecs/v9.1.0/src/Data/Argonaut/Decode/Combinators.purs","start":[78,1]},"title":"(.!=)"}],"name":"Data.Argonaut.Decode.Combinators","reExports":[]}