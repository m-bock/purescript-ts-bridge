{"comments":null,"declarations":[{"children":[{"comments":null,"info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim","TypeError"],"Text"],"tag":"TypeConstructor"},{"annotation":[],"contents":"Debug function usage","tag":"TypeLevelString"}],"tag":"TypeApp"}],"constraintClass":[["Prim","TypeError"],"Warn"],"constraintData":null,"constraintKindArgs":[]}],"type":{"annotation":[],"contents":[["Debug"],"DebugWarning"],"tag":"TypeConstructor"}},"sourceSpan":{"end":[19,68],"name":".spago/debug/v6.0.0/src/Debug.purs","start":[19,1]},"title":"warn"}],"comments":"Nullary class used to raise a custom warning for the debug functions.\n","info":{"arguments":[],"declType":"typeClass","fundeps":[],"superclasses":[]},"kind":null,"sourceSpan":{"end":[17,19],"name":".spago/debug/v6.0.0/src/Debug.purs","start":[17,1]},"title":"DebugWarning"},{"children":[],"comments":"Log any PureScript value to the console for debugging purposes and then\nreturn a value. This will log the value's underlying representation for\nlow-level debugging, so it may be desireable to `show` the value first.\n\nThe return value is thunked so it is not evaluated until after the\nmessage has been printed, to preserve a predictable console output.\n\nFor example:\n``` purescript\ndoSomething = trace \"Hello\" \\_ -> ... some value or computation ...\n```\n","info":{"declType":"value","type":{"annotation":[],"contents":["a",{"annotation":[],"contents":["b",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[],"constraintClass":[["Debug"],"DebugWarning"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[32,59],"name":".spago/debug/v6.0.0/src/Debug.purs","start":[32,1]},"title":"trace"},{"children":[],"comments":"Log any PureScript value to the console and return the unit value of the\nMonad `m`.\n","info":{"declType":"value","type":{"annotation":[],"contents":["m",{"annotation":[],"contents":["a",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[],"constraintClass":[["Debug"],"DebugWarning"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[{"annotation":[],"contents":"m","tag":"TypeVar"}],"constraintClass":[["Control","Monad"],"Monad"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":"m","tag":"TypeVar"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"}],"tag":"ConstrainedType"},null],"tag":"ForAll"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[39,61],"name":".spago/debug/v6.0.0/src/Debug.purs","start":[39,1]},"title":"traceM"},{"children":[],"comments":"Measures the time it takes the given function to run and prints it out,\nthen returns the function's result. This is handy for diagnosing\nperformance problems by wrapping suspected parts of the code in\n`traceTime`.\n\nFor example:\n```purescript\nbunchOfThings =\n  [ traceTime \"one\" \\_ -> one x y\n  , traceTime \"two\" \\_ -> two z\n  , traceTime \"three\" \\_ -> three a b c\n  ]\n```\n\nConsole output would look something like this:\n```\none took 3.456ms\ntwo took 562.0023ms\nthree took 42.0111ms\n```\n\nNote that the timing precision may differ depending on whether the\nPerformance API is supported. Where supported (on most modern browsers and\nversions of Node), the Performance API offers timing resolution of 5\nmicroseconds. Where Performance API is not supported, this function will\nfall back on standard JavaScript Date object, which only offers a\n1-millisecond resolution.\n","info":{"declType":"value","type":{"annotation":[],"contents":["a",{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[71,50],"name":".spago/debug/v6.0.0/src/Debug.purs","start":[71,1]},"title":"traceTime"},{"children":[],"comments":"Logs any value and returns it, using a \"tag\" or key value to annotate the\ntraced value. Useful when debugging something in the middle of a\nexpression, as you can insert this into the expression without having to\nbreak it up.\n","info":{"declType":"value","type":{"annotation":[],"contents":["a",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[],"constraintClass":[["Debug"],"DebugWarning"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[80,50],"name":".spago/debug/v6.0.0/src/Debug.purs","start":[80,1]},"title":"spy"},{"children":[],"comments":"Similar to `spy`, but allows a function to be passed in to alter the value\nthat will be printed. Useful in cases where the raw printed form of a value\nis inconvenient to read - for example, when spying on a `Set`, passing\n`Array.fromFoldable` here will print it in a more useful form.\n","info":{"declType":"value","type":{"annotation":[],"contents":["a",{"annotation":[],"contents":["b",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[],"constraintClass":[["Debug"],"DebugWarning"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Prim"],"String"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"b","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[89,57],"name":".spago/debug/v6.0.0/src/Debug.purs","start":[89,1]},"title":"spyWith"},{"children":[],"comments":"Triggers any available debugging features in the current runtime - in a\nweb browser with the debug tools open, this acts like setting a breakpoint\nin the script. If no debugging feature are available nothing will occur,\nalthough the passed contination will still be evaluated.\n\nGenerally this works best by passing in a block of code to debug as the\ncontinuation argument, as stepping forward in the debugger will then drop\nstraight into the passed code block.\n","info":{"declType":"value","type":{"annotation":[],"contents":["a",{"annotation":[],"contents":[{"constraintAnn":[],"constraintArgs":[],"constraintClass":[["Debug"],"DebugWarning"],"constraintData":null,"constraintKindArgs":[]},{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":{"annotation":[],"contents":[{"annotation":[],"contents":[{"annotation":[],"contents":[["Prim"],"Function"],"tag":"TypeConstructor"},{"annotation":[],"contents":[["Data","Unit"],"Unit"],"tag":"TypeConstructor"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"},"tag":"ParensInType"}],"tag":"TypeApp"},{"annotation":[],"contents":"a","tag":"TypeVar"}],"tag":"TypeApp"}],"tag":"ConstrainedType"},null],"tag":"ForAll"}},"kind":null,"sourceSpan":{"end":[100,54],"name":".spago/debug/v6.0.0/src/Debug.purs","start":[100,1]},"title":"debugger"}],"name":"Debug","reExports":[]}