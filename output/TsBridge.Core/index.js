// Generated by purs version 0.15.4
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Writer_Class from "../Control.Monad.Writer.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Newtype from "../Data.Newtype/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_Set_Ordered from "../Data.Set.Ordered/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Symbol from "../Data.Symbol/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Typelevel_Undefined from "../Data.Typelevel.Undefined/index.js";
import * as Data_Unfoldable from "../Data.Unfoldable/index.js";
import * as Heterogeneous_Mapping from "../Heterogeneous.Mapping/index.js";
import * as Record from "../Record/index.js";
import * as Safe_Coerce from "../Safe.Coerce/index.js";
import * as TsBridge_DTS from "../TsBridge.DTS/index.js";
import * as TsBridge_Monad from "../TsBridge.Monad/index.js";
import * as TsBridge_Print from "../TsBridge.Print/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var pure = /* #__PURE__ */ Control_Applicative.pure(TsBridge_Monad.applicativeTsBridgeM);
var bind = /* #__PURE__ */ Control_Bind.bind(TsBridge_Monad.bindTsBridgeM);
var wrap = /* #__PURE__ */ Data_Newtype.wrap();
var monoidTsBridge_Monad_Wrap = /* #__PURE__ */ TsBridge_Monad.monoidTsBridge_Monad_Wrap(TsBridge_DTS.eqTsName);
var mempty = /* #__PURE__ */ Data_Monoid.mempty(monoidTsBridge_Monad_Wrap);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(TsBridge_Monad.bindTsBridgeM);
var tell = /* #__PURE__ */ Control_Monad_Writer_Class.tell(TsBridge_Monad.monadTellTsBridgeAccumTsB);
var over = /* #__PURE__ */ Data_Newtype.over()();
var map = /* #__PURE__ */ Data_Functor.map(TsBridge_Monad.functorTsBridgeM);
var coerce = /* #__PURE__ */ Safe_Coerce.coerce();
var listens = /* #__PURE__ */ Control_Monad_Writer_Class.listens(TsBridge_Monad.monadWriterTsBridgeAccumT);
var un = /* #__PURE__ */ Data_Newtype.un();
var join = /* #__PURE__ */ Control_Bind.join(Control_Bind.bindArray);
var sequence = /* #__PURE__ */ Data_Traversable.sequence(Data_Traversable.traversableArray)(TsBridge_Monad.applicativeTsBridgeM);
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showInt);
var toUnfoldable = /* #__PURE__ */ Data_Set_Ordered.toUnfoldable(Data_Unfoldable.unfoldableArray);
var union = /* #__PURE__ */ Data_Set.union(TsBridge_DTS.ordTsImport);
var nub = /* #__PURE__ */ Data_Array.nub(TsBridge_DTS.ordTsDeclaration);
var fromFoldableWith = /* #__PURE__ */ Data_Map_Internal.fromFoldableWith(TsBridge_DTS.ordTsFilePath)(Data_Foldable.foldableArray);
var mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(Data_Functor.functorArray);
var append2 = /* #__PURE__ */ Data_Semigroup.append(/* #__PURE__ */ TsBridge_Monad.semigroupTsBridge_Monad_W(TsBridge_DTS.eqTsName));
var union1 = /* #__PURE__ */ Record.union();
var monoidRecord = /* #__PURE__ */ Data_Monoid.monoidRecord();
var mempty1 = /* #__PURE__ */ Data_Monoid.mempty(/* #__PURE__ */ monoidRecord(/* #__PURE__ */ Data_Monoid.monoidRecordCons({
    reflectSymbol: function () {
        return "scope";
    }
})(/* #__PURE__ */ monoidRecord(/* #__PURE__ */ Data_Monoid.monoidRecordCons({
    reflectSymbol: function () {
        return "fixed";
    }
})(monoidTsBridge_Monad_Wrap)()(/* #__PURE__ */ Data_Monoid.monoidRecordCons({
    reflectSymbol: function () {
        return "floating";
    }
})(monoidTsBridge_Monad_Wrap)()(Data_Monoid.monoidRecordNil))))()(Data_Monoid.monoidRecordNil)));
var fromFoldable = /* #__PURE__ */ Data_Set_Ordered.fromFoldable(Data_Foldable.foldableArray);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var censor = /* #__PURE__ */ Control_Monad_Writer_Class.censor(TsBridge_Monad.monadWriterTsBridgeAccumT);
var apply = /* #__PURE__ */ Control_Apply.apply(TsBridge_Monad.applyTsBridgeM);
var over2 = /* #__PURE__ */ Data_Newtype.over2()();
var intersect = /* #__PURE__ */ Data_Set_Ordered.intersect(TsBridge_DTS.eqTsName);
var notElem = /* #__PURE__ */ Data_Foldable.notElem(Data_Set_Ordered.foldableOSet)(TsBridge_DTS.eqTsName);
var unwrap = /* #__PURE__ */ Data_Newtype.unwrap();
var listen = /* #__PURE__ */ Control_Monad_Writer_Class.listen(TsBridge_Monad.monadWriterTsBridgeAccumT);
var genRecordNil = {
    genRecord: function (v) {
        return function (v1) {
            return pure([  ]);
        };
    }
};
var tsValue = function (dictMapping) {
    var mapping = Heterogeneous_Mapping.mapping(dictMapping);
    return function (mp) {
        return function (n) {
            return function (x) {
                return bind(mapping(mp)(x))(function (t) {
                    return pure([ new TsBridge_DTS.TsDeclValueDef(new TsBridge_DTS.TsName(n), TsBridge_DTS.Public.value, t) ]);
                });
            };
        };
    };
};
var tsTypeVar = function (x) {
    var tsName = new TsBridge_DTS.TsName(x);
    var scope = {
        floating: wrap(Data_Set_Ordered.singleton(tsName)),
        fixed: mempty
    };
    return discard(tell(over(TsBridge_Monad.TsBridgeAccum)(function (v) {
        return {
            scope: scope,
            imports: v.imports,
            typeDefs: v.typeDefs
        };
    })(TsBridge_Monad.defaultTsBridgeAccum)))(function () {
        return pure(new TsBridge_DTS.TsTypeVar(tsName));
    });
};
var tsTypeAlias = function (dictMapping) {
    var mapping = Heterogeneous_Mapping.mapping(dictMapping);
    return function (mp) {
        return function (n) {
            return function (x) {
                var t = mapping(mp)(x);
                return map(function (v) {
                    return [ new TsBridge_DTS.TsDeclTypeDef(new TsBridge_DTS.TsName(n), TsBridge_DTS.Public.value, coerce(v.value1.floating), v.value0) ];
                })(listens((function () {
                    var $190 = un(TsBridge_Monad.TsBridgeAccum);
                    return function ($191) {
                        return (function (v) {
                            return v.scope;
                        })($190($191));
                    };
                })())(t));
            };
        };
    };
};
var tsNewtype = Data_Typelevel_Undefined["undefined"];
var tsModuleFile = function (n) {
    return function (xs) {
        var v = TsBridge_Monad.runTsBridgeM(map(join)(sequence(xs)));
        return append(v.value1.typeDefs)([ new TsBridge_DTS.TsModuleFile(TsBridge_DTS.dtsFilePath(n), new TsBridge_DTS.TsModule(v.value1.imports, v.value0)) ]);
    };
};
var mkOpaqueTypeDecl = function (name) {
    return function (args) {
        var opaqueField = new TsBridge_DTS.TsRecordField(new TsBridge_DTS.TsName("opaque_" + TsBridge_Print.printTsName(name)), {
            optional: false,
            readonly: true
        }, TsBridge_DTS.TsTypeUniqueSymbol.value);
        var mkArgFields = function (idx) {
            return function (name$prime) {
                return new TsBridge_DTS.TsRecordField(new TsBridge_DTS.TsName("arg" + show(idx)), {
                    optional: false,
                    readonly: true
                }, new TsBridge_DTS.TsTypeVar(name$prime));
            };
        };
        return new TsBridge_DTS.TsDeclTypeDef(name, TsBridge_DTS.Public.value, coerce(args), new TsBridge_DTS.TsTypeRecord(Data_Array.cons(opaqueField)(Data_Array.mapWithIndex(mkArgFields)(toUnfoldable(args)))));
    };
};
var mergeModule = function (v) {
    return function (v1) {
        return new TsBridge_DTS.TsModule(union(v.value0)(v1.value0), nub(append(v.value1)(v1.value1)));
    };
};
var mergeModules = function (xs) {
    return new TsBridge_DTS.TsProgram(fromFoldableWith(mergeModule)(mapFlipped(xs)(function (v) {
        return new Data_Tuple.Tuple(v.value0, v.value1);
    })));
};
var tsProgram = function (xs) {
    return mergeModules(join(xs));
};
var genRecord = function (dict) {
    return dict.genRecord;
};
var genRecordCons = function (dictMapping) {
    var mapping = Heterogeneous_Mapping.mapping(dictMapping);
    return function (dictGenRecord) {
        var genRecord1 = genRecord(dictGenRecord);
        return function (dictIsSymbol) {
            var reflectSymbol = Data_Symbol.reflectSymbol(dictIsSymbol);
            return {
                genRecord: function (mp) {
                    return function (v) {
                        var str = reflectSymbol(Type_Proxy["Proxy"].value);
                        var mkXs = genRecord1(mp)(Type_Proxy["Proxy"].value);
                        var mkX = mapping(mp)(Type_Proxy["Proxy"].value);
                        return bind(mkX)(function (x) {
                            return bind(mkXs)(function (xs) {
                                var k = new TsBridge_DTS.TsName(str);
                                return pure(Data_Array.cons(new TsBridge_DTS.TsRecordField(k, {
                                    optional: false,
                                    readonly: true
                                }, x))(xs));
                            });
                        });
                    };
                }
            };
        };
    };
};
var fixScope = function (v) {
    return {
        floating: mempty,
        fixed: append2(v.fixed)(v.floating)
    };
};
var filePathToModulePath = function (v) {
    return new TsBridge_DTS.TsModulePath(v.value0);
};
var opaqueType = function (filePath) {
    return function (moduleAlias) {
        return function (name) {
            return function (targs) {
                return function (args$prime) {
                    return bind(sequence(args$prime))(function (args) {
                        var typeDefs = [ new TsBridge_DTS.TsModuleFile(filePath, new TsBridge_DTS.TsModule(Data_Set.empty, [ mkOpaqueTypeDecl(name)(targs) ])) ];
                        var imports = Data_Set.singleton(new TsBridge_DTS.TsImport(moduleAlias, filePathToModulePath(filePath)));
                        return discard(tell(union1(mempty1)({
                            typeDefs: typeDefs,
                            imports: imports
                        })))(function () {
                            return pure(new TsBridge_DTS.TsTypeConstructor(new TsBridge_DTS.TsQualName(new Data_Maybe.Just(moduleAlias), name), args));
                        });
                    });
                };
            };
        };
    };
};
var dotsToLodashes = /* #__PURE__ */ Data_String_Common.replaceAll(".")("_");
var tsOpaqueTypeImpl = function (pursModuleName) {
    return function (pursTypeName) {
        return function (targs) {
            return opaqueType(new TsBridge_DTS.TsFilePath(pursModuleName + "/index", "d.ts"))(dotsToLodashes(pursModuleName))(new TsBridge_DTS.TsName(pursTypeName))(fromFoldable(map1(TsBridge_DTS.TsName.create)(targs)));
        };
    };
};
var tsOpaqueType = function (pursModuleName) {
    return function (pursTypeName) {
        return function (v) {
            return tsOpaqueTypeImpl(pursModuleName)(pursTypeName)([  ])([  ]);
        };
    };
};
var tsOpaqueType1 = function (dictMapping) {
    var mapping = Heterogeneous_Mapping.mapping(dictMapping);
    return function (mp) {
        return function (pursModuleName) {
            return function (pursTypeName) {
                return function (a) {
                    return function (v) {
                        return tsOpaqueTypeImpl(pursModuleName)(pursTypeName)([ a ])([ mapping(mp)(Type_Proxy["Proxy"].value) ]);
                    };
                };
            };
        };
    };
};
var tsOpaqueType2 = function (dictMapping) {
    var mapping = Heterogeneous_Mapping.mapping(dictMapping);
    return function (dictMapping1) {
        var mapping1 = Heterogeneous_Mapping.mapping(dictMapping1);
        return function (mp) {
            return function (pursModuleName) {
                return function (pursTypeName) {
                    return function (a1) {
                        return function (a2) {
                            return function (v) {
                                return tsOpaqueTypeImpl(pursModuleName)(pursTypeName)([ a1, a2 ])([ mapping(mp)(Type_Proxy["Proxy"].value), mapping1(mp)(Type_Proxy["Proxy"].value) ]);
                            };
                        };
                    };
                };
            };
        };
    };
};
var tsOpaqueType3 = function (dictMapping) {
    var mapping = Heterogeneous_Mapping.mapping(dictMapping);
    return function (dictMapping1) {
        var mapping1 = Heterogeneous_Mapping.mapping(dictMapping1);
        return function (dictMapping2) {
            var mapping2 = Heterogeneous_Mapping.mapping(dictMapping2);
            return function (mp) {
                return function (pursModuleName) {
                    return function (pursTypeName) {
                        return function (a1) {
                            return function (a2) {
                                return function (a3) {
                                    return function (v) {
                                        return tsOpaqueTypeImpl(pursModuleName)(pursTypeName)([ a1, a2, a3 ])([ mapping(mp)(Type_Proxy["Proxy"].value), mapping1(mp)(Type_Proxy["Proxy"].value), mapping2(mp)(Type_Proxy["Proxy"].value) ]);
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var tsOpaqueType4 = function (dictMapping) {
    var mapping = Heterogeneous_Mapping.mapping(dictMapping);
    return function (dictMapping1) {
        var mapping1 = Heterogeneous_Mapping.mapping(dictMapping1);
        return function (dictMapping2) {
            var mapping2 = Heterogeneous_Mapping.mapping(dictMapping2);
            return function (dictMapping3) {
                var mapping3 = Heterogeneous_Mapping.mapping(dictMapping3);
                return function (mp) {
                    return function (pursModuleName) {
                        return function (pursTypeName) {
                            return function (a1) {
                                return function (a2) {
                                    return function (a3) {
                                        return function (a4) {
                                            return function (v) {
                                                return tsOpaqueTypeImpl(pursModuleName)(pursTypeName)([ a1, a2, a3, a4 ])([ mapping(mp)(Type_Proxy["Proxy"].value), mapping1(mp)(Type_Proxy["Proxy"].value), mapping2(mp)(Type_Proxy["Proxy"].value), mapping3(mp)(Type_Proxy["Proxy"].value) ]);
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var tsOpaqueType5 = function (dictMapping) {
    var mapping = Heterogeneous_Mapping.mapping(dictMapping);
    return function (dictMapping1) {
        var mapping1 = Heterogeneous_Mapping.mapping(dictMapping1);
        return function (dictMapping2) {
            var mapping2 = Heterogeneous_Mapping.mapping(dictMapping2);
            return function (dictMapping3) {
                var mapping3 = Heterogeneous_Mapping.mapping(dictMapping3);
                return function (dictMapping4) {
                    var mapping4 = Heterogeneous_Mapping.mapping(dictMapping4);
                    return function (mp) {
                        return function (pursModuleName) {
                            return function (pursTypeName) {
                                return function (a1) {
                                    return function (a2) {
                                        return function (a3) {
                                            return function (a4) {
                                                return function (a5) {
                                                    return function (v) {
                                                        return tsOpaqueTypeImpl(pursModuleName)(pursTypeName)([ a1, a2, a3, a4, a5 ])([ mapping(mp)(Type_Proxy["Proxy"].value), mapping1(mp)(Type_Proxy["Proxy"].value), mapping2(mp)(Type_Proxy["Proxy"].value), mapping3(mp)(Type_Proxy["Proxy"].value), mapping4(mp)(Type_Proxy["Proxy"].value) ]);
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var tsOpaqueType6 = function (dictMapping) {
    var mapping = Heterogeneous_Mapping.mapping(dictMapping);
    return function (dictMapping1) {
        var mapping1 = Heterogeneous_Mapping.mapping(dictMapping1);
        return function (dictMapping2) {
            var mapping2 = Heterogeneous_Mapping.mapping(dictMapping2);
            return function (dictMapping3) {
                var mapping3 = Heterogeneous_Mapping.mapping(dictMapping3);
                return function (dictMapping4) {
                    var mapping4 = Heterogeneous_Mapping.mapping(dictMapping4);
                    return function (dictMapping5) {
                        var mapping5 = Heterogeneous_Mapping.mapping(dictMapping5);
                        return function (mp) {
                            return function (pursModuleName) {
                                return function (pursTypeName) {
                                    return function (a1) {
                                        return function (a2) {
                                            return function (a3) {
                                                return function (a4) {
                                                    return function (a5) {
                                                        return function (a6) {
                                                            return function (v) {
                                                                return tsOpaqueTypeImpl(pursModuleName)(pursTypeName)([ a1, a2, a3, a4, a5, a6 ])([ mapping(mp)(Type_Proxy["Proxy"].value), mapping1(mp)(Type_Proxy["Proxy"].value), mapping2(mp)(Type_Proxy["Proxy"].value), mapping3(mp)(Type_Proxy["Proxy"].value), mapping4(mp)(Type_Proxy["Proxy"].value), mapping5(mp)(Type_Proxy["Proxy"].value) ]);
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var defaultUnit = function (v) {
    return pure(TsBridge_DTS.TsTypeVoid.value);
};
var defaultString = function (v) {
    return pure(TsBridge_DTS.TsTypeString.value);
};
var defaultRecord = function (dictGenRecord) {
    var genRecord1 = genRecord(dictGenRecord);
    return function () {
        return function (mp) {
            return function (v) {
                return map(TsBridge_DTS.TsTypeRecord.create)(genRecord1(mp)(Type_Proxy["Proxy"].value));
            };
        };
    };
};
var defaultProxy = function (dictMapping) {
    var mapping = Heterogeneous_Mapping.mapping(dictMapping);
    return function (mp) {
        return function (v) {
            return mapping(mp)(Data_Typelevel_Undefined["undefined"]);
        };
    };
};
var defaultNumber = function (v) {
    return pure(TsBridge_DTS.TsTypeNumber.value);
};
var defaultFunction = function (dictMapping) {
    var mapping = Heterogeneous_Mapping.mapping(dictMapping);
    return function (dictMapping1) {
        var mapping1 = Heterogeneous_Mapping.mapping(dictMapping1);
        return function (f) {
            return function (v) {
                var mapAccum = over(TsBridge_Monad.TsBridgeAccum)(function (x) {
                    return {
                        scope: fixScope(x.scope),
                        imports: x.imports,
                        typeDefs: x.typeDefs
                    };
                });
                return censor(mapAccum)(apply(map(function (v1) {
                    return function (v2) {
                        var newFixed = append2(over2(wrap)(intersect)(v1.value1.scope.fixed)(v2.value1.scope.fixed))(append2(v1.value1.scope.floating)(v2.value1.scope.floating));
                        var removeQuant = TsBridge_DTS.mapQuantifier(Data_Set_Ordered.filter(function (v3) {
                            return notElem(v3)(unwrap(newFixed));
                        }));
                        return new TsBridge_DTS.TsTypeFunction(coerce(newFixed), [ new TsBridge_DTS.TsFnArg(new TsBridge_DTS.TsName("_"), removeQuant(v1.value0)) ], removeQuant(v2.value0));
                    };
                })(listen(mapping(f)(Type_Proxy["Proxy"].value))))(listen(mapping1(f)(Type_Proxy["Proxy"].value))));
            };
        };
    };
};
var defaultEffect = function (dictMapping) {
    var mapping = Heterogeneous_Mapping.mapping(dictMapping);
    return function (f) {
        return function (v) {
            return bind(mapping(f)(Type_Proxy["Proxy"].value))(function (x) {
                return pure(new TsBridge_DTS.TsTypeFunction(coerce(Data_Set_Ordered.singleton(new TsBridge_DTS.TsName("A"))), [  ], x));
            });
        };
    };
};
var defaultBoolean = function (v) {
    return pure(TsBridge_DTS.TsTypeBoolean.value);
};
var defaultArray = function (dictMapping) {
    var mapping = Heterogeneous_Mapping.mapping(dictMapping);
    return function (f) {
        return function (v) {
            return map(TsBridge_DTS.TsTypeArray.create)(mapping(f)(Type_Proxy["Proxy"].value));
        };
    };
};
export {
    defaultArray,
    defaultBoolean,
    defaultEffect,
    defaultFunction,
    defaultNumber,
    defaultProxy,
    defaultRecord,
    defaultString,
    defaultUnit,
    genRecord,
    tsModuleFile,
    tsNewtype,
    tsOpaqueType,
    tsOpaqueType1,
    tsOpaqueType2,
    tsOpaqueType3,
    tsOpaqueType4,
    tsOpaqueType5,
    tsOpaqueType6,
    tsProgram,
    tsTypeAlias,
    tsTypeVar,
    tsValue,
    genRecordNil,
    genRecordCons
};
