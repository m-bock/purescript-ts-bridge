// Generated by purs version 0.15.4
import * as $foreign from "./foreign.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Semigroupoid from "../Control.Semigroupoid/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Function_Uncurried from "../Data.Function.Uncurried/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Symbol from "../Data.Symbol/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Record from "../Record/index.js";
import * as Record_Builder from "../Record.Builder/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var identity = /* #__PURE__ */ Control_Category.identity(Record_Builder.categoryBuilder);
var insert = /* #__PURE__ */ Record_Builder.insert()();
var compose = /* #__PURE__ */ Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder);
var flap = /* #__PURE__ */ Data_Functor.flap(Data_Functor.functorFn);
var mempty = /* #__PURE__ */ Data_Monoid.mempty(Data_List_Types.monoidList);
var fromFoldable = /* #__PURE__ */ Data_Array.fromFoldable(Data_List_Types.foldableList);
var zipRecordNil = {
    zipRecordImpl: function (v) {
        return function (v1) {
            return function (v2) {
                return function (v3) {
                    return identity;
                };
            };
        };
    }
};
var zipRecordImpl = function (dict) {
    return dict.zipRecordImpl;
};
var zipRecordCons = function (dictIsSymbol) {
    var get = Record.get(dictIsSymbol)();
    var insert1 = insert(dictIsSymbol);
    return function () {
        return function () {
            return function () {
                return function () {
                    return function (dictZipRecord) {
                        var zipRecordImpl1 = zipRecordImpl(dictZipRecord);
                        return {
                            zipRecordImpl: function (v) {
                                return function (ra) {
                                    return function (v1) {
                                        return function (rb) {
                                            var tail = zipRecordImpl1(Type_Proxy["Proxy"].value)(ra)(Type_Proxy["Proxy"].value)(rb);
                                            var head = new Data_Tuple.Tuple(get(Type_Proxy["Proxy"].value)(ra), get(Type_Proxy["Proxy"].value)(rb));
                                            var first = insert1(Type_Proxy["Proxy"].value)(head);
                                            return compose(first)(tail);
                                        };
                                    };
                                };
                            }
                        };
                    };
                };
            };
        };
    };
};
var zipRecord = function () {
    return function () {
        return function (dictZipRecord) {
            var zipRecordImpl1 = zipRecordImpl(dictZipRecord);
            return function (ra) {
                return function (rb) {
                    var builder = zipRecordImpl1(Type_Proxy["Proxy"].value)(ra)(Type_Proxy["Proxy"].value)(rb);
                    return Record_Builder.build(builder)({});
                };
            };
        };
    };
};
var slToRlSNil = {};
var slToRlSCons = function () {
    return {};
};
var sequenceRecordSingle = function (dictIsSymbol) {
    var get = Record.get(dictIsSymbol)();
    var insert1 = insert(dictIsSymbol);
    return function () {
        return function (dictFunctor) {
            var map = Data_Functor.map(dictFunctor);
            return function () {
                return function () {
                    return {
                        sequenceRecordImpl: function (v) {
                            return function (a) {
                                var valA = get(Type_Proxy["Proxy"].value)(a);
                                return map(insert1(Type_Proxy["Proxy"].value))(valA);
                            };
                        },
                        Functor0: function () {
                            return dictFunctor;
                        }
                    };
                };
            };
        };
    };
};
var sequenceRecordNil = function (dictApplicative) {
    var pure = Control_Applicative.pure(dictApplicative);
    var Functor0 = (dictApplicative.Apply0()).Functor0();
    return {
        sequenceRecordImpl: function (v) {
            return function (v1) {
                return pure(identity);
            };
        },
        Functor0: function () {
            return Functor0;
        }
    };
};
var sequenceRecordImpl = function (dict) {
    return dict.sequenceRecordImpl;
};
var sequenceRecordCons = function (dictIsSymbol) {
    var get = Record.get(dictIsSymbol)();
    var insert1 = insert(dictIsSymbol);
    return function () {
        return function (dictApply) {
            var apply = Control_Apply.apply(dictApply);
            var Functor0 = dictApply.Functor0();
            var map = Data_Functor.map(Functor0);
            return function (dictSequenceRecord) {
                var sequenceRecordImpl1 = sequenceRecordImpl(dictSequenceRecord);
                return function () {
                    return function () {
                        return {
                            sequenceRecordImpl: function (v) {
                                return function (a) {
                                    var rest = sequenceRecordImpl1(Type_Proxy["Proxy"].value)(a);
                                    var valA = get(Type_Proxy["Proxy"].value)(a);
                                    var fn = function (valA$prime) {
                                        return function (rest$prime) {
                                            return compose(insert1(Type_Proxy["Proxy"].value)(valA$prime))(rest$prime);
                                        };
                                    };
                                    return apply(map(fn)(valA))(rest);
                                };
                            },
                            Functor0: function () {
                                return Functor0;
                            }
                        };
                    };
                };
            };
        };
    };
};
var sequenceRecord = function () {
    return function (dictSequenceRecord) {
        var sequenceRecordImpl1 = sequenceRecordImpl(dictSequenceRecord);
        var map = Data_Functor.map(dictSequenceRecord.Functor0());
        return function (a) {
            var builder = sequenceRecordImpl1(Type_Proxy["Proxy"].value)(a);
            return map(flap(Record_Builder.build)({}))(builder);
        };
    };
};
var ordRecordNil = {
    compareRecordImpl: function (v) {
        return function (v1) {
            return function (v2) {
                return Data_Ordering.EQ.value;
            };
        };
    }
};
var nilKeys = {
    keysImpl: function (v) {
        return mempty;
    }
};
var mapRecordNil = {
    mapRecordBuilder: function (v) {
        return function (v1) {
            return function (v2) {
                return identity;
            };
        };
    }
};
var mapRecordBuilder = function (dict) {
    return dict.mapRecordBuilder;
};
var mapRecordCons = function (dictIsSymbol) {
    var get = Record.get(dictIsSymbol)();
    var insert1 = insert(dictIsSymbol);
    return function () {
        return function (dictMapRecord) {
            var mapRecordBuilder1 = mapRecordBuilder(dictMapRecord);
            return function () {
                return function () {
                    return {
                        mapRecordBuilder: function (v) {
                            return function (f) {
                                return function (r) {
                                    var rest = mapRecordBuilder1(Type_Proxy["Proxy"].value)(f)(r);
                                    var val = f(get(Type_Proxy["Proxy"].value)(r));
                                    var first = insert1(Type_Proxy["Proxy"].value)(val);
                                    return compose(first)(rest);
                                };
                            };
                        }
                    };
                };
            };
        };
    };
};
var mapRecord = function () {
    return function (dictMapRecord) {
        var mapRecordBuilder1 = mapRecordBuilder(dictMapRecord);
        return function (f) {
            return function (r) {
                var builder = mapRecordBuilder1(Type_Proxy["Proxy"].value)(f)(r);
                return Record_Builder.build(builder)({});
            };
        };
    };
};
var keysImpl = function (dict) {
    return dict.keysImpl;
};
var slistKeys = function () {
    return function (dictKeys) {
        var keysImpl1 = keysImpl(dictKeys);
        return function (v) {
            return keysImpl1(Type_Proxy["Proxy"].value);
        };
    };
};
var keys = function () {
    return function (dictKeys) {
        var keysImpl1 = keysImpl(dictKeys);
        return function (v) {
            return keysImpl1(Type_Proxy["Proxy"].value);
        };
    };
};
var keys1 = /* #__PURE__ */ keys();
var pick = function () {
    return function () {
        return function (dictKeys) {
            var ks = fromFoldable(keys1(dictKeys)(Type_Proxy["Proxy"].value));
            return Data_Function_Uncurried.runFn2($foreign.pickFn)(ks);
        };
    };
};
var consKeys = function (dictIsSymbol) {
    var reflectSymbol = Data_Symbol.reflectSymbol(dictIsSymbol);
    return function (dictKeys) {
        var keysImpl1 = keysImpl(dictKeys);
        return {
            keysImpl: function (v) {
                var rest = keysImpl1(Type_Proxy["Proxy"].value);
                var first = reflectSymbol(Type_Proxy["Proxy"].value);
                return new Data_List_Types.Cons(first, rest);
            }
        };
    };
};
var compareRecordImpl = function (dict) {
    return dict.compareRecordImpl;
};
var ordRecordCons = function (dictIsSymbol) {
    var get = Record.get(dictIsSymbol)();
    return function (dictOrd) {
        var compare = Data_Ord.compare(dictOrd);
        return function () {
            return function (dictOrdRecord) {
                var compareRecordImpl1 = compareRecordImpl(dictOrdRecord);
                return {
                    compareRecordImpl: function (v) {
                        return function (a) {
                            return function (b) {
                                var valA = get(Type_Proxy["Proxy"].value)(a);
                                var valB = get(Type_Proxy["Proxy"].value)(b);
                                var v1 = compare(valA)(valB);
                                if (v1 instanceof Data_Ordering.EQ) {
                                    return compareRecordImpl1(Type_Proxy["Proxy"].value)(a)(b);
                                };
                                return v1;
                            };
                        };
                    }
                };
            };
        };
    };
};
var compareRecord = function () {
    return function (dictOrdRecord) {
        var compareRecordImpl1 = compareRecordImpl(dictOrdRecord);
        return function (a) {
            return function (b) {
                return compareRecordImpl1(Type_Proxy["Proxy"].value)(a)(b);
            };
        };
    };
};
export {
    pickFn
} from "./foreign.js";
export {
    compareRecordImpl,
    keysImpl,
    mapRecordBuilder,
    sequenceRecordImpl,
    zipRecordImpl,
    mapRecord,
    zipRecord,
    keys,
    pick,
    slistKeys,
    compareRecord,
    sequenceRecord,
    mapRecordCons,
    mapRecordNil,
    zipRecordNil,
    zipRecordCons,
    nilKeys,
    consKeys,
    slToRlSNil,
    slToRlSCons,
    ordRecordCons,
    ordRecordNil,
    sequenceRecordSingle,
    sequenceRecordCons,
    sequenceRecordNil
};
