// Generated by purs version 0.15.4
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as PureScript_CST_Types from "../PureScript.CST.Types/index.js";
var UnicodeSource = /* #__PURE__ */ (function () {
    function UnicodeSource() {

    };
    UnicodeSource.value = new UnicodeSource();
    return UnicodeSource;
})();
var UnicodeAlways = /* #__PURE__ */ (function () {
    function UnicodeAlways() {

    };
    UnicodeAlways.value = new UnicodeAlways();
    return UnicodeAlways;
})();
var UnicodeNever = /* #__PURE__ */ (function () {
    function UnicodeNever() {

    };
    UnicodeNever.value = new UnicodeNever();
    return UnicodeNever;
})();
var printUnicode = function (ascii) {
    return function (uni) {
        return function (style) {
            return function (v) {
                if (v instanceof UnicodeNever) {
                    return ascii;
                };
                if (v instanceof UnicodeAlways) {
                    return uni;
                };
                if (v instanceof UnicodeSource) {
                    if (style instanceof PureScript_CST_Types.ASCII) {
                        return ascii;
                    };
                    if (style instanceof PureScript_CST_Types.Unicode) {
                        return uni;
                    };
                    throw new Error("Failed pattern match at Tidy.Token (line 23, column 5 - line 25, column 21): " + [ style.constructor.name ]);
                };
                throw new Error("Failed pattern match at Tidy.Token (line 19, column 32 - line 25, column 21): " + [ v.constructor.name ]);
            };
        };
    };
};
var printQualified = function (moduleName) {
    return function (name) {
        if (moduleName instanceof Data_Maybe.Nothing) {
            return name;
        };
        if (moduleName instanceof Data_Maybe.Just) {
            return moduleName.value0 + ("." + name);
        };
        throw new Error("Failed pattern match at Tidy.Token (line 97, column 34 - line 99, column 44): " + [ moduleName.constructor.name ]);
    };
};
var printToken = function (option) {
    return function (v) {
        if (v instanceof PureScript_CST_Types.TokLeftParen) {
            return "(";
        };
        if (v instanceof PureScript_CST_Types.TokRightParen) {
            return ")";
        };
        if (v instanceof PureScript_CST_Types.TokLeftBrace) {
            return "{";
        };
        if (v instanceof PureScript_CST_Types.TokRightBrace) {
            return "}";
        };
        if (v instanceof PureScript_CST_Types.TokLeftSquare) {
            return "[";
        };
        if (v instanceof PureScript_CST_Types.TokRightSquare) {
            return "]";
        };
        if (v instanceof PureScript_CST_Types.TokLeftArrow) {
            return printUnicode("<-")("\u2190")(v.value0)(option);
        };
        if (v instanceof PureScript_CST_Types.TokRightArrow) {
            return printUnicode("->")("\u2192")(v.value0)(option);
        };
        if (v instanceof PureScript_CST_Types.TokRightFatArrow) {
            return printUnicode("=>")("\u21d2")(v.value0)(option);
        };
        if (v instanceof PureScript_CST_Types.TokDoubleColon) {
            return printUnicode("::")("\u2237")(v.value0)(option);
        };
        if (v instanceof PureScript_CST_Types.TokForall) {
            return printUnicode("forall")("\u2200")(v.value0)(option);
        };
        if (v instanceof PureScript_CST_Types.TokEquals) {
            return "=";
        };
        if (v instanceof PureScript_CST_Types.TokPipe) {
            return "|";
        };
        if (v instanceof PureScript_CST_Types.TokTick) {
            return "`";
        };
        if (v instanceof PureScript_CST_Types.TokDot) {
            return ".";
        };
        if (v instanceof PureScript_CST_Types.TokComma) {
            return ",";
        };
        if (v instanceof PureScript_CST_Types.TokUnderscore) {
            return "_";
        };
        if (v instanceof PureScript_CST_Types.TokBackslash) {
            return "\\";
        };
        if (v instanceof PureScript_CST_Types.TokAt) {
            return "@";
        };
        if (v instanceof PureScript_CST_Types.TokLowerName) {
            return printQualified(v.value0)(v.value1);
        };
        if (v instanceof PureScript_CST_Types.TokUpperName) {
            return printQualified(v.value0)(v.value1);
        };
        if (v instanceof PureScript_CST_Types.TokOperator) {
            return printQualified(v.value0)(v.value1);
        };
        if (v instanceof PureScript_CST_Types.TokSymbolName) {
            return printQualified(v.value0)("(" + (v.value1 + ")"));
        };
        if (v instanceof PureScript_CST_Types.TokSymbolArrow) {
            return printUnicode("(->)")("(\u2192)")(v.value0)(option);
        };
        if (v instanceof PureScript_CST_Types.TokHole) {
            return "?" + v.value0;
        };
        if (v instanceof PureScript_CST_Types.TokChar) {
            return "'" + (v.value0 + "'");
        };
        if (v instanceof PureScript_CST_Types.TokString) {
            return "\"" + (v.value0 + "\"");
        };
        if (v instanceof PureScript_CST_Types.TokRawString) {
            return "\"\"\"" + (v.value0 + "\"\"\"");
        };
        if (v instanceof PureScript_CST_Types.TokInt) {
            return v.value0;
        };
        if (v instanceof PureScript_CST_Types.TokNumber) {
            return v.value0;
        };
        if (v instanceof PureScript_CST_Types.TokLayoutStart) {
            return "";
        };
        if (v instanceof PureScript_CST_Types.TokLayoutSep) {
            return "";
        };
        if (v instanceof PureScript_CST_Types.TokLayoutEnd) {
            return "";
        };
        throw new Error("Failed pattern match at Tidy.Token (line 28, column 21 - line 94, column 7): " + [ v.constructor.name ]);
    };
};
var eqUnicodeOption = {
    eq: function (x) {
        return function (y) {
            if (x instanceof UnicodeSource && y instanceof UnicodeSource) {
                return true;
            };
            if (x instanceof UnicodeAlways && y instanceof UnicodeAlways) {
                return true;
            };
            if (x instanceof UnicodeNever && y instanceof UnicodeNever) {
                return true;
            };
            return false;
        };
    }
};
export {
    UnicodeSource,
    UnicodeAlways,
    UnicodeNever,
    printToken,
    eqUnicodeOption
};
