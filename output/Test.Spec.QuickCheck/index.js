// Generated by purs version 0.15.4
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Unit from "../Data.Unit/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Exception from "../Effect.Exception/index.js";
import * as Random_LCG from "../Random.LCG/index.js";
import * as Test_QuickCheck from "../Test.QuickCheck/index.js";
var throwError = /* #__PURE__ */ Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff);
var intercalate = /* #__PURE__ */ Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString);
var pure = /* #__PURE__ */ Control_Applicative.pure(Effect_Aff.applicativeAff);
var bind = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
var getErrorMessage = function (v) {
    if (v instanceof Test_QuickCheck.Failed) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var quickCheckPure = function (dictTestable) {
    var quickCheckPure1 = Test_QuickCheck.quickCheckPure(dictTestable);
    return function (seed) {
        return function (n) {
            return function (prop) {
                var results = quickCheckPure1(seed)(n)(prop);
                var msgs = Data_List.mapMaybe(getErrorMessage)(results);
                var $16 = Data_List.length(msgs) > 0;
                if ($16) {
                    return throwError(Effect_Exception.error(intercalate("\x0a  ")(msgs)));
                };
                return pure(Data_Unit.unit);
            };
        };
    };
};
var quickCheck$prime = function (dictTestable) {
    var quickCheckPure1 = quickCheckPure(dictTestable);
    return function (n) {
        return function (prop) {
            return bind(liftEffect(Random_LCG.randomSeed))(function (seed) {
                return quickCheckPure1(seed)(n)(prop);
            });
        };
    };
};
var quickCheck = function (dictTestable) {
    return quickCheck$prime(dictTestable)(100);
};
export {
    quickCheck,
    quickCheck$prime,
    quickCheckPure
};
