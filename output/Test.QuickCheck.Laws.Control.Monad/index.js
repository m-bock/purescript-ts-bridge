// Generated by purs version 0.15.4
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Test_QuickCheck from "../Test.QuickCheck/index.js";
import * as Test_QuickCheck_Arbitrary from "../Test.QuickCheck.Arbitrary/index.js";
import * as Test_QuickCheck_Gen from "../Test.QuickCheck.Gen/index.js";
import * as Test_QuickCheck_Laws from "../Test.QuickCheck.Laws/index.js";
var quickCheck$prime = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableGen(/* #__PURE__ */ Test_QuickCheck.testableFunction(Test_QuickCheck_Laws.arbitraryA)(Test_QuickCheck.testableBoolean)));
var map = /* #__PURE__ */ Data_Functor.map(Test_QuickCheck_Gen.functorGen);
var quickCheck$prime1 = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableGen(Test_QuickCheck.testableBoolean));
var arbFunction = /* #__PURE__ */ Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryA);
var checkMonadGen = function (dictMonad) {
    var bind = Control_Bind.bind(dictMonad.Bind1());
    var pure = Control_Applicative.pure(dictMonad.Applicative0());
    return function (dictEq) {
        var eq = Data_Eq.eq(dictEq);
        return function (gen) {
            return function (genf) {
                var rightIdentity = function (m) {
                    return eq(bind(m)(pure))(m);
                };
                var leftIdentity = function (f) {
                    return function (x) {
                        return eq(bind(pure(x))(f))(f(x));
                    };
                };
                return function __do() {
                    Effect_Console.log("Checking 'Left identity' law for Monad")();
                    quickCheck$prime(1000)(map(leftIdentity)(genf))();
                    Effect_Console.log("Checking 'Right identity' law for Monad")();
                    return quickCheck$prime1(1000)(map(rightIdentity)(gen))();
                };
            };
        };
    };
};
var checkMonad = function (dictMonad) {
    var checkMonadGen1 = checkMonadGen(dictMonad);
    return function (dictArbitrary) {
        var arbitrary = Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary);
        var arbitrary1 = Test_QuickCheck_Arbitrary.arbitrary(arbFunction(dictArbitrary));
        return function (dictEq) {
            var checkMonadGen2 = checkMonadGen1(dictEq);
            return function (v) {
                return checkMonadGen2(arbitrary)(arbitrary1);
            };
        };
    };
};
export {
    checkMonad,
    checkMonadGen
};
