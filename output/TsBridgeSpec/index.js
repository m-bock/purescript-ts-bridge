// Generated by purs version 0.15.4
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Test_Spec from "../Test.Spec/index.js";
import * as Test_Util from "../Test.Util/index.js";
import * as TsBridge_Core from "../TsBridge.Core/index.js";
import * as TsBridge_Monad from "../TsBridge.Monad/index.js";
import * as TsBridge_Print from "../TsBridge.Print/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var it = /* #__PURE__ */ Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit);
var shouldEqual = /* #__PURE__ */ Test_Util.shouldEqual(Data_Show.showString)(Data_Eq.eqString);
var showArray = /* #__PURE__ */ Data_Show.showArray(Data_Show.showString);
var eqArray = /* #__PURE__ */ Data_Eq.eqArray(Data_Eq.eqString);
var shouldEqual1 = /* #__PURE__ */ Test_Util.shouldEqual(showArray)(eqArray);
var mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(Data_Map_Internal.functorMap);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(/* #__PURE__ */ Test_Spec.bindSpecT(Data_Identity.bindIdentity));
var describe = /* #__PURE__ */ Test_Spec.describe(Data_Identity.monadIdentity);
var Mp = /* #__PURE__ */ (function () {
    function Mp() {

    };
    Mp.value = new Mp();
    return Mp;
})();
var toTsBridgeString = {
    toTsBridge: TsBridge_Core.defaultString
};
var toTsBridgeRecord = function (dictGenRecord) {
    var defaultRecord = TsBridge_Core.defaultRecord(dictGenRecord)();
    return function () {
        return {
            toTsBridge: defaultRecord(Mp.value)
        };
    };
};
var toTsBridgeNumber = {
    toTsBridge: TsBridge_Core.defaultNumber
};
var toTsBridgeC = {
    toTsBridge: function (v) {
        return TsBridge_Core.defaultTypeVar("C");
    }
};
var toTsBridgeBoolean = {
    toTsBridge: TsBridge_Core.defaultBoolean
};
var toTsBridgeB = {
    toTsBridge: function (v) {
        return TsBridge_Core.defaultTypeVar("B");
    }
};
var toTsBridgeA = {
    toTsBridge: function (v) {
        return TsBridge_Core.defaultTypeVar("A");
    }
};
var toTsBridge = function (dict) {
    return dict.toTsBridge;
};
var mappingMappingToTsBridgeT = function (dictToTsBridge) {
    var toTsBridge9 = toTsBridge(dictToTsBridge);
    return {
        mapping: function (v) {
            return toTsBridge9;
        }
    };
};
var tsValue = /* #__PURE__ */ TsBridge_Core.tsValue(/* #__PURE__ */ mappingMappingToTsBridgeT(toTsBridgeNumber));
var toTsBridgeProxy = function (dictToTsBridge) {
    return {
        toTsBridge: TsBridge_Core.defaultProxy(mappingMappingToTsBridgeT(dictToTsBridge))(Mp.value)
    };
};
var toTsBridgeProxy1 = /* #__PURE__ */ toTsBridgeProxy(toTsBridgeNumber);
var mappingMappingToTsBridgeT1 = /* #__PURE__ */ mappingMappingToTsBridgeT(toTsBridgeProxy1);
var tsTypeAlias = /* #__PURE__ */ TsBridge_Core.tsTypeAlias(mappingMappingToTsBridgeT1);
var mappingMappingToTsBridgeT2 = /* #__PURE__ */ mappingMappingToTsBridgeT(/* #__PURE__ */ toTsBridgeProxy(toTsBridgeA));
var tsTypeAlias1 = /* #__PURE__ */ TsBridge_Core.tsTypeAlias(mappingMappingToTsBridgeT2);
var tsTypeAlias2 = /* #__PURE__ */ TsBridge_Core.tsTypeAlias(/* #__PURE__ */ mappingMappingToTsBridgeT(/* #__PURE__ */ toTsBridgeProxy(/* #__PURE__ */ toTsBridgeRecord(/* #__PURE__ */ TsBridge_Core.genRecordCons(/* #__PURE__ */ mappingMappingToTsBridgeT(/* #__PURE__ */ toTsBridgeProxy(toTsBridgeC)))(/* #__PURE__ */ TsBridge_Core.genRecordCons(/* #__PURE__ */ mappingMappingToTsBridgeT(/* #__PURE__ */ toTsBridgeProxy(/* #__PURE__ */ toTsBridgeRecord(/* #__PURE__ */ TsBridge_Core.genRecordCons(mappingMappingToTsBridgeT2)(/* #__PURE__ */ TsBridge_Core.genRecordCons(/* #__PURE__ */ mappingMappingToTsBridgeT(/* #__PURE__ */ toTsBridgeProxy(toTsBridgeB)))(TsBridge_Core.genRecordNil)({
    reflectSymbol: function () {
        return "b";
    }
}))({
    reflectSymbol: function () {
        return "a";
    }
}))())))(TsBridge_Core.genRecordNil)({
    reflectSymbol: function () {
        return "sub";
    }
}))({
    reflectSymbol: function () {
        return "c";
    }
}))())));
var toTsBridge1 = /* #__PURE__ */ toTsBridge(toTsBridgeProxy1);
var toTsBridgeProxy2 = /* #__PURE__ */ toTsBridgeProxy(toTsBridgeString);
var toTsBridge2 = /* #__PURE__ */ toTsBridge(toTsBridgeProxy2);
var toTsBridge3 = /* #__PURE__ */ toTsBridge(/* #__PURE__ */ toTsBridgeProxy(toTsBridgeBoolean));
var toTsBridge4 = /* #__PURE__ */ toTsBridge(/* #__PURE__ */ toTsBridgeProxy(/* #__PURE__ */ toTsBridgeRecord(/* #__PURE__ */ TsBridge_Core.genRecordCons(/* #__PURE__ */ mappingMappingToTsBridgeT(toTsBridgeProxy2))(/* #__PURE__ */ TsBridge_Core.genRecordCons(mappingMappingToTsBridgeT1)(TsBridge_Core.genRecordNil)({
    reflectSymbol: function () {
        return "foo";
    }
}))({
    reflectSymbol: function () {
        return "bar";
    }
}))()));
var toTsBridgeArray = function (dictToTsBridge) {
    return {
        toTsBridge: TsBridge_Core.defaultArray(mappingMappingToTsBridgeT(toTsBridgeProxy(dictToTsBridge)))(Mp.value)
    };
};
var toTsBridge5 = /* #__PURE__ */ toTsBridge(/* #__PURE__ */ toTsBridgeProxy(/* #__PURE__ */ toTsBridgeArray(toTsBridgeBoolean)));
var toTsBridgeFunction = function (dictToTsBridge) {
    var defaultFunction = TsBridge_Core.defaultFunction(mappingMappingToTsBridgeT(toTsBridgeProxy(dictToTsBridge)));
    return function (dictToTsBridge1) {
        return {
            toTsBridge: defaultFunction(mappingMappingToTsBridgeT(toTsBridgeProxy(dictToTsBridge1)))(Mp.value)
        };
    };
};
var toTsBridgeFunction1 = /* #__PURE__ */ toTsBridgeFunction(toTsBridgeA);
var tsTypeAlias3 = /* #__PURE__ */ TsBridge_Core.tsTypeAlias(/* #__PURE__ */ mappingMappingToTsBridgeT(/* #__PURE__ */ toTsBridgeProxy(/* #__PURE__ */ toTsBridgeFunction1(/* #__PURE__ */ toTsBridgeFunction(toTsBridgeB)(toTsBridgeC)))));
var tsTypeAlias4 = /* #__PURE__ */ TsBridge_Core.tsTypeAlias(/* #__PURE__ */ mappingMappingToTsBridgeT(/* #__PURE__ */ toTsBridgeProxy(/* #__PURE__ */ toTsBridgeFunction1(/* #__PURE__ */ toTsBridgeFunction1(toTsBridgeA)))));
var toTsBridge6 = /* #__PURE__ */ toTsBridge(/* #__PURE__ */ toTsBridgeProxy(/* #__PURE__ */ toTsBridgeFunction(toTsBridgeString)(/* #__PURE__ */ toTsBridgeFunction(toTsBridgeNumber)(toTsBridgeBoolean))));
var toTsBridgeEither = function (dictToTsBridge) {
    var toTsBridge9 = toTsBridge(toTsBridgeProxy(dictToTsBridge));
    return function (dictToTsBridge1) {
        return {
            toTsBridge: TsBridge_Core.defaultOpaqueType("Data.Either")("Either")([ "A", "B" ])([ toTsBridge9(Type_Proxy["Proxy"].value), toTsBridge(toTsBridgeProxy(dictToTsBridge1))(Type_Proxy["Proxy"].value) ])
        };
    };
};
var toTsBridgeProxy3 = /* #__PURE__ */ toTsBridgeProxy(/* #__PURE__ */ toTsBridgeEither(toTsBridgeString)(toTsBridgeBoolean));
var mappingMappingToTsBridgeT3 = /* #__PURE__ */ mappingMappingToTsBridgeT(toTsBridgeProxy3);
var toTsBridge7 = /* #__PURE__ */ toTsBridge(toTsBridgeProxy3);
var toTsBridgeMaybe = function (dictToTsBridge) {
    return {
        toTsBridge: TsBridge_Core.defaultOpaqueType("Data.Maybe")("Maybe")([ "A" ])([ toTsBridge(toTsBridgeProxy(dictToTsBridge))(Type_Proxy["Proxy"].value) ])
    };
};
var toTsBridge8 = /* #__PURE__ */ toTsBridge(/* #__PURE__ */ toTsBridgeProxy(/* #__PURE__ */ toTsBridgeMaybe(toTsBridgeBoolean)));
var textFile = function (n) {
    return function (lines) {
        return new Data_Tuple.Tuple(n, lines);
    };
};
var testTypePrint = function (x) {
    return function (s) {
        return it("prints the correct type")(shouldEqual(s)(TsBridge_Print.printTsType(Data_Tuple.fst(TsBridge_Monad.runTsBridgeM(x)))));
    };
};
var testDeclPrint = function (x) {
    return function (s) {
        return it("prints the correct declaration")(shouldEqual1(s)(TsBridge_Print.printTsDeclarations(Data_Tuple.fst(TsBridge_Monad.runTsBridgeM(x)))));
    };
};
var printTsProgram = function (x) {
    return mapFlipped(TsBridge_Print.printTsProgram(x))(Data_String_Common.split("\x0a"));
};
var spec = /* #__PURE__ */ (function () {
    return discard(describe("Program Printing")(describe("Program with imports")(it("generates a type alias and adds the type module")(Test_Util.shouldEqual(Data_Map_Internal.showMap(Data_Show.showString)(showArray))(Data_Map_Internal.eqMap(Data_Eq.eqString)(eqArray))(printTsProgram(TsBridge_Core.tsProgram([ TsBridge_Core.tsModuleFile("types")([ TsBridge_Core.tsTypeAlias(mappingMappingToTsBridgeT3)(Mp.value)("Foo")(Type_Proxy["Proxy"].value) ]), TsBridge_Core.tsModuleFile("Data.Either/index")([ TsBridge_Core.tsOpaqueType(mappingMappingToTsBridgeT3)(Mp.value)("Either")(Type_Proxy["Proxy"].value) ]) ])))(Data_Map_Internal.fromFoldable(Data_Ord.ordString)(Data_Foldable.foldableArray)([ textFile("types.d.ts")([ "import * as Data_Either from '~/Data.Either/index'", "", "export type Foo = Data_Either.Either<string, boolean>" ]), textFile("Data.Either/index.d.ts")([ "import * as Data_Either from '~/Data.Either/index'", "", "export type Either<A, B> = { readonly opaque_Either: unique symbol; readonly arg0: A; readonly arg1: B; }" ]) ]))))))(function () {
        return discard(describe("Declaration Printing")(discard(describe("tsTypeAlias")(discard(describe("Number")(testDeclPrint(tsTypeAlias(Mp.value)("Foo")(Type_Proxy["Proxy"].value))([ "export type Foo = number" ])))(function () {
            return discard(describe("Type Variable")(testDeclPrint(tsTypeAlias1(Mp.value)("Foo")(Type_Proxy["Proxy"].value))([ "export type Foo<A> = A" ])))(function () {
                return discard(describe("Type Variables")(testDeclPrint(tsTypeAlias2(Mp.value)("Foo")(Type_Proxy["Proxy"].value))([ "export type Foo<C, A, B> = { readonly c: C; readonly sub: { readonly a: A; readonly b: B; }; }" ])))(function () {
                    return discard(describe("")(testDeclPrint(tsTypeAlias3(Mp.value)("Foo")(Type_Proxy["Proxy"].value))([ "export type Foo = <A>(_: A) => <B, C>(_: B) => C" ])))(function () {
                        return describe("")(testDeclPrint(tsTypeAlias4(Mp.value)("Foo")(Type_Proxy["Proxy"].value))([ "export type Foo = <A>(_: A) => (_: A) => A" ]));
                    });
                });
            });
        })))(function () {
            return describe("tsValue")(describe("Number")(testDeclPrint(tsValue(Mp.value)("foo")(13.0))([ "export const foo : number" ])));
        })))(function () {
            return describe("Type Printing")(discard(describe("Number")(testTypePrint(toTsBridge1(Type_Proxy["Proxy"].value))("number")))(function () {
                return discard(describe("String")(testTypePrint(toTsBridge2(Type_Proxy["Proxy"].value))("string")))(function () {
                    return discard(describe("Boolean")(testTypePrint(toTsBridge3(Type_Proxy["Proxy"].value))("boolean")))(function () {
                        return discard(describe("Array")(testTypePrint(toTsBridge5(Type_Proxy["Proxy"].value))("Array<boolean>")))(function () {
                            return discard(describe("Function")(testTypePrint(toTsBridge6(Type_Proxy["Proxy"].value))("(_: string) => (_: number) => boolean")))(function () {
                                return discard(describe("Record")(testTypePrint(toTsBridge4(Type_Proxy["Proxy"].value))("{ readonly bar: string; readonly foo: number; }")))(function () {
                                    return discard(describe("Maybe")(testTypePrint(toTsBridge8(Type_Proxy["Proxy"].value))("Data_Maybe.Maybe<boolean>")))(function () {
                                        return describe("Either")(testTypePrint(toTsBridge7(Type_Proxy["Proxy"].value))("Data_Either.Either<string, boolean>"));
                                    });
                                });
                            });
                        });
                    });
                });
            }));
        });
    });
})();
export {
    spec
};
