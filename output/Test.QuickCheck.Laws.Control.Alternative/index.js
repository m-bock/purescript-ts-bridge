// Generated by purs version 0.15.4
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Plus from "../Control.Plus/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Test_QuickCheck from "../Test.QuickCheck/index.js";
import * as Test_QuickCheck_Arbitrary from "../Test.QuickCheck.Arbitrary/index.js";
import * as Test_QuickCheck_Gen from "../Test.QuickCheck.Gen/index.js";
var quickCheck$prime = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableGen(Test_QuickCheck.testableBoolean));
var lift3 = /* #__PURE__ */ Control_Apply.lift3(Test_QuickCheck_Gen.applyGen);
var map = /* #__PURE__ */ Data_Functor.map(Test_QuickCheck_Gen.functorGen);
var checkAlternativeGen = function (dictAlternative) {
    var apply = Control_Apply.apply((dictAlternative.Applicative0()).Apply0());
    var Plus1 = dictAlternative.Plus1();
    var alt = Control_Alt.alt(Plus1.Alt0());
    var empty = Control_Plus.empty(Plus1);
    return function (dictEq) {
        var eq = Data_Eq.eq(dictEq);
        return function (dictEq1) {
            var eq1 = Data_Eq.eq(dictEq1);
            return function (gen) {
                return function (genf) {
                    return function (v) {
                        var distributivity = function (f) {
                            return function (g) {
                                return function (x) {
                                    return eq1(apply(alt(f)(g))(x))(alt(apply(f)(x))(apply(g)(x)));
                                };
                            };
                        };
                        var annihilation = function (x) {
                            return eq(apply(empty)(x))(empty);
                        };
                        return function __do() {
                            Effect_Console.log("Checking 'Left identity' law for Alternative")();
                            quickCheck$prime(1000)(lift3(distributivity)(genf)(genf)(gen))();
                            Effect_Console.log("Checking 'Annihilation' law for Alternative")();
                            return quickCheck$prime(1000)(map(annihilation)(gen))();
                        };
                    };
                };
            };
        };
    };
};
var checkAlternative = function (dictAlternative) {
    var checkAlternativeGen1 = checkAlternativeGen(dictAlternative);
    return function (dictArbitrary) {
        var arbitrary = Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary);
        return function (dictArbitrary1) {
            var arbitrary1 = Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary1);
            return function (dictEq) {
                var checkAlternativeGen2 = checkAlternativeGen1(dictEq);
                return function (dictEq1) {
                    return checkAlternativeGen2(dictEq1)(arbitrary1)(arbitrary);
                };
            };
        };
    };
};
export {
    checkAlternative,
    checkAlternativeGen
};
