// Generated by purs version 0.15.4
import * as $foreign from "./foreign.js";
import * as Data_DateTime_Instant from "../Data.DateTime.Instant/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_EuclideanRing from "../Data.EuclideanRing/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Nullable from "../Data.Nullable/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Node_Buffer from "../Node.Buffer/index.js";
import * as Node_Buffer_Class from "../Node.Buffer.Class/index.js";
import * as Node_Encoding from "../Node.Encoding/index.js";
import * as Node_FS from "../Node.FS/index.js";
import * as Node_FS_Internal from "../Node.FS.Internal/index.js";
import * as Node_FS_Perms from "../Node.FS.Perms/index.js";
import * as Node_FS_Stats from "../Node.FS.Stats/index.js";
var show = /* #__PURE__ */ Data_Show.show(Node_Encoding.showEncoding);
var map = /* #__PURE__ */ Data_Functor.map(Data_Either.functorEither);
var div = /* #__PURE__ */ Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt);
var size = /* #__PURE__ */ Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect);
var handleCallback = function (cb) {
    return $foreign.handleCallbackImpl(Data_Either.Left.create, Data_Either.Right.create, cb);
};
var link = function (src) {
    return function (dst) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return $foreign.linkImpl(src, dst, handleCallback(cb));
            });
        };
    };
};
var mkdir$prime = function (file) {
    return function (v) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v1) {
                return $foreign.mkdirImpl(file, {
                    recursive: v.recursive,
                    mode: Node_FS_Perms.permsToString(v.mode)
                }, handleCallback(cb));
            });
        };
    };
};
var mkdir = function (path) {
    return mkdir$prime(path)({
        recursive: false,
        mode: Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all)
    });
};
var readFile = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return $foreign.readFileImpl(file, {}, handleCallback(cb));
        });
    };
};
var readTextFile = function (encoding) {
    return function (file) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return $foreign.readFileImpl(file, {
                    encoding: show(encoding)
                }, handleCallback(cb));
            });
        };
    };
};
var readdir = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return $foreign.readdirImpl(file, handleCallback(cb));
        });
    };
};
var readlink = function (path) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return $foreign.readlinkImpl(path, handleCallback(cb));
        });
    };
};
var realpath = function (path) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return $foreign.realpathImpl(path, {}, handleCallback(cb));
        });
    };
};
var realpath$prime = function (path) {
    return function (cache) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return $foreign.realpathImpl(path, cache, handleCallback(cb));
            });
        };
    };
};
var rename = function (oldFile) {
    return function (newFile) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return $foreign.renameImpl(oldFile, newFile, handleCallback(cb));
            });
        };
    };
};
var rmdir = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return $foreign.rmdirImpl(file, handleCallback(cb));
        });
    };
};
var stat = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return $foreign.statImpl(file, handleCallback((function () {
                var $39 = map(Node_FS_Stats.Stats.create);
                return function ($40) {
                    return cb($39($40));
                };
            })()));
        });
    };
};
var symlink = function (src) {
    return function (dest) {
        return function (ty) {
            return function (cb) {
                return Node_FS_Internal.mkEffect(function (v) {
                    return $foreign.symlinkImpl(src, dest, Node_FS.symlinkTypeToNode(ty), handleCallback(cb));
                });
            };
        };
    };
};
var truncate = function (file) {
    return function (len) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return $foreign.truncateImpl(file, len, handleCallback(cb));
            });
        };
    };
};
var unlink = function (file) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return $foreign.unlinkImpl(file, handleCallback(cb));
        });
    };
};
var utimes = function (file) {
    return function (atime) {
        return function (mtime) {
            return function (cb) {
                var toEpochMilliseconds = function ($41) {
                    return Data_DateTime_Instant.unInstant(Data_DateTime_Instant.fromDateTime($41));
                };
                var ms = function (v) {
                    return Data_Int.round(v);
                };
                var fromDate = function (date) {
                    return div(ms(toEpochMilliseconds(date)))(1000);
                };
                return Node_FS_Internal.mkEffect(function (v) {
                    return $foreign.utimesImpl(file, fromDate(atime), fromDate(mtime), handleCallback(cb));
                });
            };
        };
    };
};
var writeFile = function (file) {
    return function (buff) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return $foreign.writeFileImpl(file, buff, {}, handleCallback(cb));
            });
        };
    };
};
var writeTextFile = function (encoding) {
    return function (file) {
        return function (buff) {
            return function (cb) {
                return Node_FS_Internal.mkEffect(function (v) {
                    return $foreign.writeFileImpl(file, buff, {
                        encoding: show(encoding)
                    }, handleCallback(cb));
                });
            };
        };
    };
};
var fdWrite = function (fd) {
    return function (buff) {
        return function (off) {
            return function (len) {
                return function (pos) {
                    return function (cb) {
                        return Node_FS_Internal.mkEffect(function (v) {
                            return $foreign.writeImpl(fd, buff, off, len, Data_Nullable.toNullable(pos), handleCallback(cb));
                        });
                    };
                };
            };
        };
    };
};
var fdRead = function (fd) {
    return function (buff) {
        return function (off) {
            return function (len) {
                return function (pos) {
                    return function (cb) {
                        return Node_FS_Internal.mkEffect(function (v) {
                            return $foreign.readImpl(fd, buff, off, len, Data_Nullable.toNullable(pos), handleCallback(cb));
                        });
                    };
                };
            };
        };
    };
};
var fdOpen = function (file) {
    return function (flags) {
        return function (mode) {
            return function (cb) {
                return Node_FS_Internal.mkEffect(function (v) {
                    return $foreign.openImpl(file, Node_FS.fileFlagsToNode(flags), Data_Nullable.toNullable(mode), handleCallback(cb));
                });
            };
        };
    };
};
var fdNext = function (fd) {
    return function (buff) {
        return function (cb) {
            return function __do() {
                var sz = size(buff)();
                return fdRead(fd)(buff)(0)(sz)(Data_Maybe.Nothing.value)(cb)();
            };
        };
    };
};
var fdClose = function (fd) {
    return function (cb) {
        return Node_FS_Internal.mkEffect(function (v) {
            return $foreign.closeImpl(fd, handleCallback(cb));
        });
    };
};
var fdAppend = function (fd) {
    return function (buff) {
        return function (cb) {
            return function __do() {
                var sz = size(buff)();
                return fdWrite(fd)(buff)(0)(sz)(Data_Maybe.Nothing.value)(cb)();
            };
        };
    };
};
var chown = function (file) {
    return function (uid) {
        return function (gid) {
            return function (cb) {
                return Node_FS_Internal.mkEffect(function (v) {
                    return $foreign.chownImpl(file, uid, gid, handleCallback(cb));
                });
            };
        };
    };
};
var chmod = function (file) {
    return function (perms) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return $foreign.chmodImpl(file, Node_FS_Perms.permsToString(perms), handleCallback(cb));
            });
        };
    };
};
var appendTextFile = function (encoding) {
    return function (file) {
        return function (buff) {
            return function (cb) {
                return Node_FS_Internal.mkEffect(function (v) {
                    return $foreign.appendFileImpl(file, buff, {
                        encoding: show(encoding)
                    }, handleCallback(cb));
                });
            };
        };
    };
};
var appendFile = function (file) {
    return function (buff) {
        return function (cb) {
            return Node_FS_Internal.mkEffect(function (v) {
                return $foreign.appendFileImpl(file, buff, {}, handleCallback(cb));
            });
        };
    };
};
export {
    rename,
    truncate,
    chown,
    chmod,
    stat,
    link,
    symlink,
    readlink,
    realpath,
    realpath$prime,
    unlink,
    rmdir,
    mkdir,
    mkdir$prime,
    readdir,
    utimes,
    readFile,
    readTextFile,
    writeFile,
    writeTextFile,
    appendFile,
    appendTextFile,
    fdOpen,
    fdRead,
    fdNext,
    fdWrite,
    fdAppend,
    fdClose
};
