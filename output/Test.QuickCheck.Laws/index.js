// Generated by purs version 0.15.4
import * as Data_Bounded from "../Data.Bounded/index.js";
import * as Data_Enum from "../Data.Enum/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Test_QuickCheck_Arbitrary from "../Test.QuickCheck.Arbitrary/index.js";
var E = function (x) {
    return x;
};
var D = function (x) {
    return x;
};
var C = function (x) {
    return x;
};
var B = function (x) {
    return x;
};
var A = function (x) {
    return x;
};
var semigroupE = Data_Ordering.semigroupOrdering;
var semigroupD = Data_Ordering.semigroupOrdering;
var semigroupC = Data_Ordering.semigroupOrdering;
var semigroupB = Data_Ordering.semigroupOrdering;
var semigroupA = Data_Ordering.semigroupOrdering;
var ordE = Data_Ord.ordOrdering;
var ordD = Data_Ord.ordOrdering;
var ordC = Data_Ord.ordOrdering;
var ordB = Data_Ord.ordOrdering;
var ordA = Data_Ord.ordOrdering;
var monoidE = /* #__PURE__ */ (function () {
    return {
        mempty: Data_Ordering.EQ.value,
        Semigroup0: function () {
            return semigroupE;
        }
    };
})();
var monoidD = /* #__PURE__ */ (function () {
    return {
        mempty: Data_Ordering.EQ.value,
        Semigroup0: function () {
            return semigroupD;
        }
    };
})();
var monoidC = /* #__PURE__ */ (function () {
    return {
        mempty: Data_Ordering.EQ.value,
        Semigroup0: function () {
            return semigroupC;
        }
    };
})();
var monoidB = /* #__PURE__ */ (function () {
    return {
        mempty: Data_Ordering.EQ.value,
        Semigroup0: function () {
            return semigroupB;
        }
    };
})();
var monoidA = /* #__PURE__ */ (function () {
    return {
        mempty: Data_Ordering.EQ.value,
        Semigroup0: function () {
            return semigroupA;
        }
    };
})();
var eqE = Data_Ordering.eqOrdering;
var eqD = Data_Ordering.eqOrdering;
var eqC = Data_Ordering.eqOrdering;
var eqB = Data_Ordering.eqOrdering;
var eqA = Data_Ordering.eqOrdering;
var enumE = Data_Enum.enumOrdering;
var enumD = Data_Enum.enumOrdering;
var enumC = Data_Enum.enumOrdering;
var enumB = Data_Enum.enumOrdering;
var enumA = Data_Enum.enumOrdering;
var coarbitraryE = Test_QuickCheck_Arbitrary.coarbOrdering;
var coarbitraryD = Test_QuickCheck_Arbitrary.coarbOrdering;
var coarbitraryC = Test_QuickCheck_Arbitrary.coarbOrdering;
var coarbitraryB = Test_QuickCheck_Arbitrary.coarbOrdering;
var coarbitraryA = Test_QuickCheck_Arbitrary.coarbOrdering;
var checkLaws = function (typeName) {
    return function (laws) {
        return function __do() {
            Effect_Console.log("\x0a\x0aChecking laws of " + (typeName + " instances...\x0a"))();
            return laws();
        };
    };
};
var boundedEnumE = Data_Enum.boundedEnumOrdering;
var boundedEnumD = Data_Enum.boundedEnumOrdering;
var boundedEnumC = Data_Enum.boundedEnumOrdering;
var boundedEnumB = Data_Enum.boundedEnumOrdering;
var boundedEnumA = Data_Enum.boundedEnumOrdering;
var boundedE = Data_Bounded.boundedOrdering;
var boundedD = Data_Bounded.boundedOrdering;
var boundedC = Data_Bounded.boundedOrdering;
var boundedB = Data_Bounded.boundedOrdering;
var boundedA = Data_Bounded.boundedOrdering;
var arbitraryE = Test_QuickCheck_Arbitrary.arbOrdering;
var arbitraryD = Test_QuickCheck_Arbitrary.arbOrdering;
var arbitraryC = Test_QuickCheck_Arbitrary.arbOrdering;
var arbitraryB = Test_QuickCheck_Arbitrary.arbOrdering;
var arbitraryA = Test_QuickCheck_Arbitrary.arbOrdering;
export {
    A,
    B,
    C,
    D,
    E,
    checkLaws,
    arbitraryA,
    boundedA,
    enumA,
    boundedEnumA,
    coarbitraryA,
    eqA,
    ordA,
    semigroupA,
    monoidA,
    arbitraryB,
    boundedB,
    enumB,
    boundedEnumB,
    coarbitraryB,
    eqB,
    ordB,
    semigroupB,
    monoidB,
    arbitraryC,
    boundedC,
    enumC,
    boundedEnumC,
    coarbitraryC,
    eqC,
    ordC,
    semigroupC,
    monoidC,
    arbitraryD,
    boundedD,
    enumD,
    boundedEnumD,
    coarbitraryD,
    eqD,
    ordD,
    semigroupD,
    monoidD,
    arbitraryE,
    boundedE,
    enumE,
    boundedEnumE,
    coarbitraryE,
    eqE,
    ordE,
    semigroupE,
    monoidE
};
