// Generated by purs version 0.15.4
import * as Data_Argonaut_Decode_Class from "../Data.Argonaut.Decode.Class/index.js";
import * as Data_Argonaut_Encode_Class from "../Data.Argonaut.Encode.Class/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var unsafeIndex1 = /* #__PURE__ */ Data_Array.unsafeIndex();
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Semigroup.semigroupArray);
var foldr = /* #__PURE__ */ Data_Foldable.foldr(Data_Foldable.foldableArray);
var foldl = /* #__PURE__ */ Data_Foldable.foldl(Data_Foldable.foldableArray);
var foldMap = /* #__PURE__ */ Data_Foldable.foldMap(Data_Foldable.foldableArray);
var fromJust = /* #__PURE__ */ Data_Maybe.fromJust();
var map2 = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var OSet = function (x) {
    return x;
};
var zipWithA = function (dictEq) {
    var nubEq = Data_Array.nubEq(dictEq);
    return function (dictApplicative) {
        var map3 = Data_Functor.map((dictApplicative.Apply0()).Functor0());
        var zipWithA1 = Data_Array.zipWithA(dictApplicative);
        return function (f) {
            return function (v) {
                return function (v1) {
                    return map3(function ($329) {
                        return OSet(nubEq($329));
                    })(zipWithA1(f)(v)(v1));
                };
            };
        };
    };
};
var zipWith = function (dictEq) {
    var nubEq = Data_Array.nubEq(dictEq);
    return function (f) {
        return function (v) {
            return function (v1) {
                return nubEq(Data_Array.zipWith(f)(v)(v1));
            };
        };
    };
};
var zip = function (v) {
    return function (v1) {
        return Data_Array.zip(v)(v1);
    };
};
var updateAtIndices = function (dictEq) {
    var nubEq = Data_Array.nubEq(dictEq);
    return function (dictFoldable) {
        var updateAtIndices1 = Data_Array.updateAtIndices(dictFoldable);
        return function (us) {
            return function (v) {
                return nubEq(updateAtIndices1(us)(v));
            };
        };
    };
};
var updateAt = function (dictEq) {
    var elem = Data_Array.elem(dictEq);
    return function (p) {
        return function (x) {
            return function (v) {
                var f = function (xs$prime) {
                    var $195 = elem(x)(v);
                    if ($195) {
                        return v;
                    };
                    return xs$prime;
                };
                return map1(f)(Data_Array.updateAt(p)(x)(v));
            };
        };
    };
};
var unzip = function (dictEq) {
    var nubEq = Data_Array.nubEq(dictEq);
    return function (dictEq1) {
        var nubEq1 = Data_Array.nubEq(dictEq1);
        return function (v) {
            var f = function (v1) {
                return new Data_Tuple.Tuple(nubEq(v1.value0), nubEq1(v1.value1));
            };
            return f(Data_Array.unzip(v));
        };
    };
};
var unsnoc = function (v) {
    var f = function (v1) {
        return {
            init: v1.init,
            last: v1.last
        };
    };
    return map1(f)(Data_Array.unsnoc(v));
};
var unsafeIndex = function () {
    return function (v) {
        return function (p) {
            return unsafeIndex1(v)(p);
        };
    };
};
var unionBy = function (dictEq) {
    var nubEq = Data_Array.nubEq(dictEq);
    return function (f) {
        return function (v) {
            return function (v1) {
                return nubEq(Data_Array.unionBy(f)(v)(v1));
            };
        };
    };
};
var union = function (dictEq) {
    var nubEq = Data_Array.nubEq(dictEq);
    var union1 = Data_Array.union(dictEq);
    return function (v) {
        return function (v1) {
            return nubEq(union1(v)(v1));
        };
    };
};
var uncons = function (v) {
    var f = function (v1) {
        return {
            head: v1.head,
            tail: v1.tail
        };
    };
    return map1(f)(Data_Array.uncons(v));
};
var toUnfoldable = function (dictUnfoldable) {
    var toUnfoldable1 = Data_Array.toUnfoldable(dictUnfoldable);
    return function (v) {
        return toUnfoldable1(v);
    };
};
var takeWhile = function (f) {
    return function (v) {
        return Data_Array.takeWhile(f)(v);
    };
};
var takeEnd = function (p) {
    return function (v) {
        return Data_Array.takeEnd(p)(v);
    };
};
var take = function (p) {
    return function (v) {
        return Data_Array.take(p)(v);
    };
};
var tail = function (v) {
    return map1(OSet)(Data_Array.tail(v));
};
var span = function (f) {
    return function (v) {
        var g = function (v1) {
            return {
                init: v1.init,
                rest: v1.rest
            };
        };
        return g(Data_Array.span(f)(v));
    };
};
var sortWith = function (dictOrd) {
    var sortWith1 = Data_Array.sortWith(dictOrd);
    return function (f) {
        return function (v) {
            return sortWith1(f)(v);
        };
    };
};
var sortBy = function (f) {
    return function (v) {
        return Data_Array.sortBy(f)(v);
    };
};
var sort = function (dictOrd) {
    var sort1 = Data_Array.sort(dictOrd);
    return function (v) {
        return sort1(v);
    };
};
var snoc = function (dictEq) {
    var elem = Data_Array.elem(dictEq);
    return function (v) {
        return function (x) {
            var $235 = elem(x)(v);
            if ($235) {
                return v;
            };
            return Data_Array.snoc(v)(x);
        };
    };
};
var slice = function (p) {
    return function (q) {
        return function (v) {
            return Data_Array.slice(p)(q)(v);
        };
    };
};
var singleton = function (a) {
    return [ a ];
};
var semigroupOSet = function (dictEq) {
    var nubEq = Data_Array.nubEq(dictEq);
    return {
        append: function (v) {
            return function (v1) {
                return nubEq(append(v)(v1));
            };
        }
    };
};
var reverse = function (v) {
    return Data_Array.reverse(v);
};
var range = function (a) {
    return function (b) {
        return Data_Array.range(a)(b);
    };
};
var partition = function (f) {
    return function (v) {
        var g = function (v1) {
            return {
                no: v1.no,
                yes: v1.yes
            };
        };
        return g(Data_Array.partition(f)(v));
    };
};
var $$null = function (v) {
    return Data_Array["null"](v);
};
var modifyAt = function (dictEq) {
    var nubEq = Data_Array.nubEq(dictEq);
    return function (p) {
        return function (f) {
            return function (v) {
                return map1(function ($330) {
                    return OSet(nubEq($330));
                })(Data_Array.modifyAt(p)(f)(v));
            };
        };
    };
};
var mapWithIndex = function (f) {
    return function (v) {
        return Data_Array.mapWithIndex(f)(v);
    };
};
var mapMaybe = function (f) {
    return function (v) {
        return Data_Array.mapMaybe(f)(v);
    };
};
var length = function (v) {
    return Data_Array.length(v);
};
var last = function (v) {
    return Data_Array.last(v);
};
var isEmpty = function (dictEq) {
    var eq = Data_Eq.eq(Data_Eq.eqArray(dictEq));
    return function (v) {
        return eq(v)([  ]);
    };
};
var intersectBy = function (f) {
    return function (v) {
        return function (v1) {
            return Data_Array.intersectBy(f)(v)(v1);
        };
    };
};
var intersect = function (dictEq) {
    var intersect1 = Data_Array.intersect(dictEq);
    return function (v) {
        return function (v1) {
            return intersect1(v)(v1);
        };
    };
};
var insertBy = function (dictEq) {
    var elem = Data_Array.elem(dictEq);
    return function (cmp) {
        return function (x) {
            return function (v) {
                var $266 = elem(x)(v);
                if ($266) {
                    return v;
                };
                return Data_Array.insertBy(cmp)(x)(v);
            };
        };
    };
};
var insertAt = function (dictEq) {
    var elem = Data_Array.elem(dictEq);
    return function (p) {
        return function (x) {
            return function (v) {
                var f = function (xs$prime) {
                    var $270 = elem(x)(v);
                    if ($270) {
                        return v;
                    };
                    return xs$prime;
                };
                return map1(f)(Data_Array.insertAt(p)(x)(v));
            };
        };
    };
};
var insert = function (dictOrd) {
    var elem = Data_Array.elem(dictOrd.Eq0());
    var insert1 = Data_Array.insert(dictOrd);
    return function (x) {
        return function (v) {
            var $273 = elem(x)(v);
            if ($273) {
                return v;
            };
            return insert1(x)(v);
        };
    };
};
var init = function (v) {
    return map1(OSet)(Data_Array.init(v));
};
var index = function (v) {
    return function (b) {
        return Data_Array.index(v)(b);
    };
};
var head = function (v) {
    return Data_Array.head(v);
};
var fromFoldable = function (dictFoldable) {
    var $331 = Data_Array.fromFoldable(dictFoldable);
    return function ($332) {
        return OSet($331($332));
    };
};
var foldableOSet = {
    foldr: function (f) {
        return function (x) {
            return function (v) {
                return foldr(f)(x)(v);
            };
        };
    },
    foldl: function (f) {
        return function (x) {
            return function (v) {
                return foldl(f)(x)(v);
            };
        };
    },
    foldMap: function (dictMonoid) {
        var foldMap1 = foldMap(dictMonoid);
        return function (f) {
            return function (v) {
                return foldMap1(f)(v);
            };
        };
    }
};
var foldl1 = /* #__PURE__ */ Data_Foldable.foldl(foldableOSet);
var foldRecM = function (dictMonadRec) {
    var foldRecM1 = Data_Array.foldRecM(dictMonadRec);
    return function (f) {
        return function (x) {
            return function (v) {
                return foldRecM1(f)(x)(v);
            };
        };
    };
};
var foldM = function (dictMonad) {
    var foldM1 = Data_Array.foldM(dictMonad);
    return function (f) {
        return function (x) {
            return function (v) {
                return foldM1(f)(x)(v);
            };
        };
    };
};
var findLastIndex = function (cmp) {
    return function (v) {
        return Data_Array.findLastIndex(cmp)(v);
    };
};
var findIndex = function (cmp) {
    return function (v) {
        return Data_Array.findIndex(cmp)(v);
    };
};
var filterA = function (dictApplicative) {
    var map3 = Data_Functor.map((dictApplicative.Apply0()).Functor0());
    var filterA1 = Data_Array.filterA(dictApplicative);
    return function (f) {
        return function (v) {
            return map3(OSet)(filterA1(f)(v));
        };
    };
};
var filter = function (f) {
    return function (v) {
        return Data_Array.filter(f)(v);
    };
};
var eqSet = function (dictEq) {
    var eq = Data_Eq.eq(Data_Eq.eqArray(dictEq));
    return {
        eq: function (v) {
            return function (v1) {
                return eq(v)(v1);
            };
        }
    };
};
var encodeJsonOSet = function (dictEncodeJson) {
    return Data_Argonaut_Encode_Class.encodeJsonArray(dictEncodeJson);
};
var empty = [  ];
var map = function (dictOrd) {
    var insert1 = insert(dictOrd);
    return function (f) {
        return foldl1(function (m) {
            return function (a) {
                return insert1(f(a))(m);
            };
        })(empty);
    };
};
var elemLastIndex = function (dictEq) {
    var elemLastIndex1 = Data_Array.elemLastIndex(dictEq);
    return function (a) {
        return function (v) {
            return elemLastIndex1(a)(v);
        };
    };
};
var elemIndex = function (dictEq) {
    var elemIndex1 = Data_Array.elemIndex(dictEq);
    return function (a) {
        return function (v) {
            return elemIndex1(a)(v);
        };
    };
};
var dropWhile = function (f) {
    return function (v) {
        return Data_Array.dropWhile(f)(v);
    };
};
var dropEnd = function (p) {
    return function (v) {
        return Data_Array.dropEnd(p)(v);
    };
};
var drop = function (p) {
    return function (v) {
        return Data_Array.drop(p)(v);
    };
};
var difference = function (dictEq) {
    var difference1 = Data_Array.difference(dictEq);
    return function (v) {
        return function (v1) {
            return difference1(v)(v1);
        };
    };
};
var subset = function (dictEq) {
    var isEmpty1 = isEmpty(dictEq);
    var difference1 = difference(dictEq);
    return function (s1) {
        return function (s2) {
            return isEmpty1(difference1(s1)(s2));
        };
    };
};
var properSubset = function (dictEq) {
    var subset1 = subset(dictEq);
    var notEq = Data_Eq.notEq(eqSet(dictEq));
    return function (s1) {
        return function (s2) {
            return subset1(s1)(s2) && notEq(s1)(s2);
        };
    };
};
var deleteWith = function (f) {
    return function (v) {
        if (v.length === 0) {
            return v;
        };
        return Data_Maybe.maybe(v)(function (i) {
            return fromJust(Data_Array.deleteAt(i)(v));
        })(Data_Array.findIndex(f)(v));
    };
};
var deleteAt = function (p) {
    return function (v) {
        return map1(OSet)(Data_Array.deleteAt(p)(v));
    };
};
var $$delete = function (dictEq) {
    var delete1 = Data_Array["delete"](dictEq);
    return function (x) {
        return function (v) {
            return delete1(x)(v);
        };
    };
};
var decodeJsonOSet = function (dictDecodeJson) {
    return Data_Argonaut_Decode_Class.decodeArray(dictDecodeJson);
};
var cons = function (dictEq) {
    var elem = Data_Array.elem(dictEq);
    return function (x) {
        return function (v) {
            var $322 = elem(x)(v);
            if ($322) {
                return v;
            };
            return Data_Array.cons(x)(v);
        };
    };
};
var concat = function (dictEq) {
    var nubEq = Data_Array.nubEq(dictEq);
    return function (v) {
        return nubEq(Data_Array.concat(map2(function (v1) {
            return v1;
        })(v)));
    };
};
var catMaybes = function (v) {
    return Data_Array.catMaybes(v);
};
var alterAt = function (dictEq) {
    var nubEq = Data_Array.nubEq(dictEq);
    return function (p) {
        return function (f) {
            return function (v) {
                return map1(function ($333) {
                    return OSet(nubEq($333));
                })(Data_Array.alterAt(p)(f)(v));
            };
        };
    };
};
export {
    fromFoldable,
    toUnfoldable,
    empty,
    isEmpty,
    singleton,
    subset,
    properSubset,
    map,
    range,
    $$null as null,
    length,
    cons,
    snoc,
    insert,
    insertBy,
    head,
    last,
    tail,
    init,
    uncons,
    unsnoc,
    index,
    elemIndex,
    elemLastIndex,
    findIndex,
    findLastIndex,
    insertAt,
    deleteAt,
    updateAt,
    updateAtIndices,
    modifyAt,
    alterAt,
    reverse,
    concat,
    filter,
    partition,
    filterA,
    mapMaybe,
    catMaybes,
    mapWithIndex,
    sort,
    sortBy,
    sortWith,
    slice,
    take,
    takeWhile,
    drop,
    dropWhile,
    span,
    union,
    unionBy,
    $$delete as delete,
    deleteWith,
    difference,
    intersect,
    intersectBy,
    zipWith,
    zipWithA,
    zip,
    unzip,
    foldM,
    foldRecM,
    unsafeIndex,
    eqSet,
    semigroupOSet,
    foldableOSet,
    encodeJsonOSet,
    decodeJsonOSet
};
export {
    all,
    any,
    elem,
    find,
    findMap,
    fold,
    foldMap,
    foldl,
    foldr,
    intercalate,
    notElem
} from "../Data.Foldable/index.js";
export {
    scanl,
    scanr
} from "../Data.Traversable/index.js";
