// Generated by purs version 0.15.4
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Data_Argonaut_Parser from "../Data.Argonaut.Parser/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Bifunctor from "../Data.Bifunctor/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_String_CodePoints from "../Data.String.CodePoints/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Traversable from "../Data.Traversable/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Parsing from "../Parsing/index.js";
import * as Parsing_String from "../Parsing.String/index.js";
import * as Parsing_String_Basic from "../Parsing.String.Basic/index.js";
import * as PureScript_CST from "../PureScript.CST/index.js";
import * as PureScript_CST_Types from "../PureScript.CST.Types/index.js";
import * as TsBridgeGen_Types from "../TsBridgeGen.Types/index.js";
var pure = /* #__PURE__ */ Control_Applicative.pure(Data_Maybe.applicativeMaybe);
var mapFlipped = /* #__PURE__ */ Data_Functor.mapFlipped(Data_Maybe.functorMaybe);
var sequence = /* #__PURE__ */ Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe);
var bind = /* #__PURE__ */ Control_Bind.bind(Control_Bind.bindArray);
var fromFoldable = /* #__PURE__ */ Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordString);
var bind1 = /* #__PURE__ */ Control_Bind.bind(Parsing.bindParserT);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(Parsing.applicativeParserT);
var alt = /* #__PURE__ */ Control_Alt.alt(Parsing.altParserT);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var lmap = /* #__PURE__ */ Data_Bifunctor.lmap(Data_Bifunctor.bifunctorEither);
var pure2 = /* #__PURE__ */ Control_Applicative.pure(Data_Either.applicativeEither);
var throwError = /* #__PURE__ */ Control_Monad_Error_Class.throwError(Control_Monad_Error_Class.monadThrowEither);
var map = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var elem = /* #__PURE__ */ Data_Array.elem(Data_Eq.eqString);
var positionToSourcePosition = function (v) {
    return {
        line: v.line - 1 | 0,
        column: v.column - 1 | 0
    };
};
var parseUserImports = function (s) {
    var f = function (v) {
        if (v === "") {
            return [  ];
        };
        var v1 = PureScript_CST.parseImportDecl(v);
        if (v1 instanceof PureScript_CST.ParseSucceeded) {
            if (v1.value0.qualified instanceof Data_Maybe.Just) {
                var v2 = Data_String_CodeUnits.stripPrefix("Auto.")(v1.value0.qualified.value0.value1.name);
                if (v2 instanceof Data_Maybe.Just) {
                    return [  ];
                };
                if (v2 instanceof Data_Maybe.Nothing) {
                    return [ pure(v) ];
                };
                throw new Error("Failed pattern match at TsBridgeGen.Core (line 188, column 79 - line 190, column 31): " + [ v2.constructor.name ]);
            };
            return [ pure(v) ];
        };
        return [ Data_Maybe.Nothing.value ];
    };
    return mapFlipped(sequence(bind(Data_String_Common.split("\x0a")(s))(f)))(fromFoldable);
};
var parseJsonError = function (dictMonad) {
    var anyTill = Parsing_String.anyTill(dictMonad);
    var p2 = bind1(Parsing_String.string("Unexpected token "))(function () {
        return bind1(anyTill(Parsing_String.string(" ")))(function (v) {
            return bind1(Parsing_String.string("in JSON at position "))(function () {
                return bind1(Parsing_String_Basic.intDecimal)(function (i) {
                    return bind1(Parsing_String.eof)(function () {
                        return pure1(new TsBridgeGen_Types.UnexpectedTokenAtPos(v.value0, i));
                    });
                });
            });
        });
    });
    var p1 = bind1(Parsing_String.string("Unexpected end of JSON input"))(function () {
        return bind1(Parsing_String.eof)(function () {
            return pure1(TsBridgeGen_Types.UnexpectedEndOfInput.value);
        });
    });
    return alt(p1)(p2);
};
var parseJsonError1 = /* #__PURE__ */ parseJsonError(Data_Identity.monadIdentity);
var parseToJson = function (s) {
    var f = function (e) {
        return Data_Either.either(Data_Function["const"](new TsBridgeGen_Types.Other(e)))(identity)(Parsing.runParser(e)(parseJsonError1));
    };
    return lmap(f)(Data_Argonaut_Parser.jsonParser(s));
};
var parseCstModule = function (mod) {
    var v = PureScript_CST.parseModule(mod);
    if (v instanceof PureScript_CST.ParseSucceeded) {
        return pure2(v.value0);
    };
    return throwError(TsBridgeGen_Types.ErrParseModule.value);
};
var indexToSourcePos = function (v) {
    return function (v1) {
        if (v1 < 0) {
            return Data_Maybe.Nothing.value;
        };
        var go = function ($copy_line) {
            return function ($copy_idx) {
                return function ($copy_xs) {
                    var $tco_var_line = $copy_line;
                    var $tco_var_idx = $copy_idx;
                    var $tco_done = false;
                    var $tco_result;
                    function $tco_loop(line, idx, xs) {
                        var v2 = Data_Array.uncons(xs);
                        if (v2 instanceof Data_Maybe.Just) {
                            var len = Data_String_CodePoints.length(v2.value0.head);
                            var $59 = v1 < (idx + len | 0);
                            if ($59) {
                                $tco_done = true;
                                return new Data_Maybe.Just({
                                    line: line,
                                    column: v1 - idx | 0
                                });
                            };
                            $tco_var_line = line + 1 | 0;
                            $tco_var_idx = idx + len | 0;
                            $copy_xs = v2.value0.tail;
                            return;
                        };
                        if (v2 instanceof Data_Maybe.Nothing) {
                            $tco_done = true;
                            return Data_Maybe.Nothing.value;
                        };
                        throw new Error("Failed pattern match at TsBridgeGen.Core (line 142, column 20 - line 150, column 23): " + [ v2.constructor.name ]);
                    };
                    while (!$tco_done) {
                        $tco_result = $tco_loop($tco_var_line, $tco_var_idx, $copy_xs);
                    };
                    return $tco_result;
                };
            };
        };
        return go(0)(0)(Data_String_Common.split("\x0a")(v));
    };
};
var getPursDef = function (v) {
    if (v instanceof PureScript_CST_Types.DeclData && v.value0.vars.length === 0) {
        return new Data_Maybe.Just(new TsBridgeGen_Types.DefData(v.value0.name.name));
    };
    if (v instanceof PureScript_CST_Types.DeclData) {
        return new Data_Maybe.Just(new TsBridgeGen_Types.DefUnsupportedInstAndExport(v.value0.name.name, "data type with arguments"));
    };
    if (v instanceof PureScript_CST_Types.DeclSignature) {
        return new Data_Maybe.Just(new TsBridgeGen_Types.DefUnsupportedExport(v.value0.label.name, "value"));
    };
    if (v instanceof PureScript_CST_Types.DeclNewtype && v.value0.vars.length === 0) {
        return new Data_Maybe.Just(new TsBridgeGen_Types.DefUnsupportedInstAndExport(v.value0.name.name, "newtype"));
    };
    if (v instanceof PureScript_CST_Types.DeclType && v.value0.vars.length === 0) {
        return new Data_Maybe.Just(new TsBridgeGen_Types.DefUnsupportedExport(v.value0.name.name, "type alias"));
    };
    if (v instanceof PureScript_CST_Types.DeclType) {
        return new Data_Maybe.Just(new TsBridgeGen_Types.DefUnsupportedExport(v.value0.name.name, "type alias with arguments"));
    };
    if (v instanceof PureScript_CST_Types.DeclForeign && v.value2 instanceof PureScript_CST_Types.ForeignValue) {
        return new Data_Maybe.Just(new TsBridgeGen_Types.DefUnsupportedExport(v.value2.value0.label.name, "foreign import"));
    };
    if (v instanceof PureScript_CST_Types.DeclForeign && v.value2 instanceof PureScript_CST_Types.ForeignData) {
        return new Data_Maybe.Just(new TsBridgeGen_Types.DefUnsupportedInstAndExport(v.value2.value1.label.name, "foreign import"));
    };
    return Data_Maybe.Nothing.value;
};
var getName = function (v) {
    if (v instanceof TsBridgeGen_Types.DefData) {
        return v.value0;
    };
    if (v instanceof TsBridgeGen_Types.DefData) {
        return v.value0;
    };
    if (v instanceof TsBridgeGen_Types.DefNewtype) {
        return v.value0;
    };
    if (v instanceof TsBridgeGen_Types.DefType) {
        return v.value0;
    };
    if (v instanceof TsBridgeGen_Types.DefValue) {
        return v.value0;
    };
    if (v instanceof TsBridgeGen_Types.DefUnsupportedInstAndExport) {
        return v.value0;
    };
    if (v instanceof TsBridgeGen_Types.DefUnsupportedExport) {
        return v.value0;
    };
    throw new Error("Failed pattern match at TsBridgeGen.Core (line 128, column 11 - line 135, column 32): " + [ v.constructor.name ]);
};
var exportToName = function (v) {
    if (v instanceof PureScript_CST_Types.ExportType) {
        return v.value0.name;
    };
    return "";
};
var isExported = function (v) {
    return function (v1) {
        if (v.exports instanceof Data_Maybe.Nothing) {
            return true;
        };
        if (v.exports instanceof Data_Maybe.Just) {
            var exports$prime = map(exportToName)(Data_Array.cons(v.exports.value0.value.head)(map(Data_Tuple.snd)(v.exports.value0.value.tail)));
            return elem((function (v2) {
                return v2;
            })(getName(v1)))(exports$prime);
        };
        throw new Error("Failed pattern match at TsBridgeGen.Core (line 44, column 1 - line 44, column 58): " + [ v.constructor.name, v1.constructor.name ]);
    };
};
var getPursModule = function (module_) {
    return new TsBridgeGen_Types.PursModule(module_.header.name.name, Data_Array.filter(isExported(module_.header))(Data_Array.catMaybes(map(getPursDef)(module_.body.decls))));
};
export {
    parseCstModule,
    getPursModule,
    isExported,
    exportToName,
    getPursDef,
    getName,
    indexToSourcePos,
    positionToSourcePosition,
    parseToJson,
    parseJsonError,
    parseUserImports
};
