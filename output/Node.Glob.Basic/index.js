// Generated by purs version 0.15.4
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Control_Monad_Error_Class from "../Control.Monad.Error.Class/index.js";
import * as Control_Parallel_Class from "../Control.Parallel.Class/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_FoldableWithIndex from "../Data.FoldableWithIndex/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_List from "../Data.List/index.js";
import * as Data_List_Types from "../Data.List.Types/index.js";
import * as Data_Map from "../Data.Map/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Set from "../Data.Set/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Effect_Ref from "../Effect.Ref/index.js";
import * as Node_FS_Aff from "../Node.FS.Aff/index.js";
import * as Node_FS_Stats from "../Node.FS.Stats/index.js";
import * as Node_Path from "../Node.Path/index.js";
import * as Node_Process from "../Node.Process/index.js";
var fromFoldable1 = /* #__PURE__ */ Data_List.fromFoldable(Data_Foldable.foldableArray);
var eq1 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_List_Types.eqList(Data_Eq.eqString));
var compare = /* #__PURE__ */ Data_Ord.compare(/* #__PURE__ */ Data_List_Types.ordList(Data_Ord.ordString));
var foldMap = /* #__PURE__ */ Data_Foldable.foldMap(Data_Set.foldableSet);
var bind = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
var insert = /* #__PURE__ */ Data_Map_Internal.insert(Data_Ord.ordString);
var catchError = /* #__PURE__ */ Control_Monad_Error_Class.catchError(Effect_Aff.monadErrorAff);
var map = /* #__PURE__ */ Data_Functor.map(Effect_Aff.functorAff);
var sequential = /* #__PURE__ */ Control_Parallel_Class.sequential(Effect_Aff.parallelAff);
var forWithIndex_ = /* #__PURE__ */ Data_FoldableWithIndex.forWithIndex_(Effect_Aff.applicativeParAff);
var forWithIndex_1 = /* #__PURE__ */ forWithIndex_(Data_Map.foldableWithIndexSemigroupMap);
var parallel = /* #__PURE__ */ Control_Parallel_Class.parallel(Effect_Aff.parallelAff);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff);
var when = /* #__PURE__ */ Control_Applicative.when(Effect_Aff.applicativeAff);
var mempty = /* #__PURE__ */ Data_Monoid.mempty(/* #__PURE__ */ Effect_Aff.monoidAff(Data_Monoid.monoidUnit));
var fromFoldableWith = /* #__PURE__ */ Data_Map_Internal.fromFoldableWith(Data_Ord.ordString)(Data_Foldable.foldableArray);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Functor.functorArray);
var forWithIndex_2 = /* #__PURE__ */ forWithIndex_(Data_Map_Internal.foldableWithIndexMap);
var GlobStar = /* #__PURE__ */ (function () {
    function GlobStar() {

    };
    GlobStar.value = new GlobStar();
    return GlobStar;
})();
var GlobSegment = /* #__PURE__ */ (function () {
    function GlobSegment(value0) {
        this.value0 = value0;
    };
    GlobSegment.create = function (value0) {
        return new GlobSegment(value0);
    };
    return GlobSegment;
})();
var Match = /* #__PURE__ */ (function () {
    function Match() {

    };
    Match.value = new Match();
    return Match;
})();
var MatchMore = /* #__PURE__ */ (function () {
    function MatchMore(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    MatchMore.create = function (value0) {
        return function (value1) {
            return new MatchMore(value0, value1);
        };
    };
    return MatchMore;
})();
var rootOrRelative = function (pwd) {
    return function (v) {
        if (v instanceof Data_List_Types.Cons && (v.value0 instanceof GlobSegment && (v.value0.value0 instanceof Data_List_Types.Cons && (v.value0.value0.value0 === "" && v.value0.value0.value1 instanceof Data_List_Types.Nil)))) {
            return new Data_Tuple.Tuple(Node_Path.sep, Data_Set.singleton(v.value1));
        };
        return new Data_Tuple.Tuple(pwd, Data_Set.singleton(v));
    };
};
var matchSegment = /* #__PURE__ */ (function () {
    var go2 = function ($copy_str) {
        return function ($copy_v) {
            var $tco_var_str = $copy_str;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(str, v) {
                if (v instanceof Data_List_Types.Nil) {
                    $tco_done = true;
                    return str === "";
                };
                if (v instanceof Data_List_Types.Cons && (v.value0 === "" && v.value1 instanceof Data_List_Types.Nil)) {
                    $tco_done = true;
                    return true;
                };
                if (v instanceof Data_List_Types.Cons && v.value0 === "") {
                    $tco_var_str = str;
                    $copy_v = v.value1;
                    return;
                };
                if (v instanceof Data_List_Types.Cons) {
                    var v1 = Data_String_CodeUnits.indexOf(v.value0)(str);
                    if (v1 instanceof Data_Maybe.Nothing) {
                        $tco_done = true;
                        return false;
                    };
                    if (v1 instanceof Data_Maybe.Just) {
                        $tco_var_str = Data_String_CodeUnits.drop(v1.value0 + Data_String_CodeUnits.length(v.value0) | 0)(str);
                        $copy_v = v.value1;
                        return;
                    };
                    throw new Error("Failed pattern match at Node.Glob.Basic (line 194, column 7 - line 196, column 61): " + [ v1.constructor.name ]);
                };
                throw new Error("Failed pattern match at Node.Glob.Basic (line 189, column 13 - line 196, column 61): " + [ v.constructor.name ]);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_str, $copy_v);
            };
            return $tco_result;
        };
    };
    var go1 = function (str) {
        return function (v) {
            if (v instanceof Data_List_Types.Nil) {
                return str === "";
            };
            if (v instanceof Data_List_Types.Cons && v.value0 === "") {
                return go2(str)(v.value1);
            };
            if (v instanceof Data_List_Types.Cons) {
                var v1 = Data_String_CodeUnits.stripPrefix(v.value0)(str);
                if (v1 instanceof Data_Maybe.Nothing) {
                    return false;
                };
                if (v1 instanceof Data_Maybe.Just) {
                    return go2(v1.value0)(v.value1);
                };
                throw new Error("Failed pattern match at Node.Glob.Basic (line 185, column 7 - line 187, column 33): " + [ v1.constructor.name ]);
            };
            throw new Error("Failed pattern match at Node.Glob.Basic (line 181, column 13 - line 187, column 33): " + [ v.constructor.name ]);
        };
    };
    return go1;
})();
var isMatch = function (v) {
    if (v instanceof Data_Maybe.Just && v.value0 instanceof Match) {
        return true;
    };
    return false;
};
var fromString = function (v) {
    if (v === "**") {
        return GlobStar.value;
    };
    return new GlobSegment(fromFoldable1(Data_String_Common.split("*")(v)));
};
var fromFoldable = function (dictFoldable) {
    return Data_Foldable.foldr(dictFoldable)(function ($162) {
        return Data_List_Types.Cons.create(fromString($162));
    })(Data_List_Types.Nil.value);
};
var fromFoldable2 = /* #__PURE__ */ fromFoldable(Data_Foldable.foldableArray);
var fromPathWithSeparator = function (sep) {
    var $163 = Data_String_Common.split(sep);
    return function ($164) {
        return fromFoldable2($163($164));
    };
};
var fixupGlobPath = function (glob) {
    if (Node_Path.sep !== "/") {
        return Data_String_Common.replaceAll("/")(Node_Path.sep)(glob);
    };
    if (Data_Boolean.otherwise) {
        return glob;
    };
    throw new Error("Failed pattern match at Node.Glob.Basic (line 96, column 1 - line 96, column 34): " + [ glob.constructor.name ]);
};
var fixedPrefix = function (v) {
    if (v instanceof Data_List_Types.Cons && (v.value0 instanceof GlobSegment && (v.value0.value0 instanceof Data_List_Types.Cons && (v.value0.value0.value1 instanceof Data_List_Types.Nil && v.value0.value0.value0 !== "")))) {
        var $116 = Data_List["null"](v.value1);
        if ($116) {
            return new Data_Maybe.Just(Data_Map_Internal.singleton(v.value0.value0.value0)(Match.value));
        };
        return new Data_Maybe.Just(Data_Map_Internal.singleton(v.value0.value0.value0)(new MatchMore(false, Data_Set.singleton(v.value1))));
    };
    return Data_Maybe.Nothing.value;
};
var eqGlob = {
    eq: function (x) {
        return function (y) {
            if (x instanceof GlobStar && y instanceof GlobStar) {
                return true;
            };
            if (x instanceof GlobSegment && y instanceof GlobSegment) {
                return eq1(x.value0)(y.value0);
            };
            return false;
        };
    }
};
var ordGlob = {
    compare: function (x) {
        return function (y) {
            if (x instanceof GlobStar && y instanceof GlobStar) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof GlobStar) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof GlobStar) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof GlobSegment && y instanceof GlobSegment) {
                return compare(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at Node.Glob.Basic (line 0, column 0 - line 0, column 0): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqGlob;
    }
};
var ordList = /* #__PURE__ */ Data_List_Types.ordList(ordGlob);
var fromFoldable3 = /* #__PURE__ */ Data_Set.fromFoldable(Data_Foldable.foldableArray)(ordList);
var append = /* #__PURE__ */ Data_Semigroup.append(/* #__PURE__ */ Data_Set.semigroupSet(ordList));
var monoidSet = /* #__PURE__ */ Data_Set.monoidSet(ordList);
var mempty1 = /* #__PURE__ */ Data_Monoid.mempty(monoidSet);
var matchListing = function (path) {
    return function (v) {
        if (v instanceof Data_List_Types.Cons && (v.value0 instanceof GlobStar && (v.value1 instanceof Data_List_Types.Cons && v.value1.value0 instanceof GlobStar))) {
            return matchListing(path)(new Data_List_Types.Cons(GlobStar.value, v.value1.value1));
        };
        if (v instanceof Data_List_Types.Cons && v.value0 instanceof GlobStar) {
            return new Data_Maybe.Just(new MatchMore(isMatch(matchListing(path)(v.value1)), fromFoldable3([ v.value1, new Data_List_Types.Cons(GlobStar.value, v.value1) ])));
        };
        if (v instanceof Data_List_Types.Cons && v.value0 instanceof GlobSegment) {
            var $137 = matchSegment(path)(v.value0.value0);
            if ($137) {
                var $138 = Data_List["null"](v.value1);
                if ($138) {
                    return new Data_Maybe.Just(Match.value);
                };
                return new Data_Maybe.Just(new MatchMore(false, Data_Set.singleton(v.value1)));
            };
            return Data_Maybe.Nothing.value;
        };
        if (v instanceof Data_List_Types.Nil) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at Node.Glob.Basic (line 162, column 21 - line 176, column 12): " + [ v.constructor.name ]);
    };
};
var semigroupMatch = {
    append: function (a) {
        return function (b) {
            if (a instanceof MatchMore) {
                if (b instanceof MatchMore) {
                    return new MatchMore(a.value0 || b.value0, append(a.value1)(b.value1));
                };
                return a;
            };
            if (a instanceof Match) {
                if (b instanceof MatchMore) {
                    return new MatchMore(true, b.value1);
                };
                return a;
            };
            throw new Error("Failed pattern match at Node.Glob.Basic (line 151, column 5 - line 159, column 17): " + [ a.constructor.name ]);
        };
    }
};
var monoidSemigroupMap = /* #__PURE__ */ Data_Map.monoidSemigroupMap(Data_Ord.ordString)(semigroupMatch);
var foldMap1 = /* #__PURE__ */ Data_Foldable.foldMap(Data_List_Types.foldableList)(monoidSemigroupMap);
var foldMap2 = /* #__PURE__ */ Data_Foldable.foldMap(Data_Foldable.foldableMaybe)(monoidSemigroupMap);
var foldMap3 = /* #__PURE__ */ foldMap(/* #__PURE__ */ Data_Maybe.monoidMaybe(semigroupMatch));
var foldMap4 = /* #__PURE__ */ foldMap(/* #__PURE__ */ Data_Monoid.monoidRecord()(/* #__PURE__ */ Data_Monoid.monoidRecordCons({
    reflectSymbol: function () {
        return "left";
    }
})(monoidSet)()(/* #__PURE__ */ Data_Monoid.monoidRecordCons({
    reflectSymbol: function () {
        return "right";
    }
})(monoidSemigroupMap)()(Data_Monoid.monoidRecordNil))));
var mempty2 = /* #__PURE__ */ Data_Monoid.mempty(monoidSemigroupMap);
var monoidAff = /* #__PURE__ */ Effect_Aff.monoidAff(monoidSemigroupMap);
var guard = /* #__PURE__ */ Data_Monoid.guard(monoidAff);
var mempty3 = /* #__PURE__ */ Data_Monoid.mempty(/* #__PURE__ */ Data_Monoid.monoidFn(monoidAff));
var append1 = /* #__PURE__ */ Data_Semigroup.append(/* #__PURE__ */ Data_Map.semigroupSemigroupMap(Data_Ord.ordString)(semigroupMatch));
var match = function (globs) {
    return foldMap1(function (path) {
        return foldMap2((function () {
            var $165 = Data_Map_Internal.singleton(path);
            return function ($166) {
                return Data_Map.SemigroupMap($165($166));
            };
        })())(foldMap3(matchListing(path))(globs));
    });
};
var expandGlobsWithStats = function (pwd) {
    return function (initGlobs) {
        return bind(liftEffect(Effect_Ref["new"](Data_Map_Internal.empty)))(function (result) {
            var insertMatch = function (path) {
                return function (stat) {
                    return liftEffect(Effect_Ref.modify_(insert(path)(stat))(result));
                };
            };
            var go = function (cwd) {
                return function (globs) {
                    var prefix = foldMap4(function (glob) {
                        var v = fixedPrefix(glob);
                        if (v instanceof Data_Maybe.Nothing) {
                            return {
                                left: Data_Set.singleton(glob),
                                right: mempty2
                            };
                        };
                        if (v instanceof Data_Maybe.Just) {
                            return {
                                left: mempty1,
                                right: v.value0
                            };
                        };
                        throw new Error("Failed pattern match at Node.Glob.Basic (line 64, column 11 - line 66, column 51): " + [ v.constructor.name ]);
                    })(globs);
                    return bind(guard(!Data_Set.isEmpty(prefix.left))(Data_Function.flip(catchError)(mempty3)(map((function () {
                        var $167 = match(prefix.left);
                        return function ($168) {
                            return $167(fromFoldable1($168));
                        };
                    })())(Node_FS_Aff.readdir(cwd)))))(function (dirMatches) {
                        return sequential(forWithIndex_1(append1(prefix.right)(dirMatches))(function (path) {
                            return function (m) {
                                return parallel((function () {
                                    var fullPath = Node_Path.concat([ cwd, path ]);
                                    return bind(Effect_Aff.attempt(Node_FS_Aff.stat(fullPath)))(function (v) {
                                        if (m instanceof MatchMore && (v instanceof Data_Either.Right && Node_FS_Stats.isDirectory(v.value0))) {
                                            return discard(when(m.value0)(insertMatch(fullPath)(v.value0)))(function () {
                                                return go(fullPath)(m.value1);
                                            });
                                        };
                                        if (m instanceof MatchMore && (m.value0 && v instanceof Data_Either.Right)) {
                                            return insertMatch(fullPath)(v.value0);
                                        };
                                        if (m instanceof Match && v instanceof Data_Either.Right) {
                                            return insertMatch(fullPath)(v.value0);
                                        };
                                        return mempty;
                                    });
                                })());
                            };
                        }));
                    });
                };
            };
            var globsWithDir = fromFoldableWith(append)(map1((function () {
                var $169 = rootOrRelative(pwd);
                var $170 = fromPathWithSeparator(Node_Path.sep);
                return function ($171) {
                    return $169($170(fixupGlobPath($171)));
                };
            })())(initGlobs));
            return discard(sequential(forWithIndex_2(globsWithDir)(function (dir) {
                return function (globs) {
                    return parallel(go(dir)(globs));
                };
            })))(function () {
                return liftEffect(Effect_Ref.read(result));
            });
        });
    };
};
var expandGlobs = function (pwd) {
    var $172 = map(Data_Map.keys);
    var $173 = expandGlobsWithStats(pwd);
    return function ($174) {
        return $172($173($174));
    };
};
var expandGlobsCwd = function (globs) {
    return bind(liftEffect(Node_Process.cwd))(function (cwd) {
        return expandGlobs(cwd)(globs);
    });
};
var expandGlobsWithStatsCwd = function (globs) {
    return bind(liftEffect(Node_Process.cwd))(function (cwd) {
        return expandGlobsWithStats(cwd)(globs);
    });
};
export {
    expandGlobs,
    expandGlobsCwd,
    expandGlobsWithStats,
    expandGlobsWithStatsCwd
};
