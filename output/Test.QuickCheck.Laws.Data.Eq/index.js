// Generated by purs version 0.15.4
import * as Control_Apply from "../Control.Apply/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Test_QuickCheck from "../Test.QuickCheck/index.js";
import * as Test_QuickCheck_Arbitrary from "../Test.QuickCheck.Arbitrary/index.js";
import * as Test_QuickCheck_Gen from "../Test.QuickCheck.Gen/index.js";
var quickCheck$prime = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableGen(Test_QuickCheck.testableBoolean));
var map = /* #__PURE__ */ Data_Functor.map(Test_QuickCheck_Gen.functorGen);
var lift2 = /* #__PURE__ */ Control_Apply.lift2(Test_QuickCheck_Gen.applyGen);
var lift3 = /* #__PURE__ */ Control_Apply.lift3(Test_QuickCheck_Gen.applyGen);
var checkEqGen = function (dictEq) {
    var eq1 = Data_Eq.eq(dictEq);
    var notEq = Data_Eq.notEq(dictEq);
    return function (gen) {
        var transitivity = function (x) {
            return function (y) {
                return function (z) {
                    var $18 = eq1(x)(y) && eq1(y)(z);
                    if ($18) {
                        return eq1(x)(z);
                    };
                    return true;
                };
            };
        };
        var symmetry = function (x) {
            return function (y) {
                return eq1(x)(y) === eq1(y)(x);
            };
        };
        var reflexivity = function (x) {
            return eq1(x)(x) === true;
        };
        var negation = function (x) {
            return function (y) {
                return notEq(x)(y) === !eq1(x)(y);
            };
        };
        return function __do() {
            Effect_Console.log("Checking 'Reflexivity' law for Eq")();
            quickCheck$prime(1000)(map(reflexivity)(gen))();
            Effect_Console.log("Checking 'Symmetry' law for Eq")();
            quickCheck$prime(1000)(lift2(symmetry)(gen)(gen))();
            Effect_Console.log("Checking 'Transitivity' law for Eq")();
            quickCheck$prime(1000)(lift3(transitivity)(gen)(gen)(gen))();
            Effect_Console.log("Checking 'Negation' law for Eq")();
            return quickCheck$prime(1000)(lift2(negation)(gen)(gen))();
        };
    };
};
var checkEq = function (dictArbitrary) {
    var arbitrary = Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary);
    return function (dictEq) {
        var checkEqGen1 = checkEqGen(dictEq);
        return function (v) {
            return checkEqGen1(arbitrary);
        };
    };
};
export {
    checkEq,
    checkEqGen
};
