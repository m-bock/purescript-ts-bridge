// Generated by purs version 0.15.4
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Test_QuickCheck from "../Test.QuickCheck/index.js";
import * as Test_QuickCheck_Arbitrary from "../Test.QuickCheck.Arbitrary/index.js";
import * as Test_QuickCheck_Gen from "../Test.QuickCheck.Gen/index.js";
import * as Test_QuickCheck_Laws from "../Test.QuickCheck.Laws/index.js";
var quickCheck$prime = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableGen(Test_QuickCheck.testableBoolean));
var lift3 = /* #__PURE__ */ Control_Apply.lift3(Test_QuickCheck_Gen.applyGen);
var quickCheck$prime1 = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableGen(/* #__PURE__ */ Test_QuickCheck.testableFunction(/* #__PURE__ */ Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryA)(Test_QuickCheck_Laws.arbitraryB))(Test_QuickCheck.testableBoolean)));
var lift2 = /* #__PURE__ */ Control_Apply.lift2(Test_QuickCheck_Gen.applyGen);
var checkAltGen = function (dictAlt) {
    var map = Data_Functor.map(dictAlt.Functor0());
    var alt = Control_Alt.alt(dictAlt);
    return function (dictEq) {
        var eq = Data_Eq.eq(dictEq);
        return function (dictEq1) {
            var eq1 = Data_Eq.eq(dictEq1);
            return function (gen) {
                var distributivity = function (x) {
                    return function (y) {
                        return function (f) {
                            return eq1(map(f)(alt(x)(y)))(alt(map(f)(x))(map(f)(y)));
                        };
                    };
                };
                var associativity = function (x) {
                    return function (y) {
                        return function (z) {
                            return eq(alt(alt(x)(y))(z))(alt(x)(alt(y)(z)));
                        };
                    };
                };
                return function __do() {
                    Effect_Console.log("Checking 'Associativity' law for Alt")();
                    quickCheck$prime(1000)(lift3(associativity)(gen)(gen)(gen))();
                    Effect_Console.log("Checking 'Distributivity' law for Alt")();
                    return quickCheck$prime1(1000)(lift2(distributivity)(gen)(gen))();
                };
            };
        };
    };
};
var checkAlt = function (dictAlt) {
    var checkAltGen1 = checkAltGen(dictAlt);
    return function (dictArbitrary) {
        var arbitrary = Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary);
        return function (dictEq) {
            var checkAltGen2 = checkAltGen1(dictEq);
            return function (dictEq1) {
                var checkAltGen3 = checkAltGen2(dictEq1);
                return function (v) {
                    return checkAltGen3(arbitrary);
                };
            };
        };
    };
};
export {
    checkAlt,
    checkAltGen
};
