// Generated by purs version 0.15.4
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Category from "../Control.Category/index.js";
import * as Data_Array from "../Data.Array/index.js";
import * as Data_Array_NonEmpty from "../Data.Array.NonEmpty/index.js";
import * as Data_Array_NonEmpty_Internal from "../Data.Array.NonEmpty.Internal/index.js";
import * as Data_Boolean from "../Data.Boolean/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Dodo from "../Dodo/index.js";
import * as Dodo_Internal from "../Dodo.Internal/index.js";
import * as Tidy_Doc from "../Tidy.Doc/index.js";
var append = /* #__PURE__ */ Data_Semigroup.append(Data_Array_NonEmpty_Internal.semigroupNonEmptyArray);
var pure = /* #__PURE__ */ Control_Applicative.pure(Data_Array_NonEmpty_Internal.applicativeNonEmptyArray);
var append1 = /* #__PURE__ */ Data_Semigroup.append(Dodo_Internal.semigroupDoc);
var eq = /* #__PURE__ */ Data_Eq.eq(Tidy_Doc.eqForceBreak);
var mempty = /* #__PURE__ */ Data_Monoid.mempty(Dodo_Internal.monoidDoc);
var notEq = /* #__PURE__ */ Data_Eq.notEq(Tidy_Doc.eqForceBreak);
var max = /* #__PURE__ */ Data_Ord.max(Tidy_Doc.ordForceBreak);
var mempty1 = /* #__PURE__ */ Data_Monoid.mempty(Tidy_Doc.monoidLeadingComment);
var identity = /* #__PURE__ */ Control_Category.identity(Control_Category.categoryFn);
var append2 = /* #__PURE__ */ Data_Semigroup.append(Tidy_Doc.semigroupFormatDoc);
var HangBreak = /* #__PURE__ */ (function () {
    function HangBreak(value0) {
        this.value0 = value0;
    };
    HangBreak.create = function (value0) {
        return new HangBreak(value0);
    };
    return HangBreak;
})();
var HangOps = /* #__PURE__ */ (function () {
    function HangOps(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    HangOps.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new HangOps(value0, value1, value2);
            };
        };
    };
    return HangOps;
})();
var HangApp = /* #__PURE__ */ (function () {
    function HangApp(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    HangApp.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new HangApp(value0, value1, value2);
            };
        };
    };
    return HangApp;
})();
var HangingOp = /* #__PURE__ */ (function () {
    function HangingOp(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    HangingOp.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new HangingOp(value0, value1, value2);
            };
        };
    };
    return HangingOp;
})();
var overHangHead = function (f) {
    var go = function (v) {
        if (v instanceof HangBreak) {
            return new HangBreak(f(v.value0));
        };
        if (v instanceof HangOps) {
            return new HangOps(v.value0, go(v.value1), v.value2);
        };
        if (v instanceof HangApp) {
            return new HangApp(v.value0, go(v.value1), v.value2);
        };
        throw new Error("Failed pattern match at Tidy.Hang (line 62, column 8 - line 65, column 54): " + [ v.constructor.name ]);
    };
    return go;
};
var hangWithIndent = function (ind) {
    return function (a) {
        var $183 = Data_Maybe.maybe(a)(HangApp.create(ind)(a));
        return function ($184) {
            return $183(Data_Array_NonEmpty.fromArray($184));
        };
    };
};
var hangOps = /* #__PURE__ */ (function () {
    return HangOps.create(Tidy_Doc.indent);
})();
var hangHead = function ($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
        if (v instanceof HangBreak) {
            $tco_done = true;
            return v.value0;
        };
        if (v instanceof HangOps) {
            $copy_v = v.value1;
            return;
        };
        if (v instanceof HangApp) {
            $copy_v = v.value1;
            return;
        };
        throw new Error("Failed pattern match at Tidy.Hang (line 54, column 12 - line 57, column 34): " + [ v.constructor.name ]);
    };
    while (!$tco_done) {
        $tco_result = $tco_loop($copy_v);
    };
    return $tco_result;
};
var hangConcatApp = function (a) {
    return function (b) {
        if (a instanceof HangApp) {
            return new HangApp(a.value0, a.value1, append(a.value2)(b));
        };
        return new HangApp(Tidy_Doc.indent, a, b);
    };
};
var hangBreak = function ($185) {
    return HangBreak.create(Tidy_Doc.flexGroup($185));
};
var hangApp = /* #__PURE__ */ (function () {
    return HangApp.create(Tidy_Doc.indent);
})();
var hang = function (a) {
    var $186 = HangApp.create(Tidy_Doc.indent)(hangBreak(a));
    return function ($187) {
        return $186(pure($187));
    };
};
var forceBreaks = function (n) {
    if (n >= 2) {
        return append1(Dodo["break"])(Dodo["break"]);
    };
    if (Data_Boolean.otherwise) {
        return Dodo["break"];
    };
    throw new Error("Failed pattern match at Tidy.Hang (line 67, column 1 - line 67, column 38): " + [ n.constructor.name ]);
};
var breaks = function (fl) {
    return function (n) {
        if (eq(fl)(Tidy_Doc.ForceBreak.value) || n > 0) {
            return forceBreaks(n);
        };
        if (eq(fl)(Tidy_Doc.ForceSpace.value)) {
            return Dodo.space;
        };
        if (Data_Boolean.otherwise) {
            return mempty;
        };
        throw new Error("Failed pattern match at Tidy.Hang (line 72, column 1 - line 72, column 47): " + [ fl.constructor.name, n.constructor.name ]);
    };
};
var toFormatDoc = /* #__PURE__ */ (function () {
    var realignOp = function ($copy_op) {
        return function ($copy_doc) {
            var $tco_var_op = $copy_op;
            var $tco_done = false;
            var $tco_result;
            function $tco_loop(op, doc) {
                var v = hangHead(doc);
                if (notEq(op.leading.left)(Tidy_Doc.ForceBreak.value) && (op.leading.lines === 0 && (notEq(op.trailing.right)(Tidy_Doc.ForceBreak.value) && (notEq(v.leading.left)(Tidy_Doc.ForceBreak.value) && v.leading.lines > 0)))) {
                    $tco_var_op = Tidy_Doc.forceMinSourceBreaks(1)(op);
                    $copy_doc = overHangHead(Tidy_Doc.flatten)(doc);
                    return;
                };
                var v2 = function (v3) {
                    return new Data_Tuple.Tuple(op, doc);
                };
                if (doc instanceof HangBreak) {
                    var $77 = notEq(op.trailing.right)(Tidy_Doc.ForceBreak.value) && (notEq(v.leading.left)(Tidy_Doc.ForceBreak.value) && (v.leading.lines === 0 && (v.leading.multiline || op.multiline)));
                    if ($77) {
                        $tco_done = true;
                        return new Data_Tuple.Tuple(op, overHangHead(Tidy_Doc.forceMinSourceBreaks(1))(doc));
                    };
                    $tco_done = true;
                    return v2(true);
                };
                $tco_done = true;
                return v2(true);
            };
            while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_op, $copy_doc);
            };
            return $tco_result;
        };
    };
    var indMulti = function (head) {
        return function (ind) {
            return function (doc) {
                if (head instanceof HangApp) {
                    return doc;
                };
                return ind(doc);
            };
        };
    };
    var flexSelectJoin = function (v) {
        return function (v1) {
            return function (v2) {
                var $$break = (function () {
                    if (eq(v.leading.left)(Tidy_Doc.ForceBreak.value) || v.leading.lines > 0) {
                        return Dodo["break"];
                    };
                    if (Data_Boolean.otherwise) {
                        return Dodo.spaceBreak;
                    };
                    throw new Error("Failed pattern match at Tidy.Hang (line 255, column 7 - line 257, column 38): " + [  ]);
                })();
                var doc1$prime = append1($$break)(append1(v.leading.doc)(append1(Tidy_Doc.breakDoc(v.leading.right)(v.doc))(Tidy_Doc.breakDoc(v.trailing.left)(v.trailing.doc))));
                var doc2$prime = append1(breaks(max(v.trailing.right)(v1.leading.left))(v1.leading.lines))(append1(v1.leading.doc)(append1(Tidy_Doc.breakDoc(v1.leading.right)(v1.doc))(Tidy_Doc.breakDoc(v1.trailing.left)(v1.trailing.doc))));
                var m3 = v2.leading.multiline || (v2.multiline || v2.trailing.multiline);
                var m2 = v1.leading.multiline || (v1.multiline || v1.trailing.multiline);
                var m1 = v.leading.multiline || (v.multiline || v.trailing.multiline);
                var doc3$prime = append1(breaks(max(v.trailing.right)(v2.leading.left))(v2.leading.lines))(append1(v2.leading.doc)(append1(Tidy_Doc.breakDoc(v1.leading.right)(v2.doc))(Tidy_Doc.breakDoc(v2.trailing.left)(v2.trailing.doc))));
                return {
                    doc: Dodo.flexSelect(doc1$prime)(doc2$prime)(doc3$prime),
                    leading: mempty1,
                    isEmpty: false,
                    multiline: m1 || m2 && m3,
                    trailing: {
                        doc: mempty,
                        left: Tidy_Doc.ForceNone.value,
                        multiline: false,
                        right: max(v1.trailing.right)(v2.trailing.right)
                    }
                };
            };
        };
    };
    var flexSelect = function (v) {
        return function (v1) {
            return function (v2) {
                var doc1$prime = append1(v.doc)(Tidy_Doc.breakDoc(v.trailing.left)(v.trailing.doc));
                var doc2$prime = append1(breaks(max(v.trailing.right)(v1.leading.left))(v1.leading.lines))(append1(v1.leading.doc)(append1(Tidy_Doc.breakDoc(v1.leading.right)(v1.doc))(Tidy_Doc.breakDoc(v1.trailing.left)(v1.trailing.doc))));
                var m3 = v2.leading.multiline || (v2.multiline || v2.trailing.multiline);
                var m2 = v1.leading.multiline || (v1.multiline || v1.trailing.multiline);
                var m1 = v.multiline || v.trailing.multiline;
                var doc3$prime = append1(breaks(max(v.trailing.right)(v2.leading.left))(v2.leading.lines))(append1(v2.leading.doc)(append1(Tidy_Doc.breakDoc(v1.leading.right)(v2.doc))(Tidy_Doc.breakDoc(v2.trailing.left)(v2.trailing.doc))));
                return {
                    doc: Dodo.flexSelect(doc1$prime)(doc2$prime)(doc3$prime),
                    leading: v.leading,
                    isEmpty: false,
                    multiline: m1 || m2 && m3,
                    trailing: {
                        doc: mempty,
                        left: Tidy_Doc.ForceNone.value,
                        multiline: false,
                        right: max(v1.trailing.right)(v2.trailing.right)
                    }
                };
            };
        };
    };
    var docJoin = function (v) {
        if (v.isEmpty) {
            return v;
        };
        if (Data_Boolean.otherwise) {
            var $105 = eq(v.leading.left)(Tidy_Doc.ForceBreak.value) || v.leading.lines > 0;
            if ($105) {
                return v;
            };
            var $106 = v.leading.multiline || v.multiline;
            if ($106) {
                return Tidy_Doc.forceMinSourceBreaks(1)(v);
            };
            return {
                doc: append1(Dodo.spaceBreak)(append1(v.leading.doc)(Tidy_Doc.breakDoc(v.leading.right)(v.doc))),
                isEmpty: v.isEmpty,
                leading: mempty1,
                multiline: v.multiline,
                trailing: v.trailing
            };
        };
        throw new Error("Failed pattern match at Tidy.Hang (line 301, column 3 - line 313, column 14): " + [ v.constructor.name ]);
    };
    var goLastOperand = function (prevAlgn) {
        return function (prevInd) {
            return function (v) {
                if (v instanceof HangBreak) {
                    var doc$prime = Tidy_Doc.flexGroup(docJoin(v.value0));
                    return new Data_Tuple.Tuple(doc$prime, prevInd(doc$prime));
                };
                if (v instanceof HangApp) {
                    var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
                    var $$this = Data_Tuple.fst(goInit((function () {
                        if (v.value1 instanceof HangApp) {
                            return overHangHead(Tidy_Doc.forceMinSourceBreaks(1))(v.value1);
                        };
                        return v.value1;
                    })()));
                    var next = Data_Array.foldr(goInitApp)(goLastApp(v1.last))(v1.init);
                    var docIndent = indMulti(v.value1)(v.value0)(Data_Tuple.fst(next));
                    var docGroup = flexSelectJoin($$this)(Data_Tuple.fst(next))(docIndent);
                    var docBreak = flexSelectJoin(prevInd($$this))(prevAlgn(docIndent))(prevInd(docIndent));
                    return new Data_Tuple.Tuple(docGroup, docBreak);
                };
                if (v instanceof HangOps) {
                    var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
                    var $$this = Data_Tuple.fst(goInit(v.value1));
                    var next = Data_Array.foldr(goInitOp(v.value0))(goLastOp(v.value0)(v1.last))(v1.init);
                    var docIndent = v.value0(Data_Tuple.fst(next));
                    var docGroup = flexSelectJoin($$this)(Data_Tuple.fst(next))(docIndent);
                    var docBreak = flexSelectJoin(prevInd($$this))(prevAlgn(docIndent))(prevInd(docIndent));
                    return new Data_Tuple.Tuple(docGroup, docBreak);
                };
                throw new Error("Failed pattern match at Tidy.Hang (line 181, column 36 - line 204, column 30): " + [ v.constructor.name ]);
            };
        };
    };
    var goLastOp = function (ind) {
        return function (v) {
            var algn = (function () {
                var $127 = v.value0 <= 1;
                if ($127) {
                    return Tidy_Doc.align(2);
                };
                return identity;
            })();
            var next = goLastOperand(algn)(ind)(v.value2);
            var docIndent = Data_Tuple.snd(next);
            var docBreak = append2(docJoin(v.value1))(docIndent);
            var docGroup = flexSelectJoin(v.value1)(Data_Tuple.fst(next))(docIndent);
            return new Data_Tuple.Tuple(docGroup, docBreak);
        };
    };
    var goLastApp = function (doc) {
        var $$this = goLast(doc);
        var docGroup = Tidy_Doc.flexGroup(Data_Tuple.fst($$this));
        var docBreak = Data_Tuple.snd($$this);
        return new Data_Tuple.Tuple(docGroup, docBreak);
    };
    var goLast = function (v) {
        if (v instanceof HangBreak) {
            var doc$prime = docJoin(v.value0);
            return new Data_Tuple.Tuple(doc$prime, doc$prime);
        };
        if (v instanceof HangApp) {
            var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
            var $$this = Data_Tuple.fst(goInit(v.value1));
            var next = Data_Array.foldr(goInitApp)(goLastApp(v1.last))(v1.init);
            var docGroup = flexSelectJoin($$this)(Data_Tuple.fst(next))(indMulti(v.value1)(v.value0)(Data_Tuple.fst(next)));
            var docBreak = append2(docJoin($$this))(indMulti(v.value1)(v.value0)(Data_Tuple.fst(next)));
            return new Data_Tuple.Tuple(docGroup, docBreak);
        };
        if (v instanceof HangOps) {
            var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
            var $$this = Data_Tuple.fst(goInit(v.value1));
            var next = Data_Array.foldr(goInitOp(v.value0))(goLastOp(v.value0)(v1.last))(v1.init);
            var docGroup = flexSelectJoin($$this)(Data_Tuple.fst(next))(v.value0(Data_Tuple.fst(next)));
            var docBreak = Tidy_Doc["break"](docJoin($$this))(v.value0(Data_Tuple.snd(next)));
            return new Data_Tuple.Tuple(docGroup, docBreak);
        };
        throw new Error("Failed pattern match at Tidy.Hang (line 101, column 12 - line 120, column 30): " + [ v.constructor.name ]);
    };
    var goInitOperand = function (prevAlgn) {
        return function (prevInd) {
            return function (v) {
                if (v instanceof HangBreak) {
                    var doc$prime = prevInd(Tidy_Doc.flexGroup(docJoin(v.value0)));
                    return new Data_Tuple.Tuple(doc$prime, doc$prime);
                };
                if (v instanceof HangApp) {
                    var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
                    var $$this = Data_Tuple.fst(goInit(v.value1));
                    var next = Data_Array.foldr(goInitApp)(goLastApp(v1.last))(v1.init);
                    var docGroup = flexSelectJoin(prevInd($$this))(indMulti(v.value1)(function ($188) {
                        return prevAlgn(v.value0($188));
                    })(Data_Tuple.fst(next)))(prevInd(indMulti(v.value1)(v.value0)(Data_Tuple.fst(next))));
                    var docBreak = prevInd(append2(docJoin($$this))(v.value0(Data_Tuple.snd(next))));
                    return new Data_Tuple.Tuple(docGroup, docBreak);
                };
                if (v instanceof HangOps) {
                    var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
                    var $$this = Data_Tuple.fst(goInit(v.value1));
                    var next = Data_Array.foldr(goInitOp(v.value0))(goLastOp(v.value0)(v1.last))(v1.init);
                    var docGroup = flexSelectJoin(prevInd($$this))(prevAlgn(v.value0(Data_Tuple.fst(next))))(prevInd(v.value0(Data_Tuple.fst(next))));
                    var docBreak = prevInd(append2(docJoin($$this))(v.value0(Data_Tuple.snd(next))));
                    return new Data_Tuple.Tuple(docGroup, docBreak);
                };
                throw new Error("Failed pattern match at Tidy.Hang (line 154, column 36 - line 179, column 30): " + [ v.constructor.name ]);
            };
        };
    };
    var goInitOp = function (ind) {
        return function (v) {
            return function (next) {
                var v1 = realignOp(v.value1)(v.value2);
                var algn = (function () {
                    var $163 = v.value0 <= 1;
                    if ($163) {
                        return Tidy_Doc.align(2);
                    };
                    return identity;
                })();
                var docOprd = Data_Tuple.fst(goInitOperand(algn)(ind)(v1.value1));
                var docBreak = append2(docJoin(v1.value0))(append2(docOprd)(Data_Tuple.snd(next)));
                var docGroup = flexSelectJoin(append2(v1.value0)(docOprd))(Data_Tuple.fst(next))(Data_Tuple.snd(next));
                return new Data_Tuple.Tuple(docGroup, docBreak);
            };
        };
    };
    var goInitApp = function (doc) {
        return function (next) {
            var $$this = Data_Tuple.fst(goInit(doc));
            var docGroup = flexSelectJoin($$this)(Data_Tuple.fst(next))(Data_Tuple.snd(next));
            var docBreak = append2(docJoin($$this))(Data_Tuple.snd(next));
            return new Data_Tuple.Tuple(docGroup, docBreak);
        };
    };
    var goInit = function (v) {
        if (v instanceof HangBreak) {
            return new Data_Tuple.Tuple(v.value0, v.value0);
        };
        if (v instanceof HangApp) {
            var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
            var $$this = Data_Tuple.fst(goInit(v.value1));
            var next = Data_Array.foldr(goInitApp)(goLastApp(v1.last))(v1.init);
            var docGroup = flexSelect($$this)(v.value0(Data_Tuple.fst(next)))(indMulti(v.value1)(v.value0)(Data_Tuple.fst(next)));
            var docBreak = Tidy_Doc["break"]($$this)(v.value0(Data_Tuple.snd(next)));
            return new Data_Tuple.Tuple(docGroup, docBreak);
        };
        if (v instanceof HangOps) {
            var v1 = Data_Array_NonEmpty.unsnoc(v.value2);
            var $$this = Data_Tuple.fst(goInit(v.value1));
            var next = Data_Array.foldr(goInitOp(v.value0))(goLastOp(v.value0)(v1.last))(v1.init);
            var docGroup = append2(Tidy_Doc.flexGroup($$this))(v.value0(Data_Tuple.fst(next)));
            var docBreak = Tidy_Doc["break"]($$this)(v.value0(Data_Tuple.snd(next)));
            return new Data_Tuple.Tuple(docGroup, docBreak);
        };
        throw new Error("Failed pattern match at Tidy.Hang (line 81, column 12 - line 99, column 30): " + [ v.constructor.name ]);
    };
    return function ($189) {
        return Data_Tuple.fst(goInit($189));
    };
})();
export {
    HangingOp,
    hang,
    hangWithIndent,
    hangBreak,
    hangApp,
    hangOps,
    hangHead,
    overHangHead,
    hangConcatApp,
    toFormatDoc
};
