// Generated by purs version 0.15.4
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Map_Internal from "../Data.Map.Internal/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as PureScript_CST from "../PureScript.CST/index.js";
import * as Test_Spec from "../Test.Spec/index.js";
import * as Test_TsBridgeGen_Monad from "../Test.TsBridgeGen.Monad/index.js";
import * as Test_Util from "../Test.Util/index.js";
import * as TsBridgeGen_Cli from "../TsBridgeGen.Cli/index.js";
import * as TsBridgeGen_Core from "../TsBridgeGen.Core/index.js";
import * as TsBridgeGen_Print from "../TsBridgeGen.Print/index.js";
import * as TsBridgeGen_Types from "../TsBridgeGen.Types/index.js";
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(/* #__PURE__ */ Test_Spec.bindSpecT(Data_Identity.bindIdentity));
var describe = /* #__PURE__ */ Test_Spec.describe(Data_Identity.monadIdentity);
var it = /* #__PURE__ */ Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit);
var showArray = /* #__PURE__ */ Data_Show.showArray(Data_Show.showString);
var eqArray = /* #__PURE__ */ Data_Eq.eqArray(Data_Eq.eqString);
var shouldEqual = /* #__PURE__ */ Test_Util.shouldEqual(/* #__PURE__ */ Data_Maybe.showMaybe(TsBridgeGen_Types.showPursDef))(/* #__PURE__ */ Data_Maybe.eqMaybe(TsBridgeGen_Types.eqPursDef));
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Maybe.bindMaybe);
var shouldEqual1 = /* #__PURE__ */ Test_Util.shouldEqual(showArray)(eqArray);
var genInstances = /* #__PURE__ */ TsBridgeGen_Print.genInstances(Data_Identity.monadIdentity);
var recResToMaybe = function (v) {
    if (v instanceof PureScript_CST.ParseSucceeded) {
        return new Data_Maybe.Just(v.value0);
    };
    return Data_Maybe.Nothing.value;
};
var spec = /* #__PURE__ */ discard(/* #__PURE__ */ describe("patchClassFile")(/* #__PURE__ */ it("patches a class file correctly")(/* #__PURE__ */ (function () {
    var testEnv = {
        config: Test_TsBridgeGen_Monad.defaultTestConfig,
        capabilities: Test_TsBridgeGen_Monad.defaultTestCapabilities
    };
    return Test_Util.shouldEqual(Test_TsBridgeGen_Monad.showTestMResult(showArray))(Test_TsBridgeGen_Monad.eqTestMResult(eqArray))(Data_Functor.mapFlipped(Test_TsBridgeGen_Monad.functorTestMResult)(Test_TsBridgeGen_Monad.runTestM_(testEnv)(TsBridgeGen_Cli.patchClassFile(Test_TsBridgeGen_Monad.monadAppTestM)("Module.purs")([ new TsBridgeGen_Types.PursModule("Module1", [ new TsBridgeGen_Types.DefData("Foo1") ]), new TsBridgeGen_Types.PursModule("Module2", [ new TsBridgeGen_Types.DefData("Foo2") ]) ])(Data_String_Common.joinWith("\x0a")([ "module MyApp.TsBridgeClass where", "", "{-GEN:imports", "{ \"autoPrefix\": \"Auto\" }", "-}", "", "import Data.Either (Either)", "", "{-GEN:END-}", "", "{-GEN:instances", "{ \"include\": [ \"**\" ]", ", \"exclude\": []", "}", "-}", "", "{-GEN:END-}" ]))))(Data_String_Common.split("\x0a")))(new Test_TsBridgeGen_Monad.TestMResult(Data_Map_Internal.empty, [  ], new Data_Either.Right([ "module MyApp.TsBridgeClass where", "", "{-GEN:imports", "{ \"autoPrefix\": \"Auto\" }", "-}", "", "import Module1 as Auto.Module1", "import Module2 as Auto.Module2", "import Data.Either (Either)", "", "{-GEN:END-}", "", "{-GEN:instances", "{ \"include\": [ \"**\" ]", ", \"exclude\": []", "}", "-}", "", "instance ToTsBridge Auto.Module1.Foo1 where", "  toTsBridge = tsOpaqueType \"Module1\" \"Foo1\"", "", "instance ToTsBridge Auto.Module2.Foo2 where", "  toTsBridge = tsOpaqueType \"Module2\" \"Foo2\"", "", "{-GEN:END-}" ])));
})())))(function () {
    return discard(describe("Data Type")(it("parses correctly")(shouldEqual(new Data_Maybe.Just(new TsBridgeGen_Types.DefUnsupportedExport("Foo", "data type")))(bind(recResToMaybe(PureScript_CST.parseDecl("data Foo = Bar | Baz")))(TsBridgeGen_Core.getPursDef)))))(function () {
        return discard(describe("Value")(it("parses correctly")(shouldEqual(new Data_Maybe.Just(new TsBridgeGen_Types.DefUnsupportedExport("x", "value")))(bind(recResToMaybe(PureScript_CST.parseDecl("x :: Int")))(TsBridgeGen_Core.getPursDef)))))(function () {
            return discard(describe("Type Alias")(it("parses correctly")(shouldEqual(new Data_Maybe.Just(new TsBridgeGen_Types.DefUnsupportedExport("Foo", "type alias")))(bind(recResToMaybe(PureScript_CST.parseDecl("type Foo = Int")))(TsBridgeGen_Core.getPursDef)))))(function () {
                return discard(describe("Newtype")(it("parses correctly")(shouldEqual(new Data_Maybe.Just(new TsBridgeGen_Types.DefUnsupportedInstAndExport("Foo", "newtype")))(bind(recResToMaybe(PureScript_CST.parseDecl("newtype Foo = Foo Int")))(TsBridgeGen_Core.getPursDef)))))(function () {
                    return describe("Data type")(it("prints correctly")(shouldEqual1(Data_String_Common.split("\x0a")(TsBridgeGen_Print.printPursSnippets(Data_Tuple.fst(TsBridgeGen_Print.runImportWriterM(genInstances([ new TsBridgeGen_Types.PursModule("My", [ new TsBridgeGen_Types.DefData("Foo") ]) ]))))))([ "instance ToTsBridge Auto.My.Foo where", "  toTsBridge = tsOpaqueType \"My\" \"Foo\"" ])));
                });
            });
        });
    });
});
export {
    recResToMaybe,
    spec
};
