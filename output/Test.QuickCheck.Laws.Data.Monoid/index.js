// Generated by purs version 0.15.4
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Semigroup from "../Data.Semigroup/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Test_QuickCheck from "../Test.QuickCheck/index.js";
import * as Test_QuickCheck_Arbitrary from "../Test.QuickCheck.Arbitrary/index.js";
import * as Test_QuickCheck_Gen from "../Test.QuickCheck.Gen/index.js";
var quickCheck$prime = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableGen(Test_QuickCheck.testableBoolean));
var map = /* #__PURE__ */ Data_Functor.map(Test_QuickCheck_Gen.functorGen);
var checkMonoidGen = function (dictMonoid) {
    var append = Data_Semigroup.append(dictMonoid.Semigroup0());
    var mempty = Data_Monoid.mempty(dictMonoid);
    return function (dictEq) {
        var eq = Data_Eq.eq(dictEq);
        return function (gen) {
            var rightIdentity = function (x) {
                return eq(append(x)(mempty))(x);
            };
            var leftIdentity = function (x) {
                return eq(append(mempty)(x))(x);
            };
            return function __do() {
                Effect_Console.log("Checking 'Left identity' law for Monoid")();
                quickCheck$prime(1000)(map(leftIdentity)(gen))();
                Effect_Console.log("Checking 'Right identity' law for Monoid")();
                return quickCheck$prime(1000)(map(rightIdentity)(gen))();
            };
        };
    };
};
var checkMonoid = function (dictMonoid) {
    var checkMonoidGen1 = checkMonoidGen(dictMonoid);
    return function (dictArbitrary) {
        var arbitrary = Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary);
        return function (dictEq) {
            var checkMonoidGen2 = checkMonoidGen1(dictEq);
            return function (v) {
                return checkMonoidGen2(arbitrary);
            };
        };
    };
};
export {
    checkMonoid,
    checkMonoidGen
};
