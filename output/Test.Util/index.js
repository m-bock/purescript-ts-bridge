// Generated by purs version 0.15.4
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Dodo from "../Dodo/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Foreign_Object from "../Foreign.Object/index.js";
import * as Node_ChildProcess from "../Node.ChildProcess/index.js";
import * as PureScript_CST from "../PureScript.CST/index.js";
import * as Sunde from "../Sunde/index.js";
import * as Test_Spec_Assertions from "../Test.Spec.Assertions/index.js";
import * as Tidy from "../Tidy/index.js";
var defaultFormatOptions = /* #__PURE__ */ Tidy.defaultFormatOptions(Tidy.formatErrorVoid);
var when = /* #__PURE__ */ Control_Applicative.when(Effect_Aff.applicativeAff);
var bind = /* #__PURE__ */ Control_Bind.bind(Effect_Aff.bindAff);
var fromHomogeneous = /* #__PURE__ */ Foreign_Object.fromHomogeneous();
var fail = /* #__PURE__ */ Test_Spec_Assertions.fail(Effect_Aff.monadThrowAff);
var showRecord = /* #__PURE__ */ Data_Show.showRecord()();
var showRecordFieldsCons = /* #__PURE__ */ Data_Show.showRecordFieldsCons({
    reflectSymbol: function () {
        return "actual";
    }
});
var showRecordFieldsConsNil = /* #__PURE__ */ Data_Show.showRecordFieldsConsNil({
    reflectSymbol: function () {
        return "expected";
    }
});
var printExpr = function (expr) {
    return Dodo.print(Dodo.plainText)(Dodo.twoSpaces)((function (v) {
        return v.doc;
    })(Tidy.formatExpr(defaultFormatOptions)(expr)));
};
var showPretty = function (dictShow) {
    var $31 = Data_Show.show(dictShow);
    return function ($32) {
        return (function (v) {
            if (v instanceof PureScript_CST.ParseSucceeded) {
                return printExpr(v.value0);
            };
            return "<invalid>";
        })(PureScript_CST.parseExpr($31($32)));
    };
};
var shouldEqual = function (dictShow) {
    var showPretty1 = showPretty(dictShow);
    var showPretty2 = showPretty(showRecord(showRecordFieldsCons(showRecordFieldsConsNil(dictShow))(dictShow)));
    return function (dictEq) {
        var notEq = Data_Eq.notEq(dictEq);
        return function (v1) {
            return function (v2) {
                return when(notEq(v1)(v2))(bind(Sunde.spawn({
                    cmd: "bash",
                    args: [ "-c", "diff --color=always <( printf '%s\x0a' \"$string2\" ) <( printf '%s\x0a' \"$string1\" )" ],
                    stdin: Data_Maybe.Nothing.value
                })({
                    cwd: Node_ChildProcess.defaultSpawnOptions.cwd,
                    stdio: Node_ChildProcess.defaultSpawnOptions.stdio,
                    env: new Data_Maybe.Just(fromHomogeneous({
                        string1: showPretty1(v2),
                        string2: showPretty1(v1)
                    })),
                    detached: Node_ChildProcess.defaultSpawnOptions.detached,
                    uid: Node_ChildProcess.defaultSpawnOptions.uid,
                    gid: Node_ChildProcess.defaultSpawnOptions.gid
                }))(function (r) {
                    return fail("\x0a" + (showPretty2({
                        actual: v1,
                        expected: v2
                    }) + ("\x0a\x0a" + r.stdout)));
                }));
            };
        };
    };
};
export {
    shouldEqual,
    printExpr,
    showPretty
};
