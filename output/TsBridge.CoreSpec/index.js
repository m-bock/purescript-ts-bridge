// Generated by purs version 0.15.4
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Identity from "../Data.Identity/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Effect_Aff from "../Effect.Aff/index.js";
import * as Effect_Class from "../Effect.Class/index.js";
import * as Test_QuickCheck_Laws_Data_Monoid from "../Test.QuickCheck.Laws.Data.Monoid/index.js";
import * as Test_QuickCheck_Laws_Data_Semigroup from "../Test.QuickCheck.Laws.Data.Semigroup/index.js";
import * as Test_Spec from "../Test.Spec/index.js";
import * as Test_Spec_Assertions from "../Test.Spec.Assertions/index.js";
import * as TsBridgeGen_Core from "../TsBridgeGen.Core/index.js";
import * as TsBridgeGen_Types from "../TsBridgeGen.Types/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var describe = /* #__PURE__ */ Test_Spec.describe(Data_Identity.monadIdentity);
var discard = /* #__PURE__ */ Control_Bind.discard(Control_Bind.discardUnit)(/* #__PURE__ */ Test_Spec.bindSpecT(Data_Identity.bindIdentity));
var it = /* #__PURE__ */ Test_Spec.it(Data_Identity.monadIdentity)(Test_Spec.exampleMUnit);
var shouldEqual = /* #__PURE__ */ Test_Spec_Assertions.shouldEqual(Effect_Aff.monadThrowAff)(/* #__PURE__ */ Data_Maybe.showMaybe(TsBridgeGen_Types.showSourcePosition))(/* #__PURE__ */ Data_Maybe.eqMaybe(TsBridgeGen_Types.eqSourcePosition));
var liftEffect = /* #__PURE__ */ Effect_Class.liftEffect(Effect_Aff.monadEffectAff);
var checkSemigroup = /* #__PURE__ */ Test_QuickCheck_Laws_Data_Semigroup.checkSemigroup(TsBridgeGen_Types.semigroupSourcePosition)(TsBridgeGen_Types.arbitrarySourcePosition)(TsBridgeGen_Types.eqSourcePosition);
var checkMonoid = /* #__PURE__ */ Test_QuickCheck_Laws_Data_Monoid.checkMonoid(TsBridgeGen_Types.monoidSourcePosition)(TsBridgeGen_Types.arbitrarySourcePosition)(TsBridgeGen_Types.eqSourcePosition);
var spec = /* #__PURE__ */ (function () {
    return describe("TsBridge.Core")(discard(describe("indexToSourcePos")(discard(it("works for index -1")(shouldEqual(TsBridgeGen_Core.indexToSourcePos("foo\x0abar")(-1 | 0))(Data_Maybe.Nothing.value)))(function () {
        return discard(it("works for index 0")(shouldEqual(TsBridgeGen_Core.indexToSourcePos("foo\x0abar")(0))(new Data_Maybe.Just({
            line: 0,
            column: 0
        }))))(function () {
            return discard(it("works for index 1")(shouldEqual(TsBridgeGen_Core.indexToSourcePos("foo\x0abar")(1))(new Data_Maybe.Just({
                line: 0,
                column: 1
            }))))(function () {
                return discard(it("works for index 2")(shouldEqual(TsBridgeGen_Core.indexToSourcePos("foo\x0abar")(2))(new Data_Maybe.Just({
                    line: 0,
                    column: 2
                }))))(function () {
                    return discard(it("works for index 3")(shouldEqual(TsBridgeGen_Core.indexToSourcePos("foo\x0abar")(3))(new Data_Maybe.Just({
                        line: 1,
                        column: 0
                    }))))(function () {
                        return discard(it("works for index 4")(shouldEqual(TsBridgeGen_Core.indexToSourcePos("foo\x0abar")(4))(new Data_Maybe.Just({
                            line: 1,
                            column: 1
                        }))))(function () {
                            return discard(it("works for index 5")(shouldEqual(TsBridgeGen_Core.indexToSourcePos("foo\x0abar")(5))(new Data_Maybe.Just({
                                line: 1,
                                column: 2
                            }))))(function () {
                                return discard(it("works for index 6")(shouldEqual(TsBridgeGen_Core.indexToSourcePos("foo\x0abar")(6))(Data_Maybe.Nothing.value)))(function () {
                                    return it("works for index 7")(shouldEqual(TsBridgeGen_Core.indexToSourcePos("foo\x0abar")(7))(Data_Maybe.Nothing.value));
                                });
                            });
                        });
                    });
                });
            });
        });
    })))(function () {
        return describe("SourcePosition")(discard(it("has a la abiding Semiring instance")(liftEffect(checkSemigroup(Type_Proxy["Proxy"].value))))(function () {
            return it("has a la abiding Monoid instance")(liftEffect(checkMonoid(Type_Proxy["Proxy"].value)));
        }));
    }));
})();
export {
    spec
};
