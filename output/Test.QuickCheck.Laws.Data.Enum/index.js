// Generated by purs version 0.15.4
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Enum from "../Data.Enum/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Test_QuickCheck from "../Test.QuickCheck/index.js";
import * as Test_QuickCheck_Arbitrary from "../Test.QuickCheck.Arbitrary/index.js";
import * as Test_QuickCheck_Gen from "../Test.QuickCheck.Gen/index.js";
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Maybe.bindMaybe);
var quickCheck$prime = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableGen(Test_QuickCheck.testableBoolean));
var map = /* #__PURE__ */ Data_Functor.map(Test_QuickCheck_Gen.functorGen);
var apply = /* #__PURE__ */ Control_Apply.apply(Test_QuickCheck_Gen.applyGen);
var checkEnumGen = function (dictEnum) {
    var Ord0 = dictEnum.Ord0();
    var lessThan = Data_Ord.lessThan(Ord0);
    var succ = Data_Enum.succ(dictEnum);
    var eq = Data_Eq.eq(Data_Maybe.eqMaybe(Ord0.Eq0()));
    var pred = Data_Enum.pred(dictEnum);
    var lessThanOrEq = Data_Ord.lessThanOrEq(Ord0);
    return function (dictOrd) {
        return function (gen) {
            var successor = function (a) {
                return Data_Maybe.maybe(true)(function (v) {
                    return lessThan(a)(v);
                })(succ(a));
            };
            var succRetractsPred = function (a) {
                return eq(bind(bind(pred(a))(succ))(pred))(pred(a));
            };
            var predecessor = function (a) {
                return Data_Maybe.maybe(true)(function (v) {
                    return lessThan(v)(a);
                })(pred(a));
            };
            var predRetractsSucc = function (a) {
                return eq(bind(bind(succ(a))(pred))(succ))(succ(a));
            };
            var nonSkippingSucc = function (a) {
                return function (b) {
                    return lessThanOrEq(b)(a) || Data_Maybe.maybe(false)(function (v) {
                        return lessThanOrEq(v)(b);
                    })(succ(a));
                };
            };
            var nonSkippingPred = function (a) {
                return function (b) {
                    return lessThanOrEq(a)(b) || Data_Maybe.maybe(false)(function (v) {
                        return lessThanOrEq(b)(v);
                    })(pred(a));
                };
            };
            return function __do() {
                Effect_Console.log("Checking 'Successor' law for Enum")();
                quickCheck$prime(1000)(map(successor)(gen))();
                Effect_Console.log("Checking 'Predecessor' law for Enum")();
                quickCheck$prime(1000)(map(predecessor)(gen))();
                Effect_Console.log("Checking 'Succ retracts pred' law for Enum")();
                quickCheck$prime(1000)(map(succRetractsPred)(gen))();
                Effect_Console.log("Checking 'Pred retracts succ' law for Enum")();
                quickCheck$prime(1000)(map(predRetractsSucc)(gen))();
                Effect_Console.log("Checking 'Non-skipping succ' law for Enum")();
                quickCheck$prime(1000)(apply(map(nonSkippingSucc)(gen))(gen))();
                Effect_Console.log("Checking 'Non-skipping pred' law for Enum")();
                return quickCheck$prime(1000)(apply(map(nonSkippingPred)(gen))(gen))();
            };
        };
    };
};
var checkEnum = function (dictArbitrary) {
    var arbitrary = Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary);
    return function (dictEnum) {
        var checkEnumGen1 = checkEnumGen(dictEnum)(dictEnum.Ord0());
        return function (dictOrd) {
            return function (v) {
                return checkEnumGen1(arbitrary);
            };
        };
    };
};
export {
    checkEnum,
    checkEnumGen
};
