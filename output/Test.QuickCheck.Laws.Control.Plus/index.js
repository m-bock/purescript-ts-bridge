// Generated by purs version 0.15.4
import * as Control_Alt from "../Control.Alt/index.js";
import * as Control_Plus from "../Control.Plus/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Test_QuickCheck from "../Test.QuickCheck/index.js";
import * as Test_QuickCheck_Arbitrary from "../Test.QuickCheck.Arbitrary/index.js";
import * as Test_QuickCheck_Gen from "../Test.QuickCheck.Gen/index.js";
import * as Test_QuickCheck_Laws from "../Test.QuickCheck.Laws/index.js";
var quickCheck$prime = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableGen(Test_QuickCheck.testableBoolean));
var map = /* #__PURE__ */ Data_Functor.map(Test_QuickCheck_Gen.functorGen);
var quickCheck$prime1 = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableFunction(/* #__PURE__ */ Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryA)(Test_QuickCheck_Laws.arbitraryB))(Test_QuickCheck.testableBoolean));
var checkPlusGen = function (dictPlus) {
    var Alt0 = dictPlus.Alt0();
    var alt = Control_Alt.alt(Alt0);
    var empty = Control_Plus.empty(dictPlus);
    var map1 = Data_Functor.map(Alt0.Functor0());
    return function (dictEq) {
        var eq = Data_Eq.eq(dictEq);
        return function (dictEq1) {
            var eq1 = Data_Eq.eq(dictEq1);
            return function (gen) {
                var rightIdentity = function (x) {
                    return eq(alt(x)(empty))(x);
                };
                var leftIdentity = function (x) {
                    return eq(alt(empty)(x))(x);
                };
                var annihilation = function (f) {
                    return eq1(map1(f)(empty))(empty);
                };
                return function __do() {
                    Effect_Console.log("Checking 'Left identity' law for Plus")();
                    quickCheck$prime(1000)(map(leftIdentity)(gen))();
                    Effect_Console.log("Checking 'Right identity' law for Plus")();
                    quickCheck$prime(1000)(map(rightIdentity)(gen))();
                    Effect_Console.log("Checking 'Annihilation' law for Plus")();
                    return quickCheck$prime1(1000)(annihilation)();
                };
            };
        };
    };
};
var checkPlus = function (dictPlus) {
    var checkPlusGen1 = checkPlusGen(dictPlus);
    return function (dictArbitrary) {
        var arbitrary = Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary);
        return function (dictEq) {
            var checkPlusGen2 = checkPlusGen1(dictEq);
            return function (dictEq1) {
                var checkPlusGen3 = checkPlusGen2(dictEq1);
                return function (v) {
                    return checkPlusGen3(arbitrary);
                };
            };
        };
    };
};
export {
    checkPlus,
    checkPlusGen
};
