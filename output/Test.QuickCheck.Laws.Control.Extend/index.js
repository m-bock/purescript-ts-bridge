// Generated by purs version 0.15.4
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Extend from "../Control.Extend/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Test_QuickCheck from "../Test.QuickCheck/index.js";
import * as Test_QuickCheck_Arbitrary from "../Test.QuickCheck.Arbitrary/index.js";
import * as Test_QuickCheck_Gen from "../Test.QuickCheck.Gen/index.js";
import * as Test_QuickCheck_Laws from "../Test.QuickCheck.Laws/index.js";
var quickCheck$prime = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableGen(Test_QuickCheck.testableBoolean));
var lift3 = /* #__PURE__ */ Control_Apply.lift3(Test_QuickCheck_Gen.applyGen);
var checkExtendGen = function (dictExtend) {
    var extend = Control_Extend.extend(dictExtend);
    return function (dictArbitrary) {
        return function (dictCoarbitrary) {
            return function (dictCoarbitrary1) {
                return function (dictEq) {
                    var eq = Data_Eq.eq(dictEq);
                    return function (gen) {
                        return function (genwbc) {
                            return function (genwab) {
                                var associativity = function (f) {
                                    return function (g) {
                                        return function (x) {
                                            return eq((function (v) {
                                                return extend(f)(v);
                                            })((function (v) {
                                                return extend(g)(v);
                                            })(x)))(extend(function ($34) {
                                                return f((function (v) {
                                                    return extend(g)(v);
                                                })($34));
                                            })(x));
                                        };
                                    };
                                };
                                return function __do() {
                                    Effect_Console.log("Checking 'Associativity' law for Extend")();
                                    return quickCheck$prime(1000)(lift3(associativity)(genwbc)(genwab)(gen))();
                                };
                            };
                        };
                    };
                };
            };
        };
    };
};
var checkExtend = function (dictExtend) {
    var checkExtendGen1 = checkExtendGen(dictExtend);
    return function (dictArbitrary) {
        var checkExtendGen2 = checkExtendGen1(dictArbitrary);
        var arbitrary = Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary);
        return function (dictCoarbitrary) {
            var checkExtendGen3 = checkExtendGen2(dictCoarbitrary);
            var arbitrary1 = Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbFunction(dictCoarbitrary)(Test_QuickCheck_Laws.arbitraryB));
            return function (dictCoarbitrary1) {
                var checkExtendGen4 = checkExtendGen3(dictCoarbitrary1);
                var arbitrary2 = Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbFunction(dictCoarbitrary1)(Test_QuickCheck_Laws.arbitraryC));
                return function (dictEq) {
                    var checkExtendGen5 = checkExtendGen4(dictEq);
                    return function (v) {
                        return checkExtendGen5(arbitrary)(arbitrary2)(arbitrary1);
                    };
                };
            };
        };
    };
};
export {
    checkExtend,
    checkExtendGen
};
