// Generated by purs version 0.15.4
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Data_Array_NonEmpty_Internal from "../Data.Array.NonEmpty.Internal/index.js";
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Generic_Rep from "../Data.Generic.Rep/index.js";
import * as Data_Monoid from "../Data.Monoid/index.js";
import * as Data_Ord from "../Data.Ord/index.js";
import * as Data_Ordering from "../Data.Ordering/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Show_Generic from "../Data.Show.Generic/index.js";
var show = /* #__PURE__ */ Data_Show.show(Data_Show.showString);
var genericShowConstructor = /* #__PURE__ */ Data_Show_Generic.genericShowConstructor(/* #__PURE__ */ Data_Show_Generic.genericShowArgsArgument(Data_Show.showString));
var genericShowConstructor1 = /* #__PURE__ */ Data_Show_Generic.genericShowConstructor(Data_Show_Generic.genericShowArgsNoArguments);
var genericShowConstructor2 = /* #__PURE__ */ Data_Show_Generic.genericShowConstructor(/* #__PURE__ */ Data_Show_Generic.genericShowArgsArgument(/* #__PURE__ */ Data_Show.showArray(Data_Show.showString)));
var compare = /* #__PURE__ */ Data_Ord.compare(Data_Ord.ordString);
var eq1 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Eq.eqArray(Data_Eq.eqString));
var compare1 = /* #__PURE__ */ Data_Ord.compare(/* #__PURE__ */ Data_Ord.ordArray(Data_Ord.ordString));
var ProperName = function (x) {
    return x;
};
var OpName = function (x) {
    return x;
};
var ModuleName = function (x) {
    return x;
};
var Label = function (x) {
    return x;
};
var Ident = function (x) {
    return x;
};
var RecordPun = /* #__PURE__ */ (function () {
    function RecordPun(value0) {
        this.value0 = value0;
    };
    RecordPun.create = function (value0) {
        return new RecordPun(value0);
    };
    return RecordPun;
})();
var RecordField = /* #__PURE__ */ (function () {
    function RecordField(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    RecordField.create = function (value0) {
        return function (value1) {
            return new RecordField(value0, value1);
        };
    };
    return RecordField;
})();
var Infix = /* #__PURE__ */ (function () {
    function Infix() {

    };
    Infix.value = new Infix();
    return Infix;
})();
var Infixl = /* #__PURE__ */ (function () {
    function Infixl() {

    };
    Infixl.value = new Infixl();
    return Infixl;
})();
var Infixr = /* #__PURE__ */ (function () {
    function Infixr() {

    };
    Infixr.value = new Infixr();
    return Infixr;
})();
var DeclDeriveType_Newtype = /* #__PURE__ */ (function () {
    function DeclDeriveType_Newtype() {

    };
    DeclDeriveType_Newtype.value = new DeclDeriveType_Newtype();
    return DeclDeriveType_Newtype;
})();
var DeclDeriveType_Ordinary = /* #__PURE__ */ (function () {
    function DeclDeriveType_Ordinary() {

    };
    DeclDeriveType_Ordinary.value = new DeclDeriveType_Ordinary();
    return DeclDeriveType_Ordinary;
})();
var OneLineComments = /* #__PURE__ */ (function () {
    function OneLineComments(value0) {
        this.value0 = value0;
    };
    OneLineComments.create = function (value0) {
        return new OneLineComments(value0);
    };
    return OneLineComments;
})();
var BlockComments = /* #__PURE__ */ (function () {
    function BlockComments(value0) {
        this.value0 = value0;
    };
    BlockComments.create = function (value0) {
        return new BlockComments(value0);
    };
    return BlockComments;
})();
var FundepDetermines = /* #__PURE__ */ (function () {
    function FundepDetermines(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    FundepDetermines.create = function (value0) {
        return function (value1) {
            return new FundepDetermines(value0, value1);
        };
    };
    return FundepDetermines;
})();
var showProperName = {
    show: function (v) {
        return "(ProperName " + (show(v) + ")");
    }
};
var showOpName = {
    show: function (v) {
        return "(OpName " + (show(v) + ")");
    }
};
var newtypeProperName = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeOpName = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeModuleName = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeLabel = {
    Coercible0: function () {
        return undefined;
    }
};
var newtypeIdent = {
    Coercible0: function () {
        return undefined;
    }
};
var genericRecordLabeled = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new RecordPun(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return new RecordField(x.value0.value0, x.value0.value1);
        };
        throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 128, column 1 - line 128, column 68): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof RecordPun) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof RecordField) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Product(x.value0, x.value1));
        };
        throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 128, column 1 - line 128, column 68): " + [ x.constructor.name ]);
    }
};
var genericProperName = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericOpName = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var genericModuleName = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showModuleName = {
    show: /* #__PURE__ */ Data_Show_Generic.genericShow(genericModuleName)(/* #__PURE__ */ Data_Show_Generic.genericShowConstructor(/* #__PURE__ */ Data_Show_Generic.genericShowArgsArgument(/* #__PURE__ */ Data_Array_NonEmpty_Internal.showNonEmptyArray(showProperName)))({
        reflectSymbol: function () {
            return "ModuleName";
        }
    }))
};
var genericLabel = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showLabel = {
    show: /* #__PURE__ */ Data_Show_Generic.genericShow(genericLabel)(/* #__PURE__ */ genericShowConstructor({
        reflectSymbol: function () {
            return "Label";
        }
    }))
};
var show1 = /* #__PURE__ */ Data_Show.show(showLabel);
var genericIdent = {
    to: function (x) {
        return x;
    },
    from: function (x) {
        return x;
    }
};
var showIdent = {
    show: /* #__PURE__ */ Data_Show_Generic.genericShow(genericIdent)(/* #__PURE__ */ genericShowConstructor({
        reflectSymbol: function () {
            return "Ident";
        }
    }))
};
var show2 = /* #__PURE__ */ Data_Show.show(showIdent);
var genericShowArgsArgument = /* #__PURE__ */ Data_Show_Generic.genericShowArgsArgument(/* #__PURE__ */ Data_Array_NonEmpty_Internal.showNonEmptyArray(showIdent));
var showRecordLabeled = function (dictShow) {
    var show3 = Data_Show.show(dictShow);
    return {
        show: function (v) {
            if (v instanceof RecordPun) {
                return "(RecordPun " + (show2(v.value0) + ")");
            };
            if (v instanceof RecordField) {
                return "(RecordField { label = " + (show1(v.value0) + (", a = " + (show3(v.value1) + " })")));
            };
            throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 131, column 1 - line 133, column 102): " + [ v.constructor.name ]);
        }
    };
};
var genericFixity = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return Infix.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inl) {
            return Infixl.value;
        };
        if (x instanceof Data_Generic_Rep.Inr && x.value0 instanceof Data_Generic_Rep.Inr) {
            return Infixr.value;
        };
        throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 90, column 1 - line 90, column 50): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof Infix) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof Infixl) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value));
        };
        if (x instanceof Infixr) {
            return new Data_Generic_Rep.Inr(new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value));
        };
        throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 90, column 1 - line 90, column 50): " + [ x.constructor.name ]);
    }
};
var showFixity = {
    show: /* #__PURE__ */ Data_Show_Generic.genericShow(genericFixity)(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ genericShowConstructor1({
        reflectSymbol: function () {
            return "Infix";
        }
    }))(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ genericShowConstructor1({
        reflectSymbol: function () {
            return "Infixl";
        }
    }))(/* #__PURE__ */ genericShowConstructor1({
        reflectSymbol: function () {
            return "Infixr";
        }
    }))))
};
var genericDeclDeriveType = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return DeclDeriveType_Newtype.value;
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return DeclDeriveType_Ordinary.value;
        };
        throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 81, column 1 - line 81, column 66): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof DeclDeriveType_Newtype) {
            return new Data_Generic_Rep.Inl(Data_Generic_Rep.NoArguments.value);
        };
        if (x instanceof DeclDeriveType_Ordinary) {
            return new Data_Generic_Rep.Inr(Data_Generic_Rep.NoArguments.value);
        };
        throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 81, column 1 - line 81, column 66): " + [ x.constructor.name ]);
    }
};
var showDeclDeriveType = {
    show: /* #__PURE__ */ Data_Show_Generic.genericShow(genericDeclDeriveType)(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ genericShowConstructor1({
        reflectSymbol: function () {
            return "DeclDeriveType_Newtype";
        }
    }))(/* #__PURE__ */ genericShowConstructor1({
        reflectSymbol: function () {
            return "DeclDeriveType_Ordinary";
        }
    })))
};
var genericComments = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new OneLineComments(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return new BlockComments(x.value0);
        };
        throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 30, column 1 - line 30, column 54): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof OneLineComments) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof BlockComments) {
            return new Data_Generic_Rep.Inr(x.value0);
        };
        throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 30, column 1 - line 30, column 54): " + [ x.constructor.name ]);
    }
};
var showComments = {
    show: /* #__PURE__ */ Data_Show_Generic.genericShow(genericComments)(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ genericShowConstructor2({
        reflectSymbol: function () {
            return "OneLineComments";
        }
    }))(/* #__PURE__ */ genericShowConstructor2({
        reflectSymbol: function () {
            return "BlockComments";
        }
    })))
};
var genericClassFundep = {
    to: function (x) {
        return new FundepDetermines(x.value0, x.value1);
    },
    from: function (x) {
        return new Data_Generic_Rep.Product(x.value0, x.value1);
    }
};
var showClassFundep = {
    show: /* #__PURE__ */ Data_Show_Generic.genericShow(genericClassFundep)(/* #__PURE__ */ Data_Show_Generic.genericShowConstructor(/* #__PURE__ */ Data_Show_Generic.genericShowArgsProduct(genericShowArgsArgument)(genericShowArgsArgument))({
        reflectSymbol: function () {
            return "FundepDetermines";
        }
    }))
};
var functorRecordLabeled = {
    map: function (f) {
        return function (m) {
            if (m instanceof RecordPun) {
                return new RecordPun(m.value0);
            };
            if (m instanceof RecordField) {
                return new RecordField(m.value0, f(m.value1));
            };
            throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 0, column 0 - line 0, column 0): " + [ m.constructor.name ]);
        };
    }
};
var foldableRecordLabeled = {
    foldMap: function (dictMonoid) {
        var mempty = Data_Monoid.mempty(dictMonoid);
        return function (f) {
            return function (v) {
                if (v instanceof RecordPun) {
                    return mempty;
                };
                if (v instanceof RecordField) {
                    return f(v.value1);
                };
                throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 116, column 1 - line 120, column 31): " + [ f.constructor.name, v.constructor.name ]);
            };
        };
    },
    foldl: function (f) {
        return function (x) {
            return Data_Foldable.foldlDefault(foldableRecordLabeled)(f)(x);
        };
    },
    foldr: function (f) {
        return function (x) {
            return Data_Foldable.foldrDefault(foldableRecordLabeled)(f)(x);
        };
    }
};
var traversableRecordLabeled = {
    traverse: function (dictApplicative) {
        var pure = Control_Applicative.pure(dictApplicative);
        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
        return function (v) {
            return function (v1) {
                if (v1 instanceof RecordPun) {
                    return pure(new RecordPun(v1.value0));
                };
                if (v1 instanceof RecordField) {
                    return map(RecordField.create(v1.value0))(v(v1.value1));
                };
                throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 122, column 1 - line 126, column 59): " + [ v.constructor.name, v1.constructor.name ]);
            };
        };
    },
    sequence: function (dictApplicative) {
        var pure = Control_Applicative.pure(dictApplicative);
        var map = Data_Functor.map((dictApplicative.Apply0()).Functor0());
        return function (v) {
            if (v instanceof RecordPun) {
                return pure(new RecordPun(v.value0));
            };
            if (v instanceof RecordField) {
                return map(RecordField.create(v.value0))(v.value1);
            };
            throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 122, column 1 - line 126, column 59): " + [ v.constructor.name ]);
        };
    },
    Functor0: function () {
        return functorRecordLabeled;
    },
    Foldable1: function () {
        return foldableRecordLabeled;
    }
};
var eqProperName = {
    eq: function (x) {
        return function (y) {
            return x === y;
        };
    }
};
var eq2 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Array_NonEmpty_Internal.eqNonEmptyArray(eqProperName));
var ordProperName = {
    compare: function (x) {
        return function (y) {
            return compare(x)(y);
        };
    },
    Eq0: function () {
        return eqProperName;
    }
};
var compare2 = /* #__PURE__ */ Data_Ord.compare(/* #__PURE__ */ Data_Array_NonEmpty_Internal.ordNonEmptyArray(ordProperName));
var eqOpName = {
    eq: function (x) {
        return function (y) {
            return x === y;
        };
    }
};
var ordOpName = {
    compare: function (x) {
        return function (y) {
            return compare(x)(y);
        };
    },
    Eq0: function () {
        return eqOpName;
    }
};
var eqModuleName = {
    eq: function (x) {
        return function (y) {
            return eq2(x)(y);
        };
    }
};
var ordModuleName = {
    compare: function (x) {
        return function (y) {
            return compare2(x)(y);
        };
    },
    Eq0: function () {
        return eqModuleName;
    }
};
var eqLabel = {
    eq: function (x) {
        return function (y) {
            return x === y;
        };
    }
};
var eq3 = /* #__PURE__ */ Data_Eq.eq(eqLabel);
var ordLabel = {
    compare: function (x) {
        return function (y) {
            return compare(x)(y);
        };
    },
    Eq0: function () {
        return eqLabel;
    }
};
var compare3 = /* #__PURE__ */ Data_Ord.compare(ordLabel);
var eqIdent = {
    eq: function (x) {
        return function (y) {
            return x === y;
        };
    }
};
var eq4 = /* #__PURE__ */ Data_Eq.eq(eqIdent);
var eq5 = /* #__PURE__ */ Data_Eq.eq(/* #__PURE__ */ Data_Array_NonEmpty_Internal.eqNonEmptyArray(eqIdent));
var eqRecordLabeled = function (dictEq) {
    var eq6 = Data_Eq.eq(dictEq);
    return {
        eq: function (x) {
            return function (y) {
                if (x instanceof RecordPun && y instanceof RecordPun) {
                    return eq4(x.value0)(y.value0);
                };
                if (x instanceof RecordField && y instanceof RecordField) {
                    return eq3(x.value0)(y.value0) && eq6(x.value1)(y.value1);
                };
                return false;
            };
        }
    };
};
var ordIdent = {
    compare: function (x) {
        return function (y) {
            return compare(x)(y);
        };
    },
    Eq0: function () {
        return eqIdent;
    }
};
var compare4 = /* #__PURE__ */ Data_Ord.compare(ordIdent);
var compare5 = /* #__PURE__ */ Data_Ord.compare(/* #__PURE__ */ Data_Array_NonEmpty_Internal.ordNonEmptyArray(ordIdent));
var ordRecordLabeled = function (dictOrd) {
    var compare6 = Data_Ord.compare(dictOrd);
    var eqRecordLabeled1 = eqRecordLabeled(dictOrd.Eq0());
    return {
        compare: function (x) {
            return function (y) {
                if (x instanceof RecordPun && y instanceof RecordPun) {
                    return compare4(x.value0)(y.value0);
                };
                if (x instanceof RecordPun) {
                    return Data_Ordering.LT.value;
                };
                if (y instanceof RecordPun) {
                    return Data_Ordering.GT.value;
                };
                if (x instanceof RecordField && y instanceof RecordField) {
                    var v = compare3(x.value0)(y.value0);
                    if (v instanceof Data_Ordering.LT) {
                        return Data_Ordering.LT.value;
                    };
                    if (v instanceof Data_Ordering.GT) {
                        return Data_Ordering.GT.value;
                    };
                    return compare6(x.value1)(y.value1);
                };
                throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 0, column 0 - line 0, column 0): " + [ x.constructor.name, y.constructor.name ]);
            };
        },
        Eq0: function () {
            return eqRecordLabeled1;
        }
    };
};
var eqFixity = {
    eq: function (x) {
        return function (y) {
            if (x instanceof Infix && y instanceof Infix) {
                return true;
            };
            if (x instanceof Infixl && y instanceof Infixl) {
                return true;
            };
            if (x instanceof Infixr && y instanceof Infixr) {
                return true;
            };
            return false;
        };
    }
};
var ordFixity = {
    compare: function (x) {
        return function (y) {
            if (x instanceof Infix && y instanceof Infix) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Infix) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Infix) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Infixl && y instanceof Infixl) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof Infixl) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof Infixl) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof Infixr && y instanceof Infixr) {
                return Data_Ordering.EQ.value;
            };
            throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 0, column 0 - line 0, column 0): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqFixity;
    }
};
var eqDeclDeriveType = {
    eq: function (x) {
        return function (y) {
            if (x instanceof DeclDeriveType_Newtype && y instanceof DeclDeriveType_Newtype) {
                return true;
            };
            if (x instanceof DeclDeriveType_Ordinary && y instanceof DeclDeriveType_Ordinary) {
                return true;
            };
            return false;
        };
    }
};
var ordDeclDeriveType = {
    compare: function (x) {
        return function (y) {
            if (x instanceof DeclDeriveType_Newtype && y instanceof DeclDeriveType_Newtype) {
                return Data_Ordering.EQ.value;
            };
            if (x instanceof DeclDeriveType_Newtype) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof DeclDeriveType_Newtype) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof DeclDeriveType_Ordinary && y instanceof DeclDeriveType_Ordinary) {
                return Data_Ordering.EQ.value;
            };
            throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 0, column 0 - line 0, column 0): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqDeclDeriveType;
    }
};
var eqComments = {
    eq: function (x) {
        return function (y) {
            if (x instanceof OneLineComments && y instanceof OneLineComments) {
                return eq1(x.value0)(y.value0);
            };
            if (x instanceof BlockComments && y instanceof BlockComments) {
                return eq1(x.value0)(y.value0);
            };
            return false;
        };
    }
};
var ordComments = {
    compare: function (x) {
        return function (y) {
            if (x instanceof OneLineComments && y instanceof OneLineComments) {
                return compare1(x.value0)(y.value0);
            };
            if (x instanceof OneLineComments) {
                return Data_Ordering.LT.value;
            };
            if (y instanceof OneLineComments) {
                return Data_Ordering.GT.value;
            };
            if (x instanceof BlockComments && y instanceof BlockComments) {
                return compare1(x.value0)(y.value0);
            };
            throw new Error("Failed pattern match at Language.PS.CST.Types.Leafs (line 0, column 0 - line 0, column 0): " + [ x.constructor.name, y.constructor.name ]);
        };
    },
    Eq0: function () {
        return eqComments;
    }
};
var eqClassFundep = {
    eq: function (x) {
        return function (y) {
            return eq5(x.value0)(y.value0) && eq5(x.value1)(y.value1);
        };
    }
};
var ordClassFundep = {
    compare: function (x) {
        return function (y) {
            var v = compare5(x.value0)(y.value0);
            if (v instanceof Data_Ordering.LT) {
                return Data_Ordering.LT.value;
            };
            if (v instanceof Data_Ordering.GT) {
                return Data_Ordering.GT.value;
            };
            return compare5(x.value1)(y.value1);
        };
    },
    Eq0: function () {
        return eqClassFundep;
    }
};
export {
    OneLineComments,
    BlockComments,
    ModuleName,
    Ident,
    OpName,
    ProperName,
    DeclDeriveType_Newtype,
    DeclDeriveType_Ordinary,
    Infix,
    Infixl,
    Infixr,
    Label,
    FundepDetermines,
    RecordPun,
    RecordField,
    genericComments,
    eqComments,
    ordComments,
    showComments,
    newtypeModuleName,
    genericModuleName,
    eqModuleName,
    ordModuleName,
    showModuleName,
    newtypeIdent,
    genericIdent,
    eqIdent,
    ordIdent,
    showIdent,
    newtypeOpName,
    genericOpName,
    eqOpName,
    ordOpName,
    showOpName,
    newtypeProperName,
    genericProperName,
    eqProperName,
    ordProperName,
    showProperName,
    genericDeclDeriveType,
    eqDeclDeriveType,
    ordDeclDeriveType,
    showDeclDeriveType,
    genericFixity,
    eqFixity,
    ordFixity,
    showFixity,
    newtypeLabel,
    genericLabel,
    eqLabel,
    ordLabel,
    showLabel,
    genericClassFundep,
    eqClassFundep,
    ordClassFundep,
    showClassFundep,
    functorRecordLabeled,
    foldableRecordLabeled,
    traversableRecordLabeled,
    genericRecordLabeled,
    eqRecordLabeled,
    ordRecordLabeled,
    showRecordLabeled
};
