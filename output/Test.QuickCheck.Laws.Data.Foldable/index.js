// Generated by purs version 0.15.4
import * as Data_Eq from "../Data.Eq/index.js";
import * as Data_Foldable from "../Data.Foldable/index.js";
import * as Data_Function from "../Data.Function/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Effect_Console from "../Effect.Console/index.js";
import * as Test_QuickCheck from "../Test.QuickCheck/index.js";
import * as Test_QuickCheck_Arbitrary from "../Test.QuickCheck.Arbitrary/index.js";
import * as Test_QuickCheck_Gen from "../Test.QuickCheck.Gen/index.js";
import * as Test_QuickCheck_Laws from "../Test.QuickCheck.Laws/index.js";
var eq = /* #__PURE__ */ Data_Eq.eq(Test_QuickCheck_Laws.eqB);
var arbFunction = /* #__PURE__ */ Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryA);
var arbFunction1 = /* #__PURE__ */ Test_QuickCheck_Arbitrary.arbFunction(Test_QuickCheck_Laws.coarbitraryB);
var testableFunction = /* #__PURE__ */ Test_QuickCheck.testableFunction(Test_QuickCheck_Laws.arbitraryB)(Test_QuickCheck.testableBoolean);
var quickCheck$prime = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableGen(/* #__PURE__ */ Test_QuickCheck.testableFunction(/* #__PURE__ */ arbFunction(/* #__PURE__ */ arbFunction1(Test_QuickCheck_Laws.arbitraryB)))(testableFunction)));
var map = /* #__PURE__ */ Data_Functor.map(Test_QuickCheck_Gen.functorGen);
var arbFunction2 = /* #__PURE__ */ arbFunction(Test_QuickCheck_Laws.arbitraryB);
var quickCheck$prime1 = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableGen(/* #__PURE__ */ Test_QuickCheck.testableFunction(/* #__PURE__ */ arbFunction1(arbFunction2))(testableFunction)));
var quickCheck$prime2 = /* #__PURE__ */ Test_QuickCheck["quickCheck$prime"](/* #__PURE__ */ Test_QuickCheck.testableGen(/* #__PURE__ */ Test_QuickCheck.testableFunction(arbFunction2)(Test_QuickCheck.testableBoolean)));
var checkFoldableGen = function (dictFoldable) {
    var foldr = Data_Foldable.foldr(dictFoldable);
    var foldrDefault = Data_Foldable.foldrDefault(dictFoldable);
    var foldl = Data_Foldable.foldl(dictFoldable);
    var foldlDefault = Data_Foldable.foldlDefault(dictFoldable);
    return function (gen) {
        var foldrLaw = function (fa) {
            return function (f) {
                return function (b) {
                    return eq(foldr(f)(b)(fa))(foldrDefault(f)(b)(fa));
                };
            };
        };
        var foldlLaw = function (fa) {
            return function (f) {
                return function (b) {
                    return eq(foldl(f)(b)(fa))(foldlDefault(f)(b)(fa));
                };
            };
        };
        return function __do() {
            Effect_Console.log("Checking 'foldr' law for Foldable")();
            quickCheck$prime(1000)(map(foldrLaw)(gen))();
            Effect_Console.log("Checking 'foldl' law for Foldable")();
            return quickCheck$prime1(1000)(map(foldlLaw)(gen))();
        };
    };
};
var checkFoldableFunctorGen = function (dictFoldable) {
    var foldMap = Data_Foldable.foldMap(dictFoldable)(Test_QuickCheck_Laws.monoidB);
    var fold = Data_Foldable.fold(dictFoldable)(Test_QuickCheck_Laws.monoidB);
    var checkFoldableGen1 = checkFoldableGen(dictFoldable);
    return function (dictFunctor) {
        var map1 = Data_Functor.map(dictFunctor);
        return function (gen) {
            var foldMapLaw = function (f) {
                return function (t) {
                    return eq(foldMap(f)(t))(fold(map1(f)(t)));
                };
            };
            return function __do() {
                checkFoldableGen1(gen)();
                Effect_Console.log("Checking 'foldMap' law for Foldable")();
                return quickCheck$prime2(1000)(map(Data_Function.flip(foldMapLaw))(gen))();
            };
        };
    };
};
var checkFoldableFunctor = function (dictFoldable) {
    var checkFoldableFunctorGen1 = checkFoldableFunctorGen(dictFoldable);
    return function (dictFunctor) {
        var checkFoldableFunctorGen2 = checkFoldableFunctorGen1(dictFunctor);
        return function (dictArbitrary) {
            var arbitrary = Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary);
            return function (v) {
                return checkFoldableFunctorGen2(arbitrary);
            };
        };
    };
};
var checkFoldable = function (dictFoldable) {
    var checkFoldableGen1 = checkFoldableGen(dictFoldable);
    return function (dictArbitrary) {
        var arbitrary = Test_QuickCheck_Arbitrary.arbitrary(dictArbitrary);
        return function (v) {
            return checkFoldableGen1(arbitrary);
        };
    };
};
export {
    checkFoldable,
    checkFoldableGen,
    checkFoldableFunctor,
    checkFoldableFunctorGen
};
