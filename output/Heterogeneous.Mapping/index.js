// Generated by purs version 0.15.4
import * as Control_Category from "../Control.Category/index.js";
import * as Control_Semigroupoid from "../Control.Semigroupoid/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Functor_Variant from "../Data.Functor.Variant/index.js";
import * as Data_FunctorWithIndex from "../Data.FunctorWithIndex/index.js";
import * as Data_Tuple from "../Data.Tuple/index.js";
import * as Data_Variant from "../Data.Variant/index.js";
import * as Record_Builder from "../Record.Builder/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var on = /* #__PURE__ */ Data_Variant.on();
var inj = /* #__PURE__ */ Data_Variant.inj();
var on1 = /* #__PURE__ */ Data_Functor_Variant.on();
var inj1 = /* #__PURE__ */ Data_Functor_Variant.inj();
var identity = /* #__PURE__ */ Control_Category.identity(Record_Builder.categoryBuilder);
var compose1 = /* #__PURE__ */ Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder);
var modify = /* #__PURE__ */ Record_Builder.modify()();
var ConstMapping = function (x) {
    return x;
};
var mappingWithIndex = function (dict) {
    return dict.mappingWithIndex;
};
var mappingFunction = {
    mapping: function (k) {
        return k;
    }
};
var mapping = function (dict) {
    return dict.mapping;
};
var mapVariantWithIndexNil = {
    mapVariantWithIndex: function (v) {
        return function (v1) {
            return Data_Variant.case_;
        };
    }
};
var mapVariantWithIndex = function (dict) {
    return dict.mapVariantWithIndex;
};
var mapVariantWithIndexCons = function (dictIsSymbol) {
    var on2 = on(dictIsSymbol);
    var inj2 = inj(dictIsSymbol);
    return function () {
        return function () {
            return function (dictMappingWithIndex) {
                var mappingWithIndex1 = mappingWithIndex(dictMappingWithIndex);
                return function (dictMapVariantWithIndex) {
                    var mapVariantWithIndex1 = mapVariantWithIndex(dictMapVariantWithIndex);
                    return {
                        mapVariantWithIndex: function (v) {
                            return function (fn) {
                                return on2(Type_Proxy["Proxy"].value)((function () {
                                    var $96 = inj2(Type_Proxy["Proxy"].value);
                                    var $97 = mappingWithIndex1(fn)(Type_Proxy["Proxy"].value);
                                    return function ($98) {
                                        return $96($97($98));
                                    };
                                })())(mapVariantWithIndex1(Type_Proxy["Proxy"].value)(fn));
                            };
                        }
                    };
                };
            };
        };
    };
};
var mapVariantFWithIndexNil = {
    mapVariantFWithIndex: function (v) {
        return function (v1) {
            return Data_Functor_Variant.case_;
        };
    }
};
var mapVariantFWithIndex = function (dict) {
    return dict.mapVariantFWithIndex;
};
var mapVariantFWithIndexCons = function (dictIsSymbol) {
    var on2 = on1(dictIsSymbol);
    var inj2 = inj1(dictIsSymbol);
    return function () {
        return function () {
            return function (dictMappingWithIndex) {
                var mappingWithIndex1 = mappingWithIndex(dictMappingWithIndex);
                return function (dictMapVariantFWithIndex) {
                    var mapVariantFWithIndex1 = mapVariantFWithIndex(dictMapVariantFWithIndex);
                    return function (dictFunctor) {
                        var inj3 = inj2(dictFunctor);
                        return {
                            mapVariantFWithIndex: function (v) {
                                return function (fn) {
                                    return on2(Type_Proxy["Proxy"].value)((function () {
                                        var $99 = inj3(Type_Proxy["Proxy"].value);
                                        var $100 = mappingWithIndex1(fn)(Type_Proxy["Proxy"].value);
                                        return function ($101) {
                                            return $99($100($101));
                                        };
                                    })())(mapVariantFWithIndex1(Type_Proxy["Proxy"].value)(fn));
                                };
                            }
                        };
                    };
                };
            };
        };
    };
};
var mapRecordWithIndexNil = {
    mapRecordWithIndexBuilder: function (v) {
        return function (v1) {
            return identity;
        };
    }
};
var mapRecordWithIndexBuilder = function (dict) {
    return dict.mapRecordWithIndexBuilder;
};
var mapRecordWithIndexCons = function (dictIsSymbol) {
    var modify1 = modify(dictIsSymbol);
    return function (dictMappingWithIndex) {
        var mappingWithIndex1 = mappingWithIndex(dictMappingWithIndex);
        return function (dictMapRecordWithIndex) {
            var mapRecordWithIndexBuilder1 = mapRecordWithIndexBuilder(dictMapRecordWithIndex);
            return function () {
                return function () {
                    return {
                        mapRecordWithIndexBuilder: function (v) {
                            return function (f) {
                                return compose1(modify1(Type_Proxy["Proxy"].value)(mappingWithIndex1(f)(Type_Proxy["Proxy"].value)))(mapRecordWithIndexBuilder1(Type_Proxy["Proxy"].value)(f));
                            };
                        }
                    };
                };
            };
        };
    };
};
var hmapWithIndexVariantF = function () {
    return function (dictMapVariantFWithIndex) {
        return {
            hmapWithIndex: mapVariantFWithIndex(dictMapVariantFWithIndex)(Type_Proxy["Proxy"].value)
        };
    };
};
var hmapWithIndexVariant = function () {
    return function (dictMapVariantWithIndex) {
        return {
            hmapWithIndex: mapVariantWithIndex(dictMapVariantWithIndex)(Type_Proxy["Proxy"].value)
        };
    };
};
var hmapWithIndexRecord = function () {
    return function (dictMapRecordWithIndex) {
        return {
            hmapWithIndex: (function () {
                var $102 = mapRecordWithIndexBuilder(dictMapRecordWithIndex)(Type_Proxy["Proxy"].value);
                return function ($103) {
                    return Record_Builder.build($102($103));
                };
            })()
        };
    };
};
var hmapWithIndexApp = function (dictFunctorWithIndex) {
    var mapWithIndex = Data_FunctorWithIndex.mapWithIndex(dictFunctorWithIndex);
    return function (dictMappingWithIndex) {
        var mappingWithIndex1 = mappingWithIndex(dictMappingWithIndex);
        return {
            hmapWithIndex: function (f) {
                return function (v) {
                    return mapWithIndex(mappingWithIndex1(f))(v);
                };
            }
        };
    };
};
var hmapWithIndex = function (dict) {
    return dict.hmapWithIndex;
};
var hmapVariantF = function () {
    return function (dictMapVariantFWithIndex) {
        return {
            hmap: (function () {
                var $104 = mapVariantFWithIndex(dictMapVariantFWithIndex)(Type_Proxy["Proxy"].value);
                return function ($105) {
                    return $104(ConstMapping($105));
                };
            })()
        };
    };
};
var hmapVariant = function () {
    return function (dictMapVariantWithIndex) {
        return {
            hmap: (function () {
                var $106 = mapVariantWithIndex(dictMapVariantWithIndex)(Type_Proxy["Proxy"].value);
                return function ($107) {
                    return $106(ConstMapping($107));
                };
            })()
        };
    };
};
var hmapTuple = function (dictMapping) {
    var mapping1 = mapping(dictMapping);
    return function (dictMapping1) {
        var mapping2 = mapping(dictMapping1);
        return {
            hmap: function (fn) {
                return function (v) {
                    return new Data_Tuple.Tuple(mapping1(fn)(v.value0), mapping2(fn)(v.value1));
                };
            }
        };
    };
};
var hmapRecord = function () {
    return function (dictMapRecordWithIndex) {
        return {
            hmap: (function () {
                var $108 = mapRecordWithIndexBuilder(dictMapRecordWithIndex)(Type_Proxy["Proxy"].value);
                return function ($109) {
                    return Record_Builder.build($108(ConstMapping($109)));
                };
            })()
        };
    };
};
var hmapEither = function (dictMapping) {
    var mapping1 = mapping(dictMapping);
    return function (dictMapping1) {
        var mapping2 = mapping(dictMapping1);
        return {
            hmap: function (fn) {
                return function (v) {
                    if (v instanceof Data_Either.Left) {
                        return new Data_Either.Left(mapping1(fn)(v.value0));
                    };
                    if (v instanceof Data_Either.Right) {
                        return new Data_Either.Right(mapping2(fn)(v.value0));
                    };
                    throw new Error("Failed pattern match at Heterogeneous.Mapping (line 119, column 13 - line 121, column 36): " + [ v.constructor.name ]);
                };
            }
        };
    };
};
var hmapApp = function (dictFunctor) {
    var map = Data_Functor.map(dictFunctor);
    return function (dictMapping) {
        var mapping1 = mapping(dictMapping);
        return {
            hmap: function (f) {
                return function (v) {
                    return map(mapping1(f))(v);
                };
            }
        };
    };
};
var hmap = function (dict) {
    return dict.hmap;
};
var constMapping = function (dictMapping) {
    var mapping1 = mapping(dictMapping);
    return {
        mappingWithIndex: function (v) {
            return function (v1) {
                return mapping1(v);
            };
        }
    };
};
export {
    hmap,
    hmapWithIndex,
    mapRecordWithIndexBuilder,
    mapVariantFWithIndex,
    mapVariantWithIndex,
    mapping,
    mappingWithIndex,
    ConstMapping,
    mappingFunction,
    constMapping,
    hmapApp,
    hmapWithIndexApp,
    hmapRecord,
    hmapWithIndexRecord,
    mapRecordWithIndexCons,
    mapRecordWithIndexNil,
    hmapTuple,
    hmapEither,
    hmapVariant,
    hmapWithIndexVariant,
    mapVariantWithIndexCons,
    mapVariantWithIndexNil,
    hmapVariantF,
    hmapWithIndexVariantF,
    mapVariantFWithIndexCons,
    mapVariantFWithIndexNil
};
