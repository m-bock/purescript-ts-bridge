// Generated by purs version 0.15.4
import * as Control_Applicative from "../Control.Applicative/index.js";
import * as Control_Apply from "../Control.Apply/index.js";
import * as Control_Bind from "../Control.Bind/index.js";
import * as Data_Either from "../Data.Either/index.js";
import * as Data_Functor from "../Data.Functor/index.js";
import * as Data_Generic_Rep from "../Data.Generic.Rep/index.js";
import * as Data_Int from "../Data.Int/index.js";
import * as Data_Maybe from "../Data.Maybe/index.js";
import * as Data_Number from "../Data.Number/index.js";
import * as Data_Show from "../Data.Show/index.js";
import * as Data_Show_Generic from "../Data.Show.Generic/index.js";
import * as Data_String_CodeUnits from "../Data.String.CodeUnits/index.js";
import * as Data_String_Common from "../Data.String.Common/index.js";
import * as Data_Symbol from "../Data.Symbol/index.js";
import * as Foreign_Object from "../Foreign.Object/index.js";
import * as Record from "../Record/index.js";
import * as Type_Equality from "../Type.Equality/index.js";
import * as Type_Proxy from "../Type.Proxy/index.js";
var pure = /* #__PURE__ */ Control_Applicative.pure(Data_Either.applicativeEither);
var apply = /* #__PURE__ */ Control_Apply.apply(Data_Either.applyEither);
var map = /* #__PURE__ */ Data_Functor.map(Data_Either.functorEither);
var pure1 = /* #__PURE__ */ Control_Applicative.pure(Data_Maybe.applicativeMaybe);
var map1 = /* #__PURE__ */ Data_Functor.map(Data_Maybe.functorMaybe);
var bind = /* #__PURE__ */ Control_Bind.bind(Data_Either.bindEither);
var genericShowConstructor = /* #__PURE__ */ Data_Show_Generic.genericShowConstructor(/* #__PURE__ */ Data_Show_Generic.genericShowArgsArgument(Data_Show.showString));
var EnvLookupError = /* #__PURE__ */ (function () {
    function EnvLookupError(value0) {
        this.value0 = value0;
    };
    EnvLookupError.create = function (value0) {
        return new EnvLookupError(value0);
    };
    return EnvLookupError;
})();
var EnvParseError = /* #__PURE__ */ (function () {
    function EnvParseError(value0) {
        this.value0 = value0;
    };
    EnvParseError.create = function (value0) {
        return new EnvParseError(value0);
    };
    return EnvParseError;
})();
var readValue = function (dict) {
    return dict.readValue;
};
var readEnvFieldsNil = function (dictTypeEquals) {
    var to = Type_Equality.to(dictTypeEquals);
    return {
        readEnvFields: function (v) {
            return function (v1) {
                return function (v2) {
                    return pure(to({}));
                };
            };
        }
    };
};
var readEnvFields = function (dict) {
    return dict.readEnvFields;
};
var readEnvFieldsCons = function (dictIsSymbol) {
    var insert = Record.insert(dictIsSymbol)()();
    return function (dictIsSymbol1) {
        var reflectSymbol = Data_Symbol.reflectSymbol(dictIsSymbol1);
        return function () {
            return function (dictReadEnvFields) {
                var readEnvFields1 = readEnvFields(dictReadEnvFields);
                return function () {
                    return function () {
                        return function (dictReadValue) {
                            var readValue1 = readValue(dictReadValue);
                            return {
                                readEnvFields: function (v) {
                                    return function (v1) {
                                        return function (env) {
                                            var varName = reflectSymbol(Type_Proxy["Proxy"].value);
                                            var value = readValue1(varName)(env);
                                            var tail = readEnvFields1(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value)(env);
                                            return apply(map(insert(Type_Proxy["Proxy"].value))(value))(tail);
                                        };
                                    };
                                }
                            };
                        };
                    };
                };
            };
        };
    };
};
var readEnvImpl = function () {
    return function () {
        return function (dictReadEnvFields) {
            var readEnvFields1 = readEnvFields(dictReadEnvFields);
            return function () {
                return function () {
                    return {
                        readEnv: function (v) {
                            return readEnvFields1(Type_Proxy["Proxy"].value)(Type_Proxy["Proxy"].value);
                        }
                    };
                };
            };
        };
    };
};
var readEnv = function (dict) {
    return dict.readEnv;
};
var parseValueString = {
    parseValue: pure1
};
var parseValueNumber = {
    parseValue: Data_Number.fromString
};
var parseValueInt = {
    parseValue: Data_Int.fromString
};
var parseValueChar = {
    parseValue: /* #__PURE__ */ (function () {
        var $82 = map1(function (v) {
            return v.head;
        });
        return function ($83) {
            return $82(Data_String_CodeUnits.uncons($83));
        };
    })()
};
var parseValueBoolean = {
    parseValue: function ($84) {
        return (function (v) {
            if (v === "0") {
                return pure1(false);
            };
            if (v === "1") {
                return pure1(true);
            };
            if (v === "false") {
                return pure1(false);
            };
            if (v === "true") {
                return pure1(true);
            };
            return Data_Maybe.Nothing.value;
        })(Data_String_Common.toLower($84));
    }
};
var parseValue = function (dict) {
    return dict.parseValue;
};
var readValueOptional = function (dictParseValue) {
    var parseValue1 = parseValue(dictParseValue);
    return {
        readValue: function (name) {
            return function (env) {
                var v = Foreign_Object.lookup(name)(env);
                if (v instanceof Data_Maybe.Nothing) {
                    return pure(Data_Maybe.Nothing.value);
                };
                if (v instanceof Data_Maybe.Just) {
                    return Data_Either.note(new EnvParseError(name))(map1(Data_Maybe.Just.create)(parseValue1(v.value0)));
                };
                throw new Error("Failed pattern match at TypedEnv (line 103, column 5 - line 107, column 60): " + [ v.constructor.name ]);
            };
        }
    };
};
var readValueRequired = function (dictParseValue) {
    var parseValue1 = parseValue(dictParseValue);
    return {
        readValue: function (name) {
            return function (env) {
                return bind(Data_Either.note(new EnvLookupError(name))(Foreign_Object.lookup(name)(env)))((function () {
                    var $85 = Data_Either.note(new EnvParseError(name));
                    return function ($86) {
                        return $85(parseValue1($86));
                    };
                })());
            };
        }
    };
};
var genericEnvError = {
    to: function (x) {
        if (x instanceof Data_Generic_Rep.Inl) {
            return new EnvLookupError(x.value0);
        };
        if (x instanceof Data_Generic_Rep.Inr) {
            return new EnvParseError(x.value0);
        };
        throw new Error("Failed pattern match at TypedEnv (line 57, column 1 - line 57, column 54): " + [ x.constructor.name ]);
    },
    from: function (x) {
        if (x instanceof EnvLookupError) {
            return new Data_Generic_Rep.Inl(x.value0);
        };
        if (x instanceof EnvParseError) {
            return new Data_Generic_Rep.Inr(x.value0);
        };
        throw new Error("Failed pattern match at TypedEnv (line 57, column 1 - line 57, column 54): " + [ x.constructor.name ]);
    }
};
var showEnvError = {
    show: /* #__PURE__ */ Data_Show_Generic.genericShow(genericEnvError)(/* #__PURE__ */ Data_Show_Generic.genericShowSum(/* #__PURE__ */ genericShowConstructor({
        reflectSymbol: function () {
            return "EnvLookupError";
        }
    }))(/* #__PURE__ */ genericShowConstructor({
        reflectSymbol: function () {
            return "EnvParseError";
        }
    })))
};
var fromEnv = function (dictReadEnv) {
    return readEnv(dictReadEnv);
};
var eqEnvError = {
    eq: function (x) {
        return function (y) {
            if (x instanceof EnvLookupError && y instanceof EnvLookupError) {
                return x.value0 === y.value0;
            };
            if (x instanceof EnvParseError && y instanceof EnvParseError) {
                return x.value0 === y.value0;
            };
            return false;
        };
    }
};
var envErrorMessage = function (v) {
    if (v instanceof EnvLookupError) {
        return "The required variable \"" + (v.value0 + "\" was not specified.");
    };
    if (v instanceof EnvParseError) {
        return "The variable \"" + (v.value0 + "\" was formatted incorrectly.");
    };
    throw new Error("Failed pattern match at TypedEnv (line 64, column 19 - line 66, column 84): " + [ v.constructor.name ]);
};
export {
    fromEnv,
    EnvLookupError,
    EnvParseError,
    envErrorMessage,
    parseValue,
    readValue,
    readEnv,
    readEnvFields,
    eqEnvError,
    genericEnvError,
    showEnvError,
    parseValueBoolean,
    parseValueChar,
    parseValueInt,
    parseValueNumber,
    parseValueString,
    readValueOptional,
    readValueRequired,
    readEnvImpl,
    readEnvFieldsCons,
    readEnvFieldsNil
};
